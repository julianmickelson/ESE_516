
GccBoardProject4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b00  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000124  20000068  00002b68  00020068  2**2
                  ALLOC
  3 .stack        00002004  2000018c  00002c8c  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021772  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000319e  00000000  00000000  0004185b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004063  00000000  00000000  000449f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000440  00000000  00000000  00048a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000480  00000000  00000000  00048e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000196d8  00000000  00000000  0004931c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a1b2  00000000  00000000  000629f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000887cb  00000000  00000000  0006cba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001170  00000000  00000000  000f5374  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 21 00 20 15 15 00 00 11 15 00 00 11 15 00 00     .!. ............
	...
      2c:	11 15 00 00 00 00 00 00 00 00 00 00 11 15 00 00     ................
      3c:	11 15 00 00 11 15 00 00 11 15 00 00 11 15 00 00     ................
      4c:	11 15 00 00 11 15 00 00 11 15 00 00 11 15 00 00     ................
      5c:	11 15 00 00 11 15 00 00 49 0c 00 00 59 0c 00 00     ........I...Y...
      6c:	69 0c 00 00 79 0c 00 00 89 0c 00 00 99 0c 00 00     i...y...........
      7c:	11 15 00 00 11 15 00 00 11 15 00 00 11 15 00 00     ................
      8c:	11 15 00 00 11 15 00 00 00 00 00 00 00 00 00 00     ................
      9c:	11 15 00 00 11 15 00 00 11 15 00 00 11 15 00 00     ................
      ac:	11 15 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00002b00 	.word	0x00002b00

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00002b00 	.word	0x00002b00
     10c:	00002b00 	.word	0x00002b00
     110:	00000000 	.word	0x00000000

00000114 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46de      	mov	lr, fp
     118:	4657      	mov	r7, sl
     11a:	464e      	mov	r6, r9
     11c:	4645      	mov	r5, r8
     11e:	b5e0      	push	{r5, r6, r7, lr}
     120:	b087      	sub	sp, #28
     122:	4680      	mov	r8, r0
     124:	9104      	str	r1, [sp, #16]
     126:	0016      	movs	r6, r2
     128:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     12a:	2200      	movs	r2, #0
     12c:	2300      	movs	r3, #0
     12e:	2100      	movs	r1, #0
     130:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     132:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     134:	2001      	movs	r0, #1
     136:	0021      	movs	r1, r4
     138:	9600      	str	r6, [sp, #0]
     13a:	9701      	str	r7, [sp, #4]
     13c:	465c      	mov	r4, fp
     13e:	9403      	str	r4, [sp, #12]
     140:	4644      	mov	r4, r8
     142:	9405      	str	r4, [sp, #20]
     144:	e013      	b.n	16e <long_division+0x5a>
     146:	2420      	movs	r4, #32
     148:	1a64      	subs	r4, r4, r1
     14a:	0005      	movs	r5, r0
     14c:	40e5      	lsrs	r5, r4
     14e:	46a8      	mov	r8, r5
     150:	e014      	b.n	17c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     152:	9c00      	ldr	r4, [sp, #0]
     154:	9d01      	ldr	r5, [sp, #4]
     156:	1b12      	subs	r2, r2, r4
     158:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     15a:	465c      	mov	r4, fp
     15c:	464d      	mov	r5, r9
     15e:	432c      	orrs	r4, r5
     160:	46a3      	mov	fp, r4
     162:	9c03      	ldr	r4, [sp, #12]
     164:	4645      	mov	r5, r8
     166:	432c      	orrs	r4, r5
     168:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     16a:	3901      	subs	r1, #1
     16c:	d325      	bcc.n	1ba <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     16e:	2420      	movs	r4, #32
     170:	4264      	negs	r4, r4
     172:	190c      	adds	r4, r1, r4
     174:	d4e7      	bmi.n	146 <long_division+0x32>
     176:	0005      	movs	r5, r0
     178:	40a5      	lsls	r5, r4
     17a:	46a8      	mov	r8, r5
     17c:	0004      	movs	r4, r0
     17e:	408c      	lsls	r4, r1
     180:	46a1      	mov	r9, r4
		r = r << 1;
     182:	1892      	adds	r2, r2, r2
     184:	415b      	adcs	r3, r3
     186:	0014      	movs	r4, r2
     188:	001d      	movs	r5, r3
		if (n & bit_shift) {
     18a:	9e05      	ldr	r6, [sp, #20]
     18c:	464f      	mov	r7, r9
     18e:	403e      	ands	r6, r7
     190:	46b4      	mov	ip, r6
     192:	9e04      	ldr	r6, [sp, #16]
     194:	4647      	mov	r7, r8
     196:	403e      	ands	r6, r7
     198:	46b2      	mov	sl, r6
     19a:	4666      	mov	r6, ip
     19c:	4657      	mov	r7, sl
     19e:	433e      	orrs	r6, r7
     1a0:	d003      	beq.n	1aa <long_division+0x96>
			r |= 0x01;
     1a2:	0006      	movs	r6, r0
     1a4:	4326      	orrs	r6, r4
     1a6:	0032      	movs	r2, r6
     1a8:	002b      	movs	r3, r5
		if (r >= d) {
     1aa:	9c00      	ldr	r4, [sp, #0]
     1ac:	9d01      	ldr	r5, [sp, #4]
     1ae:	429d      	cmp	r5, r3
     1b0:	d8db      	bhi.n	16a <long_division+0x56>
     1b2:	d1ce      	bne.n	152 <long_division+0x3e>
     1b4:	4294      	cmp	r4, r2
     1b6:	d8d8      	bhi.n	16a <long_division+0x56>
     1b8:	e7cb      	b.n	152 <long_division+0x3e>
     1ba:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     1bc:	4658      	mov	r0, fp
     1be:	0019      	movs	r1, r3
     1c0:	b007      	add	sp, #28
     1c2:	bc3c      	pop	{r2, r3, r4, r5}
     1c4:	4690      	mov	r8, r2
     1c6:	4699      	mov	r9, r3
     1c8:	46a2      	mov	sl, r4
     1ca:	46ab      	mov	fp, r5
     1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000001ce <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     1ce:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     1d0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1d2:	2340      	movs	r3, #64	; 0x40
     1d4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     1d6:	4281      	cmp	r1, r0
     1d8:	d202      	bcs.n	1e0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     1da:	0018      	movs	r0, r3
     1dc:	bd10      	pop	{r4, pc}
		baud_calculated++;
     1de:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     1e0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     1e2:	1c63      	adds	r3, r4, #1
     1e4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     1e6:	4288      	cmp	r0, r1
     1e8:	d9f9      	bls.n	1de <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1ea:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     1ec:	2cff      	cmp	r4, #255	; 0xff
     1ee:	d8f4      	bhi.n	1da <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     1f0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     1f2:	2300      	movs	r3, #0
     1f4:	e7f1      	b.n	1da <_sercom_get_sync_baud_val+0xc>
	...

000001f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	b083      	sub	sp, #12
     1fc:	000f      	movs	r7, r1
     1fe:	0016      	movs	r6, r2
     200:	aa08      	add	r2, sp, #32
     202:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     204:	0004      	movs	r4, r0
     206:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     208:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     20a:	42bc      	cmp	r4, r7
     20c:	d902      	bls.n	214 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     20e:	0010      	movs	r0, r2
     210:	b003      	add	sp, #12
     212:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     214:	2b00      	cmp	r3, #0
     216:	d114      	bne.n	242 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     218:	0002      	movs	r2, r0
     21a:	0008      	movs	r0, r1
     21c:	2100      	movs	r1, #0
     21e:	4c19      	ldr	r4, [pc, #100]	; (284 <_sercom_get_async_baud_val+0x8c>)
     220:	47a0      	blx	r4
     222:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     224:	003a      	movs	r2, r7
     226:	2300      	movs	r3, #0
     228:	2000      	movs	r0, #0
     22a:	4c17      	ldr	r4, [pc, #92]	; (288 <_sercom_get_async_baud_val+0x90>)
     22c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     22e:	2200      	movs	r2, #0
     230:	2301      	movs	r3, #1
     232:	1a12      	subs	r2, r2, r0
     234:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     236:	0c12      	lsrs	r2, r2, #16
     238:	041b      	lsls	r3, r3, #16
     23a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     23c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     23e:	2200      	movs	r2, #0
     240:	e7e5      	b.n	20e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     242:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     244:	2b01      	cmp	r3, #1
     246:	d1f9      	bne.n	23c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     248:	000a      	movs	r2, r1
     24a:	2300      	movs	r3, #0
     24c:	2100      	movs	r1, #0
     24e:	4c0d      	ldr	r4, [pc, #52]	; (284 <_sercom_get_async_baud_val+0x8c>)
     250:	47a0      	blx	r4
     252:	0002      	movs	r2, r0
     254:	000b      	movs	r3, r1
     256:	9200      	str	r2, [sp, #0]
     258:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     25a:	0038      	movs	r0, r7
     25c:	2100      	movs	r1, #0
     25e:	4c0a      	ldr	r4, [pc, #40]	; (288 <_sercom_get_async_baud_val+0x90>)
     260:	47a0      	blx	r4
     262:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     264:	2380      	movs	r3, #128	; 0x80
     266:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     268:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     26a:	4298      	cmp	r0, r3
     26c:	d8cf      	bhi.n	20e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     26e:	0f79      	lsrs	r1, r7, #29
     270:	00f8      	lsls	r0, r7, #3
     272:	9a00      	ldr	r2, [sp, #0]
     274:	9b01      	ldr	r3, [sp, #4]
     276:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     278:	00ea      	lsls	r2, r5, #3
     27a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     27c:	b2d2      	uxtb	r2, r2
     27e:	0352      	lsls	r2, r2, #13
     280:	432a      	orrs	r2, r5
     282:	e7db      	b.n	23c <_sercom_get_async_baud_val+0x44>
     284:	0000194d 	.word	0x0000194d
     288:	00000115 	.word	0x00000115

0000028c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     28c:	b510      	push	{r4, lr}
     28e:	b082      	sub	sp, #8
     290:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     292:	4b0e      	ldr	r3, [pc, #56]	; (2cc <sercom_set_gclk_generator+0x40>)
     294:	781b      	ldrb	r3, [r3, #0]
     296:	2b00      	cmp	r3, #0
     298:	d007      	beq.n	2aa <sercom_set_gclk_generator+0x1e>
     29a:	2900      	cmp	r1, #0
     29c:	d105      	bne.n	2aa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     29e:	4b0b      	ldr	r3, [pc, #44]	; (2cc <sercom_set_gclk_generator+0x40>)
     2a0:	785b      	ldrb	r3, [r3, #1]
     2a2:	4283      	cmp	r3, r0
     2a4:	d010      	beq.n	2c8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     2a6:	201d      	movs	r0, #29
     2a8:	e00c      	b.n	2c4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     2aa:	a901      	add	r1, sp, #4
     2ac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     2ae:	2013      	movs	r0, #19
     2b0:	4b07      	ldr	r3, [pc, #28]	; (2d0 <sercom_set_gclk_generator+0x44>)
     2b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     2b4:	2013      	movs	r0, #19
     2b6:	4b07      	ldr	r3, [pc, #28]	; (2d4 <sercom_set_gclk_generator+0x48>)
     2b8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     2ba:	4b04      	ldr	r3, [pc, #16]	; (2cc <sercom_set_gclk_generator+0x40>)
     2bc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     2be:	2201      	movs	r2, #1
     2c0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     2c2:	2000      	movs	r0, #0
}
     2c4:	b002      	add	sp, #8
     2c6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     2c8:	2000      	movs	r0, #0
     2ca:	e7fb      	b.n	2c4 <sercom_set_gclk_generator+0x38>
     2cc:	20000084 	.word	0x20000084
     2d0:	000013b9 	.word	0x000013b9
     2d4:	0000132d 	.word	0x0000132d

000002d8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     2d8:	4b40      	ldr	r3, [pc, #256]	; (3dc <_sercom_get_default_pad+0x104>)
     2da:	4298      	cmp	r0, r3
     2dc:	d031      	beq.n	342 <_sercom_get_default_pad+0x6a>
     2de:	d90a      	bls.n	2f6 <_sercom_get_default_pad+0x1e>
     2e0:	4b3f      	ldr	r3, [pc, #252]	; (3e0 <_sercom_get_default_pad+0x108>)
     2e2:	4298      	cmp	r0, r3
     2e4:	d04d      	beq.n	382 <_sercom_get_default_pad+0xaa>
     2e6:	4b3f      	ldr	r3, [pc, #252]	; (3e4 <_sercom_get_default_pad+0x10c>)
     2e8:	4298      	cmp	r0, r3
     2ea:	d05a      	beq.n	3a2 <_sercom_get_default_pad+0xca>
     2ec:	4b3e      	ldr	r3, [pc, #248]	; (3e8 <_sercom_get_default_pad+0x110>)
     2ee:	4298      	cmp	r0, r3
     2f0:	d037      	beq.n	362 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     2f2:	2000      	movs	r0, #0
}
     2f4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     2f6:	4b3d      	ldr	r3, [pc, #244]	; (3ec <_sercom_get_default_pad+0x114>)
     2f8:	4298      	cmp	r0, r3
     2fa:	d00c      	beq.n	316 <_sercom_get_default_pad+0x3e>
     2fc:	4b3c      	ldr	r3, [pc, #240]	; (3f0 <_sercom_get_default_pad+0x118>)
     2fe:	4298      	cmp	r0, r3
     300:	d1f7      	bne.n	2f2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     302:	2901      	cmp	r1, #1
     304:	d017      	beq.n	336 <_sercom_get_default_pad+0x5e>
     306:	2900      	cmp	r1, #0
     308:	d05d      	beq.n	3c6 <_sercom_get_default_pad+0xee>
     30a:	2902      	cmp	r1, #2
     30c:	d015      	beq.n	33a <_sercom_get_default_pad+0x62>
     30e:	2903      	cmp	r1, #3
     310:	d015      	beq.n	33e <_sercom_get_default_pad+0x66>
	return 0;
     312:	2000      	movs	r0, #0
     314:	e7ee      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     316:	2901      	cmp	r1, #1
     318:	d007      	beq.n	32a <_sercom_get_default_pad+0x52>
     31a:	2900      	cmp	r1, #0
     31c:	d051      	beq.n	3c2 <_sercom_get_default_pad+0xea>
     31e:	2902      	cmp	r1, #2
     320:	d005      	beq.n	32e <_sercom_get_default_pad+0x56>
     322:	2903      	cmp	r1, #3
     324:	d005      	beq.n	332 <_sercom_get_default_pad+0x5a>
	return 0;
     326:	2000      	movs	r0, #0
     328:	e7e4      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     32a:	4832      	ldr	r0, [pc, #200]	; (3f4 <_sercom_get_default_pad+0x11c>)
     32c:	e7e2      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     32e:	4832      	ldr	r0, [pc, #200]	; (3f8 <_sercom_get_default_pad+0x120>)
     330:	e7e0      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     332:	4832      	ldr	r0, [pc, #200]	; (3fc <_sercom_get_default_pad+0x124>)
     334:	e7de      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     336:	4832      	ldr	r0, [pc, #200]	; (400 <_sercom_get_default_pad+0x128>)
     338:	e7dc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33a:	4832      	ldr	r0, [pc, #200]	; (404 <_sercom_get_default_pad+0x12c>)
     33c:	e7da      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33e:	4832      	ldr	r0, [pc, #200]	; (408 <_sercom_get_default_pad+0x130>)
     340:	e7d8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     342:	2901      	cmp	r1, #1
     344:	d007      	beq.n	356 <_sercom_get_default_pad+0x7e>
     346:	2900      	cmp	r1, #0
     348:	d03f      	beq.n	3ca <_sercom_get_default_pad+0xf2>
     34a:	2902      	cmp	r1, #2
     34c:	d005      	beq.n	35a <_sercom_get_default_pad+0x82>
     34e:	2903      	cmp	r1, #3
     350:	d005      	beq.n	35e <_sercom_get_default_pad+0x86>
	return 0;
     352:	2000      	movs	r0, #0
     354:	e7ce      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     356:	482d      	ldr	r0, [pc, #180]	; (40c <_sercom_get_default_pad+0x134>)
     358:	e7cc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35a:	482d      	ldr	r0, [pc, #180]	; (410 <_sercom_get_default_pad+0x138>)
     35c:	e7ca      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35e:	482d      	ldr	r0, [pc, #180]	; (414 <_sercom_get_default_pad+0x13c>)
     360:	e7c8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     362:	2901      	cmp	r1, #1
     364:	d007      	beq.n	376 <_sercom_get_default_pad+0x9e>
     366:	2900      	cmp	r1, #0
     368:	d031      	beq.n	3ce <_sercom_get_default_pad+0xf6>
     36a:	2902      	cmp	r1, #2
     36c:	d005      	beq.n	37a <_sercom_get_default_pad+0xa2>
     36e:	2903      	cmp	r1, #3
     370:	d005      	beq.n	37e <_sercom_get_default_pad+0xa6>
	return 0;
     372:	2000      	movs	r0, #0
     374:	e7be      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     376:	4828      	ldr	r0, [pc, #160]	; (418 <_sercom_get_default_pad+0x140>)
     378:	e7bc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37a:	4828      	ldr	r0, [pc, #160]	; (41c <_sercom_get_default_pad+0x144>)
     37c:	e7ba      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37e:	4828      	ldr	r0, [pc, #160]	; (420 <_sercom_get_default_pad+0x148>)
     380:	e7b8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     382:	2901      	cmp	r1, #1
     384:	d007      	beq.n	396 <_sercom_get_default_pad+0xbe>
     386:	2900      	cmp	r1, #0
     388:	d023      	beq.n	3d2 <_sercom_get_default_pad+0xfa>
     38a:	2902      	cmp	r1, #2
     38c:	d005      	beq.n	39a <_sercom_get_default_pad+0xc2>
     38e:	2903      	cmp	r1, #3
     390:	d005      	beq.n	39e <_sercom_get_default_pad+0xc6>
	return 0;
     392:	2000      	movs	r0, #0
     394:	e7ae      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     396:	4823      	ldr	r0, [pc, #140]	; (424 <_sercom_get_default_pad+0x14c>)
     398:	e7ac      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39a:	4823      	ldr	r0, [pc, #140]	; (428 <_sercom_get_default_pad+0x150>)
     39c:	e7aa      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39e:	4823      	ldr	r0, [pc, #140]	; (42c <_sercom_get_default_pad+0x154>)
     3a0:	e7a8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3a2:	2901      	cmp	r1, #1
     3a4:	d007      	beq.n	3b6 <_sercom_get_default_pad+0xde>
     3a6:	2900      	cmp	r1, #0
     3a8:	d015      	beq.n	3d6 <_sercom_get_default_pad+0xfe>
     3aa:	2902      	cmp	r1, #2
     3ac:	d005      	beq.n	3ba <_sercom_get_default_pad+0xe2>
     3ae:	2903      	cmp	r1, #3
     3b0:	d005      	beq.n	3be <_sercom_get_default_pad+0xe6>
	return 0;
     3b2:	2000      	movs	r0, #0
     3b4:	e79e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3b6:	481e      	ldr	r0, [pc, #120]	; (430 <_sercom_get_default_pad+0x158>)
     3b8:	e79c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ba:	481e      	ldr	r0, [pc, #120]	; (434 <_sercom_get_default_pad+0x15c>)
     3bc:	e79a      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3be:	481e      	ldr	r0, [pc, #120]	; (438 <_sercom_get_default_pad+0x160>)
     3c0:	e798      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c2:	481e      	ldr	r0, [pc, #120]	; (43c <_sercom_get_default_pad+0x164>)
     3c4:	e796      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c6:	2003      	movs	r0, #3
     3c8:	e794      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ca:	481d      	ldr	r0, [pc, #116]	; (440 <_sercom_get_default_pad+0x168>)
     3cc:	e792      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ce:	481d      	ldr	r0, [pc, #116]	; (444 <_sercom_get_default_pad+0x16c>)
     3d0:	e790      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d2:	481d      	ldr	r0, [pc, #116]	; (448 <_sercom_get_default_pad+0x170>)
     3d4:	e78e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d6:	481d      	ldr	r0, [pc, #116]	; (44c <_sercom_get_default_pad+0x174>)
     3d8:	e78c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	42001000 	.word	0x42001000
     3e0:	42001800 	.word	0x42001800
     3e4:	42001c00 	.word	0x42001c00
     3e8:	42001400 	.word	0x42001400
     3ec:	42000800 	.word	0x42000800
     3f0:	42000c00 	.word	0x42000c00
     3f4:	00050003 	.word	0x00050003
     3f8:	00060003 	.word	0x00060003
     3fc:	00070003 	.word	0x00070003
     400:	00010003 	.word	0x00010003
     404:	001e0003 	.word	0x001e0003
     408:	001f0003 	.word	0x001f0003
     40c:	00090003 	.word	0x00090003
     410:	000a0003 	.word	0x000a0003
     414:	000b0003 	.word	0x000b0003
     418:	00110003 	.word	0x00110003
     41c:	00120003 	.word	0x00120003
     420:	00130003 	.word	0x00130003
     424:	000d0003 	.word	0x000d0003
     428:	000e0003 	.word	0x000e0003
     42c:	000f0003 	.word	0x000f0003
     430:	00170003 	.word	0x00170003
     434:	00180003 	.word	0x00180003
     438:	00190003 	.word	0x00190003
     43c:	00040003 	.word	0x00040003
     440:	00080003 	.word	0x00080003
     444:	00100003 	.word	0x00100003
     448:	000c0003 	.word	0x000c0003
     44c:	00160003 	.word	0x00160003

00000450 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     450:	b530      	push	{r4, r5, lr}
     452:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     454:	4b0b      	ldr	r3, [pc, #44]	; (484 <_sercom_get_sercom_inst_index+0x34>)
     456:	466a      	mov	r2, sp
     458:	cb32      	ldmia	r3!, {r1, r4, r5}
     45a:	c232      	stmia	r2!, {r1, r4, r5}
     45c:	cb32      	ldmia	r3!, {r1, r4, r5}
     45e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     460:	9b00      	ldr	r3, [sp, #0]
     462:	4283      	cmp	r3, r0
     464:	d00b      	beq.n	47e <_sercom_get_sercom_inst_index+0x2e>
     466:	2301      	movs	r3, #1
     468:	009a      	lsls	r2, r3, #2
     46a:	4669      	mov	r1, sp
     46c:	5852      	ldr	r2, [r2, r1]
     46e:	4282      	cmp	r2, r0
     470:	d006      	beq.n	480 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     472:	3301      	adds	r3, #1
     474:	2b06      	cmp	r3, #6
     476:	d1f7      	bne.n	468 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     478:	2000      	movs	r0, #0
}
     47a:	b007      	add	sp, #28
     47c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     47e:	2300      	movs	r3, #0
			return i;
     480:	b2d8      	uxtb	r0, r3
     482:	e7fa      	b.n	47a <_sercom_get_sercom_inst_index+0x2a>
     484:	000029d0 	.word	0x000029d0

00000488 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     488:	b5f0      	push	{r4, r5, r6, r7, lr}
     48a:	46c6      	mov	lr, r8
     48c:	b500      	push	{lr}
     48e:	000c      	movs	r4, r1
     490:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     492:	2800      	cmp	r0, #0
     494:	d10f      	bne.n	4b6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
     496:	2a00      	cmp	r2, #0
     498:	dd11      	ble.n	4be <_read+0x36>
     49a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     49c:	4e09      	ldr	r6, [pc, #36]	; (4c4 <_read+0x3c>)
     49e:	4d0a      	ldr	r5, [pc, #40]	; (4c8 <_read+0x40>)
     4a0:	6830      	ldr	r0, [r6, #0]
     4a2:	0021      	movs	r1, r4
     4a4:	682b      	ldr	r3, [r5, #0]
     4a6:	4798      	blx	r3
		ptr++;
     4a8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
     4aa:	42bc      	cmp	r4, r7
     4ac:	d1f8      	bne.n	4a0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
     4ae:	4640      	mov	r0, r8
     4b0:	bc04      	pop	{r2}
     4b2:	4690      	mov	r8, r2
     4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
     4b6:	2301      	movs	r3, #1
     4b8:	425b      	negs	r3, r3
     4ba:	4698      	mov	r8, r3
     4bc:	e7f7      	b.n	4ae <_read+0x26>
	for (; len > 0; --len) {
     4be:	4680      	mov	r8, r0
     4c0:	e7f5      	b.n	4ae <_read+0x26>
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	200000d4 	.word	0x200000d4
     4c8:	200000cc 	.word	0x200000cc

000004cc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ce:	46c6      	mov	lr, r8
     4d0:	b500      	push	{lr}
     4d2:	000e      	movs	r6, r1
     4d4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     4d6:	3801      	subs	r0, #1
     4d8:	2802      	cmp	r0, #2
     4da:	d810      	bhi.n	4fe <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     4dc:	2a00      	cmp	r2, #0
     4de:	d011      	beq.n	504 <_write+0x38>
     4e0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     4e2:	4b0c      	ldr	r3, [pc, #48]	; (514 <_write+0x48>)
     4e4:	4698      	mov	r8, r3
     4e6:	4f0c      	ldr	r7, [pc, #48]	; (518 <_write+0x4c>)
     4e8:	4643      	mov	r3, r8
     4ea:	6818      	ldr	r0, [r3, #0]
     4ec:	5d31      	ldrb	r1, [r6, r4]
     4ee:	683b      	ldr	r3, [r7, #0]
     4f0:	4798      	blx	r3
     4f2:	2800      	cmp	r0, #0
     4f4:	db08      	blt.n	508 <_write+0x3c>
			return -1;
		}
		++nChars;
     4f6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
     4f8:	42a5      	cmp	r5, r4
     4fa:	d1f5      	bne.n	4e8 <_write+0x1c>
     4fc:	e006      	b.n	50c <_write+0x40>
		return -1;
     4fe:	2401      	movs	r4, #1
     500:	4264      	negs	r4, r4
     502:	e003      	b.n	50c <_write+0x40>
	for (; len != 0; --len) {
     504:	0014      	movs	r4, r2
     506:	e001      	b.n	50c <_write+0x40>
			return -1;
     508:	2401      	movs	r4, #1
     50a:	4264      	negs	r4, r4
	}
	return nChars;
}
     50c:	0020      	movs	r0, r4
     50e:	bc04      	pop	{r2}
     510:	4690      	mov	r8, r2
     512:	bdf0      	pop	{r4, r5, r6, r7, pc}
     514:	200000d4 	.word	0x200000d4
     518:	200000d0 	.word	0x200000d0

0000051c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     51c:	b5f0      	push	{r4, r5, r6, r7, lr}
     51e:	46de      	mov	lr, fp
     520:	4657      	mov	r7, sl
     522:	464e      	mov	r6, r9
     524:	4645      	mov	r5, r8
     526:	b5e0      	push	{r5, r6, r7, lr}
     528:	b091      	sub	sp, #68	; 0x44
     52a:	0005      	movs	r5, r0
     52c:	000c      	movs	r4, r1
     52e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     530:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     532:	0008      	movs	r0, r1
     534:	4bbc      	ldr	r3, [pc, #752]	; (828 <usart_init+0x30c>)
     536:	4798      	blx	r3
     538:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     53a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     53c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     53e:	07db      	lsls	r3, r3, #31
     540:	d506      	bpl.n	550 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     542:	b011      	add	sp, #68	; 0x44
     544:	bc3c      	pop	{r2, r3, r4, r5}
     546:	4690      	mov	r8, r2
     548:	4699      	mov	r9, r3
     54a:	46a2      	mov	sl, r4
     54c:	46ab      	mov	fp, r5
     54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     550:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     552:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     554:	079b      	lsls	r3, r3, #30
     556:	d4f4      	bmi.n	542 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     558:	49b4      	ldr	r1, [pc, #720]	; (82c <usart_init+0x310>)
     55a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     55c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     55e:	2301      	movs	r3, #1
     560:	40bb      	lsls	r3, r7
     562:	4303      	orrs	r3, r0
     564:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     566:	a90f      	add	r1, sp, #60	; 0x3c
     568:	272d      	movs	r7, #45	; 0x2d
     56a:	5df3      	ldrb	r3, [r6, r7]
     56c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     56e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     570:	b2d3      	uxtb	r3, r2
     572:	9302      	str	r3, [sp, #8]
     574:	0018      	movs	r0, r3
     576:	4bae      	ldr	r3, [pc, #696]	; (830 <usart_init+0x314>)
     578:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     57a:	9802      	ldr	r0, [sp, #8]
     57c:	4bad      	ldr	r3, [pc, #692]	; (834 <usart_init+0x318>)
     57e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     580:	5df0      	ldrb	r0, [r6, r7]
     582:	2100      	movs	r1, #0
     584:	4bac      	ldr	r3, [pc, #688]	; (838 <usart_init+0x31c>)
     586:	4798      	blx	r3
	module->character_size = config->character_size;
     588:	7af3      	ldrb	r3, [r6, #11]
     58a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     58c:	2324      	movs	r3, #36	; 0x24
     58e:	5cf3      	ldrb	r3, [r6, r3]
     590:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     592:	2325      	movs	r3, #37	; 0x25
     594:	5cf3      	ldrb	r3, [r6, r3]
     596:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     598:	7ef3      	ldrb	r3, [r6, #27]
     59a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     59c:	7f33      	ldrb	r3, [r6, #28]
     59e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     5a0:	682b      	ldr	r3, [r5, #0]
     5a2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5a4:	0018      	movs	r0, r3
     5a6:	4ba0      	ldr	r3, [pc, #640]	; (828 <usart_init+0x30c>)
     5a8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5aa:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     5ac:	2200      	movs	r2, #0
     5ae:	230e      	movs	r3, #14
     5b0:	a906      	add	r1, sp, #24
     5b2:	468c      	mov	ip, r1
     5b4:	4463      	add	r3, ip
     5b6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     5b8:	8a32      	ldrh	r2, [r6, #16]
     5ba:	9202      	str	r2, [sp, #8]
     5bc:	2380      	movs	r3, #128	; 0x80
     5be:	01db      	lsls	r3, r3, #7
     5c0:	429a      	cmp	r2, r3
     5c2:	d100      	bne.n	5c6 <usart_init+0xaa>
     5c4:	e09e      	b.n	704 <usart_init+0x1e8>
     5c6:	d90f      	bls.n	5e8 <usart_init+0xcc>
     5c8:	23c0      	movs	r3, #192	; 0xc0
     5ca:	01db      	lsls	r3, r3, #7
     5cc:	9a02      	ldr	r2, [sp, #8]
     5ce:	429a      	cmp	r2, r3
     5d0:	d100      	bne.n	5d4 <usart_init+0xb8>
     5d2:	e092      	b.n	6fa <usart_init+0x1de>
     5d4:	2380      	movs	r3, #128	; 0x80
     5d6:	021b      	lsls	r3, r3, #8
     5d8:	429a      	cmp	r2, r3
     5da:	d000      	beq.n	5de <usart_init+0xc2>
     5dc:	e11f      	b.n	81e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     5de:	2303      	movs	r3, #3
     5e0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     5e2:	2300      	movs	r3, #0
     5e4:	9307      	str	r3, [sp, #28]
     5e6:	e008      	b.n	5fa <usart_init+0xde>
	switch (config->sample_rate) {
     5e8:	2380      	movs	r3, #128	; 0x80
     5ea:	019b      	lsls	r3, r3, #6
     5ec:	429a      	cmp	r2, r3
     5ee:	d000      	beq.n	5f2 <usart_init+0xd6>
     5f0:	e115      	b.n	81e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     5f2:	2310      	movs	r3, #16
     5f4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     5f6:	3b0f      	subs	r3, #15
     5f8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     5fa:	6833      	ldr	r3, [r6, #0]
     5fc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     5fe:	68f3      	ldr	r3, [r6, #12]
     600:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     602:	6973      	ldr	r3, [r6, #20]
     604:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     606:	7e33      	ldrb	r3, [r6, #24]
     608:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     60a:	2326      	movs	r3, #38	; 0x26
     60c:	5cf3      	ldrb	r3, [r6, r3]
     60e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     610:	6873      	ldr	r3, [r6, #4]
     612:	4699      	mov	r9, r3
	switch (transfer_mode)
     614:	2b00      	cmp	r3, #0
     616:	d100      	bne.n	61a <usart_init+0xfe>
     618:	e0a0      	b.n	75c <usart_init+0x240>
     61a:	2380      	movs	r3, #128	; 0x80
     61c:	055b      	lsls	r3, r3, #21
     61e:	4599      	cmp	r9, r3
     620:	d100      	bne.n	624 <usart_init+0x108>
     622:	e084      	b.n	72e <usart_init+0x212>
	if(config->encoding_format_enable) {
     624:	7e73      	ldrb	r3, [r6, #25]
     626:	2b00      	cmp	r3, #0
     628:	d002      	beq.n	630 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     62a:	7eb3      	ldrb	r3, [r6, #26]
     62c:	4642      	mov	r2, r8
     62e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     630:	682a      	ldr	r2, [r5, #0]
     632:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     634:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     636:	2b00      	cmp	r3, #0
     638:	d1fc      	bne.n	634 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     63a:	330e      	adds	r3, #14
     63c:	aa06      	add	r2, sp, #24
     63e:	4694      	mov	ip, r2
     640:	4463      	add	r3, ip
     642:	881b      	ldrh	r3, [r3, #0]
     644:	4642      	mov	r2, r8
     646:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     648:	9b05      	ldr	r3, [sp, #20]
     64a:	9a03      	ldr	r2, [sp, #12]
     64c:	4313      	orrs	r3, r2
     64e:	9a04      	ldr	r2, [sp, #16]
     650:	4313      	orrs	r3, r2
     652:	464a      	mov	r2, r9
     654:	4313      	orrs	r3, r2
     656:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     658:	465b      	mov	r3, fp
     65a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     65c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     65e:	4653      	mov	r3, sl
     660:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     662:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     664:	2327      	movs	r3, #39	; 0x27
     666:	5cf3      	ldrb	r3, [r6, r3]
     668:	2b00      	cmp	r3, #0
     66a:	d101      	bne.n	670 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     66c:	3304      	adds	r3, #4
     66e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     670:	7e73      	ldrb	r3, [r6, #25]
     672:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     674:	7f32      	ldrb	r2, [r6, #28]
     676:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     678:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     67a:	7f72      	ldrb	r2, [r6, #29]
     67c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     67e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     680:	2224      	movs	r2, #36	; 0x24
     682:	5cb2      	ldrb	r2, [r6, r2]
     684:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     686:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     688:	2225      	movs	r2, #37	; 0x25
     68a:	5cb2      	ldrb	r2, [r6, r2]
     68c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     68e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     690:	7ab1      	ldrb	r1, [r6, #10]
     692:	7af2      	ldrb	r2, [r6, #11]
     694:	4311      	orrs	r1, r2
     696:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     698:	8933      	ldrh	r3, [r6, #8]
     69a:	2bff      	cmp	r3, #255	; 0xff
     69c:	d100      	bne.n	6a0 <usart_init+0x184>
     69e:	e081      	b.n	7a4 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     6a0:	2280      	movs	r2, #128	; 0x80
     6a2:	0452      	lsls	r2, r2, #17
     6a4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     6a6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     6a8:	232c      	movs	r3, #44	; 0x2c
     6aa:	5cf3      	ldrb	r3, [r6, r3]
     6ac:	2b00      	cmp	r3, #0
     6ae:	d103      	bne.n	6b8 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     6b0:	4b62      	ldr	r3, [pc, #392]	; (83c <usart_init+0x320>)
     6b2:	789b      	ldrb	r3, [r3, #2]
     6b4:	079b      	lsls	r3, r3, #30
     6b6:	d501      	bpl.n	6bc <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     6b8:	2380      	movs	r3, #128	; 0x80
     6ba:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     6bc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     6be:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     6c0:	2b00      	cmp	r3, #0
     6c2:	d1fc      	bne.n	6be <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     6c4:	4643      	mov	r3, r8
     6c6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     6c8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     6ca:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     6cc:	2b00      	cmp	r3, #0
     6ce:	d1fc      	bne.n	6ca <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     6d0:	4643      	mov	r3, r8
     6d2:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     6d4:	ab0e      	add	r3, sp, #56	; 0x38
     6d6:	2280      	movs	r2, #128	; 0x80
     6d8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6da:	2200      	movs	r2, #0
     6dc:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     6de:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     6e0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     6e2:	6b33      	ldr	r3, [r6, #48]	; 0x30
     6e4:	930a      	str	r3, [sp, #40]	; 0x28
     6e6:	6b73      	ldr	r3, [r6, #52]	; 0x34
     6e8:	930b      	str	r3, [sp, #44]	; 0x2c
     6ea:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     6ec:	930c      	str	r3, [sp, #48]	; 0x30
     6ee:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     6f0:	9302      	str	r3, [sp, #8]
     6f2:	930d      	str	r3, [sp, #52]	; 0x34
     6f4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     6f6:	ae0a      	add	r6, sp, #40	; 0x28
     6f8:	e063      	b.n	7c2 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     6fa:	2308      	movs	r3, #8
     6fc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     6fe:	3b07      	subs	r3, #7
     700:	9307      	str	r3, [sp, #28]
     702:	e77a      	b.n	5fa <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     704:	6833      	ldr	r3, [r6, #0]
     706:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     708:	68f3      	ldr	r3, [r6, #12]
     70a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     70c:	6973      	ldr	r3, [r6, #20]
     70e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     710:	7e33      	ldrb	r3, [r6, #24]
     712:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     714:	2326      	movs	r3, #38	; 0x26
     716:	5cf3      	ldrb	r3, [r6, r3]
     718:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     71a:	6873      	ldr	r3, [r6, #4]
     71c:	4699      	mov	r9, r3
	switch (transfer_mode)
     71e:	2b00      	cmp	r3, #0
     720:	d018      	beq.n	754 <usart_init+0x238>
     722:	2380      	movs	r3, #128	; 0x80
     724:	055b      	lsls	r3, r3, #21
     726:	4599      	cmp	r9, r3
     728:	d001      	beq.n	72e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     72a:	2000      	movs	r0, #0
     72c:	e025      	b.n	77a <usart_init+0x25e>
			if (!config->use_external_clock) {
     72e:	2327      	movs	r3, #39	; 0x27
     730:	5cf3      	ldrb	r3, [r6, r3]
     732:	2b00      	cmp	r3, #0
     734:	d000      	beq.n	738 <usart_init+0x21c>
     736:	e775      	b.n	624 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     738:	6a33      	ldr	r3, [r6, #32]
     73a:	001f      	movs	r7, r3
     73c:	b2c0      	uxtb	r0, r0
     73e:	4b40      	ldr	r3, [pc, #256]	; (840 <usart_init+0x324>)
     740:	4798      	blx	r3
     742:	0001      	movs	r1, r0
     744:	220e      	movs	r2, #14
     746:	ab06      	add	r3, sp, #24
     748:	469c      	mov	ip, r3
     74a:	4462      	add	r2, ip
     74c:	0038      	movs	r0, r7
     74e:	4b3d      	ldr	r3, [pc, #244]	; (844 <usart_init+0x328>)
     750:	4798      	blx	r3
     752:	e012      	b.n	77a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     754:	2308      	movs	r3, #8
     756:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     758:	2300      	movs	r3, #0
     75a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     75c:	2327      	movs	r3, #39	; 0x27
     75e:	5cf3      	ldrb	r3, [r6, r3]
     760:	2b00      	cmp	r3, #0
     762:	d00e      	beq.n	782 <usart_init+0x266>
				status_code =
     764:	9b06      	ldr	r3, [sp, #24]
     766:	9300      	str	r3, [sp, #0]
     768:	9b07      	ldr	r3, [sp, #28]
     76a:	220e      	movs	r2, #14
     76c:	a906      	add	r1, sp, #24
     76e:	468c      	mov	ip, r1
     770:	4462      	add	r2, ip
     772:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     774:	6a30      	ldr	r0, [r6, #32]
     776:	4f34      	ldr	r7, [pc, #208]	; (848 <usart_init+0x32c>)
     778:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     77a:	2800      	cmp	r0, #0
     77c:	d000      	beq.n	780 <usart_init+0x264>
     77e:	e6e0      	b.n	542 <usart_init+0x26>
     780:	e750      	b.n	624 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     782:	6a33      	ldr	r3, [r6, #32]
     784:	001f      	movs	r7, r3
     786:	b2c0      	uxtb	r0, r0
     788:	4b2d      	ldr	r3, [pc, #180]	; (840 <usart_init+0x324>)
     78a:	4798      	blx	r3
     78c:	0001      	movs	r1, r0
				status_code =
     78e:	9b06      	ldr	r3, [sp, #24]
     790:	9300      	str	r3, [sp, #0]
     792:	9b07      	ldr	r3, [sp, #28]
     794:	220e      	movs	r2, #14
     796:	a806      	add	r0, sp, #24
     798:	4684      	mov	ip, r0
     79a:	4462      	add	r2, ip
     79c:	0038      	movs	r0, r7
     79e:	4f2a      	ldr	r7, [pc, #168]	; (848 <usart_init+0x32c>)
     7a0:	47b8      	blx	r7
     7a2:	e7ea      	b.n	77a <usart_init+0x25e>
		if(config->lin_slave_enable) {
     7a4:	7ef3      	ldrb	r3, [r6, #27]
     7a6:	2b00      	cmp	r3, #0
     7a8:	d100      	bne.n	7ac <usart_init+0x290>
     7aa:	e77d      	b.n	6a8 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     7ac:	2380      	movs	r3, #128	; 0x80
     7ae:	04db      	lsls	r3, r3, #19
     7b0:	431f      	orrs	r7, r3
     7b2:	e779      	b.n	6a8 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     7b4:	0020      	movs	r0, r4
     7b6:	4b25      	ldr	r3, [pc, #148]	; (84c <usart_init+0x330>)
     7b8:	4798      	blx	r3
     7ba:	e007      	b.n	7cc <usart_init+0x2b0>
     7bc:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     7be:	2f04      	cmp	r7, #4
     7c0:	d00d      	beq.n	7de <usart_init+0x2c2>
     7c2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     7c4:	00bb      	lsls	r3, r7, #2
     7c6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     7c8:	2800      	cmp	r0, #0
     7ca:	d0f3      	beq.n	7b4 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     7cc:	1c43      	adds	r3, r0, #1
     7ce:	d0f5      	beq.n	7bc <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     7d0:	a90e      	add	r1, sp, #56	; 0x38
     7d2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     7d4:	0c00      	lsrs	r0, r0, #16
     7d6:	b2c0      	uxtb	r0, r0
     7d8:	4b1d      	ldr	r3, [pc, #116]	; (850 <usart_init+0x334>)
     7da:	4798      	blx	r3
     7dc:	e7ee      	b.n	7bc <usart_init+0x2a0>
		module->callback[i]            = NULL;
     7de:	2300      	movs	r3, #0
     7e0:	60eb      	str	r3, [r5, #12]
     7e2:	612b      	str	r3, [r5, #16]
     7e4:	616b      	str	r3, [r5, #20]
     7e6:	61ab      	str	r3, [r5, #24]
     7e8:	61eb      	str	r3, [r5, #28]
     7ea:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     7ec:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     7ee:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     7f0:	2200      	movs	r2, #0
     7f2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     7f4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     7f6:	3330      	adds	r3, #48	; 0x30
     7f8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     7fa:	3301      	adds	r3, #1
     7fc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     7fe:	3301      	adds	r3, #1
     800:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     802:	3301      	adds	r3, #1
     804:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     806:	6828      	ldr	r0, [r5, #0]
     808:	4b07      	ldr	r3, [pc, #28]	; (828 <usart_init+0x30c>)
     80a:	4798      	blx	r3
     80c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     80e:	4911      	ldr	r1, [pc, #68]	; (854 <usart_init+0x338>)
     810:	4b11      	ldr	r3, [pc, #68]	; (858 <usart_init+0x33c>)
     812:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     814:	00a4      	lsls	r4, r4, #2
     816:	4b11      	ldr	r3, [pc, #68]	; (85c <usart_init+0x340>)
     818:	50e5      	str	r5, [r4, r3]
	return status_code;
     81a:	2000      	movs	r0, #0
     81c:	e691      	b.n	542 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     81e:	2310      	movs	r3, #16
     820:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     822:	2300      	movs	r3, #0
     824:	9307      	str	r3, [sp, #28]
     826:	e6e8      	b.n	5fa <usart_init+0xde>
     828:	00000451 	.word	0x00000451
     82c:	40000400 	.word	0x40000400
     830:	000013b9 	.word	0x000013b9
     834:	0000132d 	.word	0x0000132d
     838:	0000028d 	.word	0x0000028d
     83c:	41002000 	.word	0x41002000
     840:	000013d5 	.word	0x000013d5
     844:	000001cf 	.word	0x000001cf
     848:	000001f9 	.word	0x000001f9
     84c:	000002d9 	.word	0x000002d9
     850:	000014b1 	.word	0x000014b1
     854:	00000a45 	.word	0x00000a45
     858:	00000bdd 	.word	0x00000bdd
     85c:	200000d8 	.word	0x200000d8

00000860 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     860:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     862:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     864:	2a00      	cmp	r2, #0
     866:	d101      	bne.n	86c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     868:	0018      	movs	r0, r3
     86a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     86c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     86e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     870:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     872:	2a00      	cmp	r2, #0
     874:	d1f8      	bne.n	868 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     876:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     878:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     87a:	2a00      	cmp	r2, #0
     87c:	d1fc      	bne.n	878 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     87e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     880:	2102      	movs	r1, #2
     882:	7e1a      	ldrb	r2, [r3, #24]
     884:	420a      	tst	r2, r1
     886:	d0fc      	beq.n	882 <usart_write_wait+0x22>
	return STATUS_OK;
     888:	2300      	movs	r3, #0
     88a:	e7ed      	b.n	868 <usart_write_wait+0x8>

0000088c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     88c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     88e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     890:	2a00      	cmp	r2, #0
     892:	d101      	bne.n	898 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     894:	0018      	movs	r0, r3
     896:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     898:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     89a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     89c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     89e:	2a00      	cmp	r2, #0
     8a0:	d1f8      	bne.n	894 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     8a2:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     8a4:	7e10      	ldrb	r0, [r2, #24]
     8a6:	0740      	lsls	r0, r0, #29
     8a8:	d5f4      	bpl.n	894 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     8aa:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     8ac:	2b00      	cmp	r3, #0
     8ae:	d1fc      	bne.n	8aa <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     8b0:	8b53      	ldrh	r3, [r2, #26]
     8b2:	b2db      	uxtb	r3, r3
	if (error_code) {
     8b4:	0698      	lsls	r0, r3, #26
     8b6:	d01d      	beq.n	8f4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     8b8:	0798      	lsls	r0, r3, #30
     8ba:	d503      	bpl.n	8c4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     8bc:	2302      	movs	r3, #2
     8be:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     8c0:	3318      	adds	r3, #24
     8c2:	e7e7      	b.n	894 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     8c4:	0758      	lsls	r0, r3, #29
     8c6:	d503      	bpl.n	8d0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     8c8:	2304      	movs	r3, #4
     8ca:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     8cc:	331a      	adds	r3, #26
     8ce:	e7e1      	b.n	894 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     8d0:	07d8      	lsls	r0, r3, #31
     8d2:	d503      	bpl.n	8dc <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     8d4:	2301      	movs	r3, #1
     8d6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     8d8:	3312      	adds	r3, #18
     8da:	e7db      	b.n	894 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     8dc:	06d8      	lsls	r0, r3, #27
     8de:	d503      	bpl.n	8e8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     8e0:	2310      	movs	r3, #16
     8e2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     8e4:	3332      	adds	r3, #50	; 0x32
     8e6:	e7d5      	b.n	894 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     8e8:	069b      	lsls	r3, r3, #26
     8ea:	d503      	bpl.n	8f4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     8ec:	2320      	movs	r3, #32
     8ee:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     8f0:	3321      	adds	r3, #33	; 0x21
     8f2:	e7cf      	b.n	894 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     8f4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     8f6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     8f8:	2300      	movs	r3, #0
     8fa:	e7cb      	b.n	894 <usart_read_wait+0x8>

000008fc <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8fe:	46ce      	mov	lr, r9
     900:	4647      	mov	r7, r8
     902:	b580      	push	{r7, lr}
     904:	b083      	sub	sp, #12
     906:	0005      	movs	r5, r0
     908:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     90a:	2017      	movs	r0, #23
	if (length == 0) {
     90c:	2a00      	cmp	r2, #0
     90e:	d104      	bne.n	91a <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     910:	b003      	add	sp, #12
     912:	bc0c      	pop	{r2, r3}
     914:	4690      	mov	r8, r2
     916:	4699      	mov	r9, r3
     918:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     91a:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     91c:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     91e:	2b00      	cmp	r3, #0
     920:	d0f6      	beq.n	910 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     922:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     924:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     926:	2b00      	cmp	r3, #0
     928:	d1fc      	bne.n	924 <usart_write_buffer_wait+0x28>
	while (length--) {
     92a:	3a01      	subs	r2, #1
     92c:	b293      	uxth	r3, r2
     92e:	4699      	mov	r9, r3
     930:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     932:	2701      	movs	r7, #1
	while (length--) {
     934:	4b1f      	ldr	r3, [pc, #124]	; (9b4 <usart_write_buffer_wait+0xb8>)
     936:	4698      	mov	r8, r3
     938:	e011      	b.n	95e <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
     93a:	1c73      	adds	r3, r6, #1
     93c:	b29b      	uxth	r3, r3
     93e:	9a01      	ldr	r2, [sp, #4]
     940:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     942:	796a      	ldrb	r2, [r5, #5]
     944:	2a01      	cmp	r2, #1
     946:	d017      	beq.n	978 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
     948:	b289      	uxth	r1, r1
     94a:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     94c:	0028      	movs	r0, r5
     94e:	4b1a      	ldr	r3, [pc, #104]	; (9b8 <usart_write_buffer_wait+0xbc>)
     950:	4798      	blx	r3
	while (length--) {
     952:	464b      	mov	r3, r9
     954:	3b01      	subs	r3, #1
     956:	b29b      	uxth	r3, r3
     958:	4699      	mov	r9, r3
     95a:	4543      	cmp	r3, r8
     95c:	d013      	beq.n	986 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     95e:	7e23      	ldrb	r3, [r4, #24]
     960:	423b      	tst	r3, r7
     962:	d1ea      	bne.n	93a <usart_write_buffer_wait+0x3e>
     964:	4b13      	ldr	r3, [pc, #76]	; (9b4 <usart_write_buffer_wait+0xb8>)
     966:	7e22      	ldrb	r2, [r4, #24]
     968:	423a      	tst	r2, r7
     96a:	d1e6      	bne.n	93a <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
     96c:	2b01      	cmp	r3, #1
     96e:	d019      	beq.n	9a4 <usart_write_buffer_wait+0xa8>
     970:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     972:	2b00      	cmp	r3, #0
     974:	d1f7      	bne.n	966 <usart_write_buffer_wait+0x6a>
     976:	e7e0      	b.n	93a <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     978:	3602      	adds	r6, #2
     97a:	b2b6      	uxth	r6, r6
     97c:	9a01      	ldr	r2, [sp, #4]
     97e:	5cd3      	ldrb	r3, [r2, r3]
     980:	021b      	lsls	r3, r3, #8
     982:	4319      	orrs	r1, r3
     984:	e7e2      	b.n	94c <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     986:	7e23      	ldrb	r3, [r4, #24]
     988:	079b      	lsls	r3, r3, #30
     98a:	d40d      	bmi.n	9a8 <usart_write_buffer_wait+0xac>
     98c:	4b09      	ldr	r3, [pc, #36]	; (9b4 <usart_write_buffer_wait+0xb8>)
     98e:	2102      	movs	r1, #2
     990:	7e22      	ldrb	r2, [r4, #24]
     992:	420a      	tst	r2, r1
     994:	d10a      	bne.n	9ac <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
     996:	2b01      	cmp	r3, #1
     998:	d00a      	beq.n	9b0 <usart_write_buffer_wait+0xb4>
     99a:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     99c:	2b00      	cmp	r3, #0
     99e:	d1f7      	bne.n	990 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
     9a0:	2000      	movs	r0, #0
     9a2:	e7b5      	b.n	910 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     9a4:	2012      	movs	r0, #18
     9a6:	e7b3      	b.n	910 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     9a8:	2000      	movs	r0, #0
     9aa:	e7b1      	b.n	910 <usart_write_buffer_wait+0x14>
     9ac:	2000      	movs	r0, #0
     9ae:	e7af      	b.n	910 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     9b0:	2012      	movs	r0, #18
     9b2:	e7ad      	b.n	910 <usart_write_buffer_wait+0x14>
     9b4:	0000ffff 	.word	0x0000ffff
     9b8:	00000861 	.word	0x00000861

000009bc <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9be:	0004      	movs	r4, r0
     9c0:	000d      	movs	r5, r1
     9c2:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     9c4:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     9c6:	4b0f      	ldr	r3, [pc, #60]	; (a04 <_usart_read_buffer+0x48>)
     9c8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     9ca:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     9cc:	b29b      	uxth	r3, r3
     9ce:	2b00      	cmp	r3, #0
     9d0:	d003      	beq.n	9da <_usart_read_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     9d2:	4b0d      	ldr	r3, [pc, #52]	; (a08 <_usart_read_buffer+0x4c>)
     9d4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     9d6:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     9da:	85a6      	strh	r6, [r4, #44]	; 0x2c
     9dc:	4b0a      	ldr	r3, [pc, #40]	; (a08 <_usart_read_buffer+0x4c>)
     9de:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     9e0:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     9e2:	2205      	movs	r2, #5
     9e4:	2332      	movs	r3, #50	; 0x32
     9e6:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     9e8:	3b2e      	subs	r3, #46	; 0x2e
     9ea:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
     9ec:	7a23      	ldrb	r3, [r4, #8]
     9ee:	2b00      	cmp	r3, #0
     9f0:	d001      	beq.n	9f6 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     9f2:	2320      	movs	r3, #32
     9f4:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
     9f6:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
     9f8:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
     9fa:	2b00      	cmp	r3, #0
     9fc:	d0ec      	beq.n	9d8 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     9fe:	2308      	movs	r3, #8
     a00:	75bb      	strb	r3, [r7, #22]
     a02:	e7e9      	b.n	9d8 <_usart_read_buffer+0x1c>
     a04:	00000ca9 	.word	0x00000ca9
     a08:	00000ce9 	.word	0x00000ce9

00000a0c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     a0c:	1c93      	adds	r3, r2, #2
     a0e:	009b      	lsls	r3, r3, #2
     a10:	18c3      	adds	r3, r0, r3
     a12:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     a14:	2130      	movs	r1, #48	; 0x30
     a16:	2301      	movs	r3, #1
     a18:	4093      	lsls	r3, r2
     a1a:	001a      	movs	r2, r3
     a1c:	5c43      	ldrb	r3, [r0, r1]
     a1e:	4313      	orrs	r3, r2
     a20:	5443      	strb	r3, [r0, r1]
}
     a22:	4770      	bx	lr

00000a24 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     a24:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     a26:	2317      	movs	r3, #23
	if (length == 0) {
     a28:	2a00      	cmp	r2, #0
     a2a:	d101      	bne.n	a30 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     a2c:	0018      	movs	r0, r3
     a2e:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     a30:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     a32:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     a34:	2c00      	cmp	r4, #0
     a36:	d0f9      	beq.n	a2c <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     a38:	4b01      	ldr	r3, [pc, #4]	; (a40 <usart_read_buffer_job+0x1c>)
     a3a:	4798      	blx	r3
     a3c:	0003      	movs	r3, r0
     a3e:	e7f5      	b.n	a2c <usart_read_buffer_job+0x8>
     a40:	000009bd 	.word	0x000009bd

00000a44 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     a46:	0080      	lsls	r0, r0, #2
     a48:	4b62      	ldr	r3, [pc, #392]	; (bd4 <_usart_interrupt_handler+0x190>)
     a4a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     a4c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     a4e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     a50:	2b00      	cmp	r3, #0
     a52:	d1fc      	bne.n	a4e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     a54:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     a56:	7da6      	ldrb	r6, [r4, #22]
     a58:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     a5a:	2330      	movs	r3, #48	; 0x30
     a5c:	5ceb      	ldrb	r3, [r5, r3]
     a5e:	2231      	movs	r2, #49	; 0x31
     a60:	5caf      	ldrb	r7, [r5, r2]
     a62:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     a64:	07f3      	lsls	r3, r6, #31
     a66:	d522      	bpl.n	aae <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     a68:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a6a:	b29b      	uxth	r3, r3
     a6c:	2b00      	cmp	r3, #0
     a6e:	d01c      	beq.n	aaa <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a70:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     a72:	7813      	ldrb	r3, [r2, #0]
     a74:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     a76:	1c51      	adds	r1, r2, #1
     a78:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a7a:	7969      	ldrb	r1, [r5, #5]
     a7c:	2901      	cmp	r1, #1
     a7e:	d00e      	beq.n	a9e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a80:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     a82:	05db      	lsls	r3, r3, #23
     a84:	0ddb      	lsrs	r3, r3, #23
     a86:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     a88:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a8a:	3b01      	subs	r3, #1
     a8c:	b29b      	uxth	r3, r3
     a8e:	85eb      	strh	r3, [r5, #46]	; 0x2e
     a90:	2b00      	cmp	r3, #0
     a92:	d10c      	bne.n	aae <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a94:	3301      	adds	r3, #1
     a96:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     a98:	3301      	adds	r3, #1
     a9a:	75a3      	strb	r3, [r4, #22]
     a9c:	e007      	b.n	aae <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     a9e:	7851      	ldrb	r1, [r2, #1]
     aa0:	0209      	lsls	r1, r1, #8
     aa2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     aa4:	3202      	adds	r2, #2
     aa6:	62aa      	str	r2, [r5, #40]	; 0x28
     aa8:	e7eb      	b.n	a82 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     aaa:	2301      	movs	r3, #1
     aac:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     aae:	07b3      	lsls	r3, r6, #30
     ab0:	d506      	bpl.n	ac0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     ab2:	2302      	movs	r3, #2
     ab4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     ab6:	2200      	movs	r2, #0
     ab8:	3331      	adds	r3, #49	; 0x31
     aba:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     abc:	07fb      	lsls	r3, r7, #31
     abe:	d41a      	bmi.n	af6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     ac0:	0773      	lsls	r3, r6, #29
     ac2:	d565      	bpl.n	b90 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     ac4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ac6:	b29b      	uxth	r3, r3
     ac8:	2b00      	cmp	r3, #0
     aca:	d05f      	beq.n	b8c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     acc:	8b63      	ldrh	r3, [r4, #26]
     ace:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     ad0:	071a      	lsls	r2, r3, #28
     ad2:	d414      	bmi.n	afe <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ad4:	223f      	movs	r2, #63	; 0x3f
     ad6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     ad8:	2b00      	cmp	r3, #0
     ada:	d034      	beq.n	b46 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     adc:	079a      	lsls	r2, r3, #30
     ade:	d511      	bpl.n	b04 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     ae0:	221a      	movs	r2, #26
     ae2:	2332      	movs	r3, #50	; 0x32
     ae4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     ae6:	3b30      	subs	r3, #48	; 0x30
     ae8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     aea:	077b      	lsls	r3, r7, #29
     aec:	d550      	bpl.n	b90 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     aee:	0028      	movs	r0, r5
     af0:	696b      	ldr	r3, [r5, #20]
     af2:	4798      	blx	r3
     af4:	e04c      	b.n	b90 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     af6:	0028      	movs	r0, r5
     af8:	68eb      	ldr	r3, [r5, #12]
     afa:	4798      	blx	r3
     afc:	e7e0      	b.n	ac0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     afe:	2237      	movs	r2, #55	; 0x37
     b00:	4013      	ands	r3, r2
     b02:	e7e9      	b.n	ad8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     b04:	075a      	lsls	r2, r3, #29
     b06:	d505      	bpl.n	b14 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     b08:	221e      	movs	r2, #30
     b0a:	2332      	movs	r3, #50	; 0x32
     b0c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     b0e:	3b2e      	subs	r3, #46	; 0x2e
     b10:	8363      	strh	r3, [r4, #26]
     b12:	e7ea      	b.n	aea <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     b14:	07da      	lsls	r2, r3, #31
     b16:	d505      	bpl.n	b24 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     b18:	2213      	movs	r2, #19
     b1a:	2332      	movs	r3, #50	; 0x32
     b1c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     b1e:	3b31      	subs	r3, #49	; 0x31
     b20:	8363      	strh	r3, [r4, #26]
     b22:	e7e2      	b.n	aea <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     b24:	06da      	lsls	r2, r3, #27
     b26:	d505      	bpl.n	b34 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     b28:	2242      	movs	r2, #66	; 0x42
     b2a:	2332      	movs	r3, #50	; 0x32
     b2c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     b2e:	3b22      	subs	r3, #34	; 0x22
     b30:	8363      	strh	r3, [r4, #26]
     b32:	e7da      	b.n	aea <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     b34:	2220      	movs	r2, #32
     b36:	421a      	tst	r2, r3
     b38:	d0d7      	beq.n	aea <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     b3a:	3221      	adds	r2, #33	; 0x21
     b3c:	2332      	movs	r3, #50	; 0x32
     b3e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     b40:	3b12      	subs	r3, #18
     b42:	8363      	strh	r3, [r4, #26]
     b44:	e7d1      	b.n	aea <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     b46:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     b48:	05db      	lsls	r3, r3, #23
     b4a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     b4c:	b2da      	uxtb	r2, r3
     b4e:	6a69      	ldr	r1, [r5, #36]	; 0x24
     b50:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     b52:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     b54:	1c51      	adds	r1, r2, #1
     b56:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b58:	7969      	ldrb	r1, [r5, #5]
     b5a:	2901      	cmp	r1, #1
     b5c:	d010      	beq.n	b80 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     b5e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     b60:	3b01      	subs	r3, #1
     b62:	b29b      	uxth	r3, r3
     b64:	85ab      	strh	r3, [r5, #44]	; 0x2c
     b66:	2b00      	cmp	r3, #0
     b68:	d112      	bne.n	b90 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b6a:	3304      	adds	r3, #4
     b6c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     b6e:	2200      	movs	r2, #0
     b70:	332e      	adds	r3, #46	; 0x2e
     b72:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     b74:	07bb      	lsls	r3, r7, #30
     b76:	d50b      	bpl.n	b90 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     b78:	0028      	movs	r0, r5
     b7a:	692b      	ldr	r3, [r5, #16]
     b7c:	4798      	blx	r3
     b7e:	e007      	b.n	b90 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     b80:	0a1b      	lsrs	r3, r3, #8
     b82:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     b84:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     b86:	3301      	adds	r3, #1
     b88:	626b      	str	r3, [r5, #36]	; 0x24
     b8a:	e7e8      	b.n	b5e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b8c:	2304      	movs	r3, #4
     b8e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     b90:	06f3      	lsls	r3, r6, #27
     b92:	d504      	bpl.n	b9e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     b94:	2310      	movs	r3, #16
     b96:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     b98:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     b9a:	06fb      	lsls	r3, r7, #27
     b9c:	d40e      	bmi.n	bbc <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     b9e:	06b3      	lsls	r3, r6, #26
     ba0:	d504      	bpl.n	bac <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     ba2:	2320      	movs	r3, #32
     ba4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     ba6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     ba8:	073b      	lsls	r3, r7, #28
     baa:	d40b      	bmi.n	bc4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     bac:	0733      	lsls	r3, r6, #28
     bae:	d504      	bpl.n	bba <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     bb0:	2308      	movs	r3, #8
     bb2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     bb4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     bb6:	06bb      	lsls	r3, r7, #26
     bb8:	d408      	bmi.n	bcc <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     bbc:	0028      	movs	r0, r5
     bbe:	69eb      	ldr	r3, [r5, #28]
     bc0:	4798      	blx	r3
     bc2:	e7ec      	b.n	b9e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     bc4:	0028      	movs	r0, r5
     bc6:	69ab      	ldr	r3, [r5, #24]
     bc8:	4798      	blx	r3
     bca:	e7ef      	b.n	bac <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     bcc:	6a2b      	ldr	r3, [r5, #32]
     bce:	0028      	movs	r0, r5
     bd0:	4798      	blx	r3
}
     bd2:	e7f2      	b.n	bba <_usart_interrupt_handler+0x176>
     bd4:	200000d8 	.word	0x200000d8

00000bd8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     bd8:	4770      	bx	lr
	...

00000bdc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     bde:	4b0a      	ldr	r3, [pc, #40]	; (c08 <_sercom_set_handler+0x2c>)
     be0:	781b      	ldrb	r3, [r3, #0]
     be2:	2b00      	cmp	r3, #0
     be4:	d10c      	bne.n	c00 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     be6:	4f09      	ldr	r7, [pc, #36]	; (c0c <_sercom_set_handler+0x30>)
     be8:	4e09      	ldr	r6, [pc, #36]	; (c10 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     bea:	4d0a      	ldr	r5, [pc, #40]	; (c14 <_sercom_set_handler+0x38>)
     bec:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     bee:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     bf0:	195a      	adds	r2, r3, r5
     bf2:	6014      	str	r4, [r2, #0]
     bf4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     bf6:	2b18      	cmp	r3, #24
     bf8:	d1f9      	bne.n	bee <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     bfa:	2201      	movs	r2, #1
     bfc:	4b02      	ldr	r3, [pc, #8]	; (c08 <_sercom_set_handler+0x2c>)
     bfe:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     c00:	0080      	lsls	r0, r0, #2
     c02:	4b02      	ldr	r3, [pc, #8]	; (c0c <_sercom_set_handler+0x30>)
     c04:	50c1      	str	r1, [r0, r3]
}
     c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c08:	20000086 	.word	0x20000086
     c0c:	20000088 	.word	0x20000088
     c10:	00000bd9 	.word	0x00000bd9
     c14:	200000d8 	.word	0x200000d8

00000c18 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     c18:	b500      	push	{lr}
     c1a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     c1c:	2309      	movs	r3, #9
     c1e:	466a      	mov	r2, sp
     c20:	7013      	strb	r3, [r2, #0]
     c22:	3301      	adds	r3, #1
     c24:	7053      	strb	r3, [r2, #1]
     c26:	3301      	adds	r3, #1
     c28:	7093      	strb	r3, [r2, #2]
     c2a:	3301      	adds	r3, #1
     c2c:	70d3      	strb	r3, [r2, #3]
     c2e:	3301      	adds	r3, #1
     c30:	7113      	strb	r3, [r2, #4]
     c32:	3301      	adds	r3, #1
     c34:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     c36:	4b03      	ldr	r3, [pc, #12]	; (c44 <_sercom_get_interrupt_vector+0x2c>)
     c38:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     c3a:	466b      	mov	r3, sp
     c3c:	5618      	ldrsb	r0, [r3, r0]
}
     c3e:	b003      	add	sp, #12
     c40:	bd00      	pop	{pc}
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	00000451 	.word	0x00000451

00000c48 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     c48:	b510      	push	{r4, lr}
     c4a:	4b02      	ldr	r3, [pc, #8]	; (c54 <SERCOM0_Handler+0xc>)
     c4c:	681b      	ldr	r3, [r3, #0]
     c4e:	2000      	movs	r0, #0
     c50:	4798      	blx	r3
     c52:	bd10      	pop	{r4, pc}
     c54:	20000088 	.word	0x20000088

00000c58 <SERCOM1_Handler>:
     c58:	b510      	push	{r4, lr}
     c5a:	4b02      	ldr	r3, [pc, #8]	; (c64 <SERCOM1_Handler+0xc>)
     c5c:	685b      	ldr	r3, [r3, #4]
     c5e:	2001      	movs	r0, #1
     c60:	4798      	blx	r3
     c62:	bd10      	pop	{r4, pc}
     c64:	20000088 	.word	0x20000088

00000c68 <SERCOM2_Handler>:
     c68:	b510      	push	{r4, lr}
     c6a:	4b02      	ldr	r3, [pc, #8]	; (c74 <SERCOM2_Handler+0xc>)
     c6c:	689b      	ldr	r3, [r3, #8]
     c6e:	2002      	movs	r0, #2
     c70:	4798      	blx	r3
     c72:	bd10      	pop	{r4, pc}
     c74:	20000088 	.word	0x20000088

00000c78 <SERCOM3_Handler>:
     c78:	b510      	push	{r4, lr}
     c7a:	4b02      	ldr	r3, [pc, #8]	; (c84 <SERCOM3_Handler+0xc>)
     c7c:	68db      	ldr	r3, [r3, #12]
     c7e:	2003      	movs	r0, #3
     c80:	4798      	blx	r3
     c82:	bd10      	pop	{r4, pc}
     c84:	20000088 	.word	0x20000088

00000c88 <SERCOM4_Handler>:
     c88:	b510      	push	{r4, lr}
     c8a:	4b02      	ldr	r3, [pc, #8]	; (c94 <SERCOM4_Handler+0xc>)
     c8c:	691b      	ldr	r3, [r3, #16]
     c8e:	2004      	movs	r0, #4
     c90:	4798      	blx	r3
     c92:	bd10      	pop	{r4, pc}
     c94:	20000088 	.word	0x20000088

00000c98 <SERCOM5_Handler>:
     c98:	b510      	push	{r4, lr}
     c9a:	4b02      	ldr	r3, [pc, #8]	; (ca4 <SERCOM5_Handler+0xc>)
     c9c:	695b      	ldr	r3, [r3, #20]
     c9e:	2005      	movs	r0, #5
     ca0:	4798      	blx	r3
     ca2:	bd10      	pop	{r4, pc}
     ca4:	20000088 	.word	0x20000088

00000ca8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     ca8:	4b0c      	ldr	r3, [pc, #48]	; (cdc <cpu_irq_enter_critical+0x34>)
     caa:	681b      	ldr	r3, [r3, #0]
     cac:	2b00      	cmp	r3, #0
     cae:	d106      	bne.n	cbe <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     cb0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     cb4:	2b00      	cmp	r3, #0
     cb6:	d007      	beq.n	cc8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     cb8:	2200      	movs	r2, #0
     cba:	4b09      	ldr	r3, [pc, #36]	; (ce0 <cpu_irq_enter_critical+0x38>)
     cbc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     cbe:	4a07      	ldr	r2, [pc, #28]	; (cdc <cpu_irq_enter_critical+0x34>)
     cc0:	6813      	ldr	r3, [r2, #0]
     cc2:	3301      	adds	r3, #1
     cc4:	6013      	str	r3, [r2, #0]
}
     cc6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     cc8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     cca:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     cce:	2200      	movs	r2, #0
     cd0:	4b04      	ldr	r3, [pc, #16]	; (ce4 <cpu_irq_enter_critical+0x3c>)
     cd2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     cd4:	3201      	adds	r2, #1
     cd6:	4b02      	ldr	r3, [pc, #8]	; (ce0 <cpu_irq_enter_critical+0x38>)
     cd8:	701a      	strb	r2, [r3, #0]
     cda:	e7f0      	b.n	cbe <cpu_irq_enter_critical+0x16>
     cdc:	200000a0 	.word	0x200000a0
     ce0:	200000a4 	.word	0x200000a4
     ce4:	20000000 	.word	0x20000000

00000ce8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     ce8:	4b08      	ldr	r3, [pc, #32]	; (d0c <cpu_irq_leave_critical+0x24>)
     cea:	681a      	ldr	r2, [r3, #0]
     cec:	3a01      	subs	r2, #1
     cee:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     cf0:	681b      	ldr	r3, [r3, #0]
     cf2:	2b00      	cmp	r3, #0
     cf4:	d109      	bne.n	d0a <cpu_irq_leave_critical+0x22>
     cf6:	4b06      	ldr	r3, [pc, #24]	; (d10 <cpu_irq_leave_critical+0x28>)
     cf8:	781b      	ldrb	r3, [r3, #0]
     cfa:	2b00      	cmp	r3, #0
     cfc:	d005      	beq.n	d0a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     cfe:	2201      	movs	r2, #1
     d00:	4b04      	ldr	r3, [pc, #16]	; (d14 <cpu_irq_leave_critical+0x2c>)
     d02:	701a      	strb	r2, [r3, #0]
     d04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     d08:	b662      	cpsie	i
	}
}
     d0a:	4770      	bx	lr
     d0c:	200000a0 	.word	0x200000a0
     d10:	200000a4 	.word	0x200000a4
     d14:	20000000 	.word	0x20000000

00000d18 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     d18:	b5f0      	push	{r4, r5, r6, r7, lr}
     d1a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     d1c:	ac01      	add	r4, sp, #4
     d1e:	2501      	movs	r5, #1
     d20:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     d22:	2700      	movs	r7, #0
     d24:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     d26:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     d28:	0021      	movs	r1, r4
     d2a:	2017      	movs	r0, #23
     d2c:	4e06      	ldr	r6, [pc, #24]	; (d48 <system_board_init+0x30>)
     d2e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d30:	2280      	movs	r2, #128	; 0x80
     d32:	0412      	lsls	r2, r2, #16
     d34:	4b05      	ldr	r3, [pc, #20]	; (d4c <system_board_init+0x34>)
     d36:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     d38:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     d3a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     d3c:	0021      	movs	r1, r4
     d3e:	2037      	movs	r0, #55	; 0x37
     d40:	47b0      	blx	r6
}
     d42:	b003      	add	sp, #12
     d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d46:	46c0      	nop			; (mov r8, r8)
     d48:	00000d51 	.word	0x00000d51
     d4c:	41004400 	.word	0x41004400

00000d50 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     d50:	b500      	push	{lr}
     d52:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     d54:	ab01      	add	r3, sp, #4
     d56:	2280      	movs	r2, #128	; 0x80
     d58:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     d5a:	780a      	ldrb	r2, [r1, #0]
     d5c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     d5e:	784a      	ldrb	r2, [r1, #1]
     d60:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     d62:	788a      	ldrb	r2, [r1, #2]
     d64:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     d66:	0019      	movs	r1, r3
     d68:	4b01      	ldr	r3, [pc, #4]	; (d70 <port_pin_set_config+0x20>)
     d6a:	4798      	blx	r3
}
     d6c:	b003      	add	sp, #12
     d6e:	bd00      	pop	{pc}
     d70:	000014b1 	.word	0x000014b1

00000d74 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     d74:	b510      	push	{r4, lr}
	switch (clock_source) {
     d76:	2808      	cmp	r0, #8
     d78:	d803      	bhi.n	d82 <system_clock_source_get_hz+0xe>
     d7a:	0080      	lsls	r0, r0, #2
     d7c:	4b1b      	ldr	r3, [pc, #108]	; (dec <system_clock_source_get_hz+0x78>)
     d7e:	581b      	ldr	r3, [r3, r0]
     d80:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     d82:	2000      	movs	r0, #0
     d84:	e030      	b.n	de8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
     d86:	4b1a      	ldr	r3, [pc, #104]	; (df0 <system_clock_source_get_hz+0x7c>)
     d88:	6918      	ldr	r0, [r3, #16]
     d8a:	e02d      	b.n	de8 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     d8c:	4b19      	ldr	r3, [pc, #100]	; (df4 <system_clock_source_get_hz+0x80>)
     d8e:	6a1b      	ldr	r3, [r3, #32]
     d90:	059b      	lsls	r3, r3, #22
     d92:	0f9b      	lsrs	r3, r3, #30
     d94:	4818      	ldr	r0, [pc, #96]	; (df8 <system_clock_source_get_hz+0x84>)
     d96:	40d8      	lsrs	r0, r3
     d98:	e026      	b.n	de8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
     d9a:	4b15      	ldr	r3, [pc, #84]	; (df0 <system_clock_source_get_hz+0x7c>)
     d9c:	6958      	ldr	r0, [r3, #20]
     d9e:	e023      	b.n	de8 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     da0:	4b13      	ldr	r3, [pc, #76]	; (df0 <system_clock_source_get_hz+0x7c>)
     da2:	681b      	ldr	r3, [r3, #0]
			return 0;
     da4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     da6:	079b      	lsls	r3, r3, #30
     da8:	d51e      	bpl.n	de8 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     daa:	4912      	ldr	r1, [pc, #72]	; (df4 <system_clock_source_get_hz+0x80>)
     dac:	2210      	movs	r2, #16
     dae:	68cb      	ldr	r3, [r1, #12]
     db0:	421a      	tst	r2, r3
     db2:	d0fc      	beq.n	dae <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     db4:	4b0e      	ldr	r3, [pc, #56]	; (df0 <system_clock_source_get_hz+0x7c>)
     db6:	681b      	ldr	r3, [r3, #0]
     db8:	075b      	lsls	r3, r3, #29
     dba:	d401      	bmi.n	dc0 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     dbc:	480f      	ldr	r0, [pc, #60]	; (dfc <system_clock_source_get_hz+0x88>)
     dbe:	e013      	b.n	de8 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     dc0:	2000      	movs	r0, #0
     dc2:	4b0f      	ldr	r3, [pc, #60]	; (e00 <system_clock_source_get_hz+0x8c>)
     dc4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     dc6:	4b0a      	ldr	r3, [pc, #40]	; (df0 <system_clock_source_get_hz+0x7c>)
     dc8:	689b      	ldr	r3, [r3, #8]
     dca:	041b      	lsls	r3, r3, #16
     dcc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     dce:	4358      	muls	r0, r3
     dd0:	e00a      	b.n	de8 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     dd2:	2350      	movs	r3, #80	; 0x50
     dd4:	4a07      	ldr	r2, [pc, #28]	; (df4 <system_clock_source_get_hz+0x80>)
     dd6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     dd8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     dda:	075b      	lsls	r3, r3, #29
     ddc:	d504      	bpl.n	de8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
     dde:	4b04      	ldr	r3, [pc, #16]	; (df0 <system_clock_source_get_hz+0x7c>)
     de0:	68d8      	ldr	r0, [r3, #12]
     de2:	e001      	b.n	de8 <system_clock_source_get_hz+0x74>
		return 32768UL;
     de4:	2080      	movs	r0, #128	; 0x80
     de6:	0200      	lsls	r0, r0, #8
	}
}
     de8:	bd10      	pop	{r4, pc}
     dea:	46c0      	nop			; (mov r8, r8)
     dec:	000029e8 	.word	0x000029e8
     df0:	200000a8 	.word	0x200000a8
     df4:	40000800 	.word	0x40000800
     df8:	007a1200 	.word	0x007a1200
     dfc:	02dc6c00 	.word	0x02dc6c00
     e00:	000013d5 	.word	0x000013d5

00000e04 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     e04:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     e06:	490c      	ldr	r1, [pc, #48]	; (e38 <system_clock_source_osc8m_set_config+0x34>)
     e08:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     e0a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     e0c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     e0e:	7840      	ldrb	r0, [r0, #1]
     e10:	2201      	movs	r2, #1
     e12:	4010      	ands	r0, r2
     e14:	0180      	lsls	r0, r0, #6
     e16:	2640      	movs	r6, #64	; 0x40
     e18:	43b3      	bics	r3, r6
     e1a:	4303      	orrs	r3, r0
     e1c:	402a      	ands	r2, r5
     e1e:	01d2      	lsls	r2, r2, #7
     e20:	2080      	movs	r0, #128	; 0x80
     e22:	4383      	bics	r3, r0
     e24:	4313      	orrs	r3, r2
     e26:	2203      	movs	r2, #3
     e28:	4022      	ands	r2, r4
     e2a:	0212      	lsls	r2, r2, #8
     e2c:	4803      	ldr	r0, [pc, #12]	; (e3c <system_clock_source_osc8m_set_config+0x38>)
     e2e:	4003      	ands	r3, r0
     e30:	4313      	orrs	r3, r2
     e32:	620b      	str	r3, [r1, #32]
}
     e34:	bd70      	pop	{r4, r5, r6, pc}
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	40000800 	.word	0x40000800
     e3c:	fffffcff 	.word	0xfffffcff

00000e40 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     e40:	b5f0      	push	{r4, r5, r6, r7, lr}
     e42:	46de      	mov	lr, fp
     e44:	4657      	mov	r7, sl
     e46:	464e      	mov	r6, r9
     e48:	4645      	mov	r5, r8
     e4a:	b5e0      	push	{r5, r6, r7, lr}
     e4c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
     e4e:	4b26      	ldr	r3, [pc, #152]	; (ee8 <system_clock_source_xosc32k_set_config+0xa8>)
     e50:	469b      	mov	fp, r3
     e52:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
     e54:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     e56:	7800      	ldrb	r0, [r0, #0]
     e58:	4242      	negs	r2, r0
     e5a:	4142      	adcs	r2, r0
     e5c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
     e5e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
     e60:	78ca      	ldrb	r2, [r1, #3]
     e62:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
     e64:	790a      	ldrb	r2, [r1, #4]
     e66:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
     e68:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
     e6a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
     e6c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     e6e:	688a      	ldr	r2, [r1, #8]
     e70:	491e      	ldr	r1, [pc, #120]	; (eec <system_clock_source_xosc32k_set_config+0xac>)
     e72:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
     e74:	2101      	movs	r1, #1
     e76:	464a      	mov	r2, r9
     e78:	0092      	lsls	r2, r2, #2
     e7a:	4691      	mov	r9, r2
     e7c:	2204      	movs	r2, #4
     e7e:	4393      	bics	r3, r2
     e80:	464a      	mov	r2, r9
     e82:	4313      	orrs	r3, r2
     e84:	4642      	mov	r2, r8
     e86:	400a      	ands	r2, r1
     e88:	00d2      	lsls	r2, r2, #3
     e8a:	4690      	mov	r8, r2
     e8c:	2208      	movs	r2, #8
     e8e:	4393      	bics	r3, r2
     e90:	4642      	mov	r2, r8
     e92:	4313      	orrs	r3, r2
     e94:	4662      	mov	r2, ip
     e96:	400a      	ands	r2, r1
     e98:	0112      	lsls	r2, r2, #4
     e9a:	4694      	mov	ip, r2
     e9c:	2210      	movs	r2, #16
     e9e:	4393      	bics	r3, r2
     ea0:	4662      	mov	r2, ip
     ea2:	4313      	orrs	r3, r2
     ea4:	4008      	ands	r0, r1
     ea6:	0140      	lsls	r0, r0, #5
     ea8:	2220      	movs	r2, #32
     eaa:	4393      	bics	r3, r2
     eac:	4303      	orrs	r3, r0
     eae:	400f      	ands	r7, r1
     eb0:	01bf      	lsls	r7, r7, #6
     eb2:	2040      	movs	r0, #64	; 0x40
     eb4:	4383      	bics	r3, r0
     eb6:	433b      	orrs	r3, r7
     eb8:	400e      	ands	r6, r1
     eba:	01f6      	lsls	r6, r6, #7
     ebc:	3040      	adds	r0, #64	; 0x40
     ebe:	4383      	bics	r3, r0
     ec0:	4333      	orrs	r3, r6
     ec2:	3879      	subs	r0, #121	; 0x79
     ec4:	4005      	ands	r5, r0
     ec6:	022d      	lsls	r5, r5, #8
     ec8:	4809      	ldr	r0, [pc, #36]	; (ef0 <system_clock_source_xosc32k_set_config+0xb0>)
     eca:	4003      	ands	r3, r0
     ecc:	432b      	orrs	r3, r5
     ece:	4021      	ands	r1, r4
     ed0:	0309      	lsls	r1, r1, #12
     ed2:	4808      	ldr	r0, [pc, #32]	; (ef4 <system_clock_source_xosc32k_set_config+0xb4>)
     ed4:	4003      	ands	r3, r0
     ed6:	430b      	orrs	r3, r1
     ed8:	465a      	mov	r2, fp
     eda:	8293      	strh	r3, [r2, #20]
}
     edc:	bc3c      	pop	{r2, r3, r4, r5}
     ede:	4690      	mov	r8, r2
     ee0:	4699      	mov	r9, r3
     ee2:	46a2      	mov	sl, r4
     ee4:	46ab      	mov	fp, r5
     ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ee8:	40000800 	.word	0x40000800
     eec:	200000a8 	.word	0x200000a8
     ef0:	fffff8ff 	.word	0xfffff8ff
     ef4:	ffffefff 	.word	0xffffefff

00000ef8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     ef8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     efa:	7a03      	ldrb	r3, [r0, #8]
     efc:	069b      	lsls	r3, r3, #26
     efe:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     f00:	8942      	ldrh	r2, [r0, #10]
     f02:	0592      	lsls	r2, r2, #22
     f04:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     f06:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     f08:	4918      	ldr	r1, [pc, #96]	; (f6c <system_clock_source_dfll_set_config+0x74>)
     f0a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     f0c:	7983      	ldrb	r3, [r0, #6]
     f0e:	79c2      	ldrb	r2, [r0, #7]
     f10:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     f12:	8842      	ldrh	r2, [r0, #2]
     f14:	8884      	ldrh	r4, [r0, #4]
     f16:	4322      	orrs	r2, r4
     f18:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     f1a:	7842      	ldrb	r2, [r0, #1]
     f1c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
     f1e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
     f20:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     f22:	7803      	ldrb	r3, [r0, #0]
     f24:	2b04      	cmp	r3, #4
     f26:	d011      	beq.n	f4c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     f28:	2b20      	cmp	r3, #32
     f2a:	d10e      	bne.n	f4a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     f2c:	7b03      	ldrb	r3, [r0, #12]
     f2e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     f30:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     f32:	4313      	orrs	r3, r2
     f34:	89c2      	ldrh	r2, [r0, #14]
     f36:	0412      	lsls	r2, r2, #16
     f38:	490d      	ldr	r1, [pc, #52]	; (f70 <system_clock_source_dfll_set_config+0x78>)
     f3a:	400a      	ands	r2, r1
     f3c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     f3e:	4a0b      	ldr	r2, [pc, #44]	; (f6c <system_clock_source_dfll_set_config+0x74>)
     f40:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     f42:	6811      	ldr	r1, [r2, #0]
     f44:	4b0b      	ldr	r3, [pc, #44]	; (f74 <system_clock_source_dfll_set_config+0x7c>)
     f46:	430b      	orrs	r3, r1
     f48:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     f4a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     f4c:	7b03      	ldrb	r3, [r0, #12]
     f4e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     f50:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     f52:	4313      	orrs	r3, r2
     f54:	89c2      	ldrh	r2, [r0, #14]
     f56:	0412      	lsls	r2, r2, #16
     f58:	4905      	ldr	r1, [pc, #20]	; (f70 <system_clock_source_dfll_set_config+0x78>)
     f5a:	400a      	ands	r2, r1
     f5c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     f5e:	4a03      	ldr	r2, [pc, #12]	; (f6c <system_clock_source_dfll_set_config+0x74>)
     f60:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     f62:	6813      	ldr	r3, [r2, #0]
     f64:	2104      	movs	r1, #4
     f66:	430b      	orrs	r3, r1
     f68:	6013      	str	r3, [r2, #0]
     f6a:	e7ee      	b.n	f4a <system_clock_source_dfll_set_config+0x52>
     f6c:	200000a8 	.word	0x200000a8
     f70:	03ff0000 	.word	0x03ff0000
     f74:	00000424 	.word	0x00000424

00000f78 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     f78:	2808      	cmp	r0, #8
     f7a:	d803      	bhi.n	f84 <system_clock_source_enable+0xc>
     f7c:	0080      	lsls	r0, r0, #2
     f7e:	4b25      	ldr	r3, [pc, #148]	; (1014 <system_clock_source_enable+0x9c>)
     f80:	581b      	ldr	r3, [r3, r0]
     f82:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     f84:	2017      	movs	r0, #23
     f86:	e044      	b.n	1012 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     f88:	4a23      	ldr	r2, [pc, #140]	; (1018 <system_clock_source_enable+0xa0>)
     f8a:	6a13      	ldr	r3, [r2, #32]
     f8c:	2102      	movs	r1, #2
     f8e:	430b      	orrs	r3, r1
     f90:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     f92:	2000      	movs	r0, #0
     f94:	e03d      	b.n	1012 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     f96:	4a20      	ldr	r2, [pc, #128]	; (1018 <system_clock_source_enable+0xa0>)
     f98:	6993      	ldr	r3, [r2, #24]
     f9a:	2102      	movs	r1, #2
     f9c:	430b      	orrs	r3, r1
     f9e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     fa0:	2000      	movs	r0, #0
		break;
     fa2:	e036      	b.n	1012 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     fa4:	4a1c      	ldr	r2, [pc, #112]	; (1018 <system_clock_source_enable+0xa0>)
     fa6:	8a13      	ldrh	r3, [r2, #16]
     fa8:	2102      	movs	r1, #2
     faa:	430b      	orrs	r3, r1
     fac:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     fae:	2000      	movs	r0, #0
		break;
     fb0:	e02f      	b.n	1012 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     fb2:	4a19      	ldr	r2, [pc, #100]	; (1018 <system_clock_source_enable+0xa0>)
     fb4:	8a93      	ldrh	r3, [r2, #20]
     fb6:	2102      	movs	r1, #2
     fb8:	430b      	orrs	r3, r1
     fba:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     fbc:	2000      	movs	r0, #0
		break;
     fbe:	e028      	b.n	1012 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     fc0:	4916      	ldr	r1, [pc, #88]	; (101c <system_clock_source_enable+0xa4>)
     fc2:	680b      	ldr	r3, [r1, #0]
     fc4:	2202      	movs	r2, #2
     fc6:	4313      	orrs	r3, r2
     fc8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     fca:	4b13      	ldr	r3, [pc, #76]	; (1018 <system_clock_source_enable+0xa0>)
     fcc:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     fce:	0019      	movs	r1, r3
     fd0:	320e      	adds	r2, #14
     fd2:	68cb      	ldr	r3, [r1, #12]
     fd4:	421a      	tst	r2, r3
     fd6:	d0fc      	beq.n	fd2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     fd8:	4a10      	ldr	r2, [pc, #64]	; (101c <system_clock_source_enable+0xa4>)
     fda:	6891      	ldr	r1, [r2, #8]
     fdc:	4b0e      	ldr	r3, [pc, #56]	; (1018 <system_clock_source_enable+0xa0>)
     fde:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     fe0:	6852      	ldr	r2, [r2, #4]
     fe2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     fe4:	2200      	movs	r2, #0
     fe6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     fe8:	0019      	movs	r1, r3
     fea:	3210      	adds	r2, #16
     fec:	68cb      	ldr	r3, [r1, #12]
     fee:	421a      	tst	r2, r3
     ff0:	d0fc      	beq.n	fec <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     ff2:	4b0a      	ldr	r3, [pc, #40]	; (101c <system_clock_source_enable+0xa4>)
     ff4:	681b      	ldr	r3, [r3, #0]
     ff6:	b29b      	uxth	r3, r3
     ff8:	4a07      	ldr	r2, [pc, #28]	; (1018 <system_clock_source_enable+0xa0>)
     ffa:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     ffc:	2000      	movs	r0, #0
     ffe:	e008      	b.n	1012 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1000:	4905      	ldr	r1, [pc, #20]	; (1018 <system_clock_source_enable+0xa0>)
    1002:	2244      	movs	r2, #68	; 0x44
    1004:	5c8b      	ldrb	r3, [r1, r2]
    1006:	2002      	movs	r0, #2
    1008:	4303      	orrs	r3, r0
    100a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    100c:	2000      	movs	r0, #0
		break;
    100e:	e000      	b.n	1012 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1010:	2000      	movs	r0, #0
}
    1012:	4770      	bx	lr
    1014:	00002a0c 	.word	0x00002a0c
    1018:	40000800 	.word	0x40000800
    101c:	200000a8 	.word	0x200000a8

00001020 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1020:	b5f0      	push	{r4, r5, r6, r7, lr}
    1022:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1024:	22c2      	movs	r2, #194	; 0xc2
    1026:	00d2      	lsls	r2, r2, #3
    1028:	4b47      	ldr	r3, [pc, #284]	; (1148 <system_clock_init+0x128>)
    102a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    102c:	4a47      	ldr	r2, [pc, #284]	; (114c <system_clock_init+0x12c>)
    102e:	6853      	ldr	r3, [r2, #4]
    1030:	211e      	movs	r1, #30
    1032:	438b      	bics	r3, r1
    1034:	391a      	subs	r1, #26
    1036:	430b      	orrs	r3, r1
    1038:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    103a:	2202      	movs	r2, #2
    103c:	ab01      	add	r3, sp, #4
    103e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1040:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1042:	4d43      	ldr	r5, [pc, #268]	; (1150 <system_clock_init+0x130>)
    1044:	b2e0      	uxtb	r0, r4
    1046:	a901      	add	r1, sp, #4
    1048:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    104a:	3401      	adds	r4, #1
    104c:	2c25      	cmp	r4, #37	; 0x25
    104e:	d1f9      	bne.n	1044 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1050:	a80a      	add	r0, sp, #40	; 0x28
    1052:	2300      	movs	r3, #0
    1054:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1056:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1058:	2280      	movs	r2, #128	; 0x80
    105a:	0212      	lsls	r2, r2, #8
    105c:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    105e:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1060:	2201      	movs	r2, #1
    1062:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1064:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1066:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1068:	3202      	adds	r2, #2
    106a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    106c:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    106e:	4b39      	ldr	r3, [pc, #228]	; (1154 <system_clock_init+0x134>)
    1070:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1072:	2005      	movs	r0, #5
    1074:	4b38      	ldr	r3, [pc, #224]	; (1158 <system_clock_init+0x138>)
    1076:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1078:	4933      	ldr	r1, [pc, #204]	; (1148 <system_clock_init+0x128>)
    107a:	2202      	movs	r2, #2
    107c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    107e:	421a      	tst	r2, r3
    1080:	d0fc      	beq.n	107c <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1082:	4a31      	ldr	r2, [pc, #196]	; (1148 <system_clock_init+0x128>)
    1084:	8a93      	ldrh	r3, [r2, #20]
    1086:	2180      	movs	r1, #128	; 0x80
    1088:	430b      	orrs	r3, r1
    108a:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    108c:	ab05      	add	r3, sp, #20
    108e:	2100      	movs	r1, #0
    1090:	2200      	movs	r2, #0
    1092:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1094:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1096:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1098:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    109a:	313f      	adds	r1, #63	; 0x3f
    109c:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    109e:	393b      	subs	r1, #59	; 0x3b
    10a0:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    10a2:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    10a4:	4b2d      	ldr	r3, [pc, #180]	; (115c <system_clock_init+0x13c>)
    10a6:	681b      	ldr	r3, [r3, #0]
    10a8:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    10aa:	2b3f      	cmp	r3, #63	; 0x3f
    10ac:	d04a      	beq.n	1144 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    10ae:	a805      	add	r0, sp, #20
    10b0:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    10b2:	4b2b      	ldr	r3, [pc, #172]	; (1160 <system_clock_init+0x140>)
    10b4:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    10b6:	2307      	movs	r3, #7
    10b8:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    10ba:	3338      	adds	r3, #56	; 0x38
    10bc:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    10be:	4b29      	ldr	r3, [pc, #164]	; (1164 <system_clock_init+0x144>)
    10c0:	4798      	blx	r3
	config->run_in_standby  = false;
    10c2:	a804      	add	r0, sp, #16
    10c4:	2500      	movs	r5, #0
    10c6:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    10c8:	2601      	movs	r6, #1
    10ca:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    10cc:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    10ce:	4b26      	ldr	r3, [pc, #152]	; (1168 <system_clock_init+0x148>)
    10d0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    10d2:	2006      	movs	r0, #6
    10d4:	4f20      	ldr	r7, [pc, #128]	; (1158 <system_clock_init+0x138>)
    10d6:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    10d8:	4b24      	ldr	r3, [pc, #144]	; (116c <system_clock_init+0x14c>)
    10da:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    10dc:	ac01      	add	r4, sp, #4
    10de:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    10e0:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    10e2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    10e4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    10e6:	2305      	movs	r3, #5
    10e8:	7023      	strb	r3, [r4, #0]
    10ea:	0021      	movs	r1, r4
    10ec:	2001      	movs	r0, #1
    10ee:	4b20      	ldr	r3, [pc, #128]	; (1170 <system_clock_init+0x150>)
    10f0:	4798      	blx	r3
    10f2:	2001      	movs	r0, #1
    10f4:	4b1f      	ldr	r3, [pc, #124]	; (1174 <system_clock_init+0x154>)
    10f6:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    10f8:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    10fa:	0021      	movs	r1, r4
    10fc:	2000      	movs	r0, #0
    10fe:	4b14      	ldr	r3, [pc, #80]	; (1150 <system_clock_init+0x130>)
    1100:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1102:	2000      	movs	r0, #0
    1104:	4b1c      	ldr	r3, [pc, #112]	; (1178 <system_clock_init+0x158>)
    1106:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1108:	2007      	movs	r0, #7
    110a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    110c:	490e      	ldr	r1, [pc, #56]	; (1148 <system_clock_init+0x128>)
    110e:	22d0      	movs	r2, #208	; 0xd0
    1110:	68cb      	ldr	r3, [r1, #12]
    1112:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1114:	2bd0      	cmp	r3, #208	; 0xd0
    1116:	d1fb      	bne.n	1110 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1118:	4a18      	ldr	r2, [pc, #96]	; (117c <system_clock_init+0x15c>)
    111a:	2300      	movs	r3, #0
    111c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    111e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1120:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1122:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1124:	a901      	add	r1, sp, #4
    1126:	2201      	movs	r2, #1
    1128:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    112a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    112c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    112e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1130:	3307      	adds	r3, #7
    1132:	700b      	strb	r3, [r1, #0]
    1134:	2000      	movs	r0, #0
    1136:	4b0e      	ldr	r3, [pc, #56]	; (1170 <system_clock_init+0x150>)
    1138:	4798      	blx	r3
    113a:	2000      	movs	r0, #0
    113c:	4b0d      	ldr	r3, [pc, #52]	; (1174 <system_clock_init+0x154>)
    113e:	4798      	blx	r3
#endif
}
    1140:	b00f      	add	sp, #60	; 0x3c
    1142:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1144:	3b20      	subs	r3, #32
    1146:	e7b2      	b.n	10ae <system_clock_init+0x8e>
    1148:	40000800 	.word	0x40000800
    114c:	41004000 	.word	0x41004000
    1150:	000013b9 	.word	0x000013b9
    1154:	00000e41 	.word	0x00000e41
    1158:	00000f79 	.word	0x00000f79
    115c:	00806024 	.word	0x00806024
    1160:	000005b9 	.word	0x000005b9
    1164:	00000ef9 	.word	0x00000ef9
    1168:	00000e05 	.word	0x00000e05
    116c:	00001181 	.word	0x00001181
    1170:	000011a5 	.word	0x000011a5
    1174:	0000125d 	.word	0x0000125d
    1178:	0000132d 	.word	0x0000132d
    117c:	40000400 	.word	0x40000400

00001180 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1180:	4a06      	ldr	r2, [pc, #24]	; (119c <system_gclk_init+0x1c>)
    1182:	6993      	ldr	r3, [r2, #24]
    1184:	2108      	movs	r1, #8
    1186:	430b      	orrs	r3, r1
    1188:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    118a:	2201      	movs	r2, #1
    118c:	4b04      	ldr	r3, [pc, #16]	; (11a0 <system_gclk_init+0x20>)
    118e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1190:	0019      	movs	r1, r3
    1192:	780b      	ldrb	r3, [r1, #0]
    1194:	4213      	tst	r3, r2
    1196:	d1fc      	bne.n	1192 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1198:	4770      	bx	lr
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	40000400 	.word	0x40000400
    11a0:	40000c00 	.word	0x40000c00

000011a4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    11a4:	b570      	push	{r4, r5, r6, lr}
    11a6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    11a8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    11aa:	780d      	ldrb	r5, [r1, #0]
    11ac:	022d      	lsls	r5, r5, #8
    11ae:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    11b0:	784b      	ldrb	r3, [r1, #1]
    11b2:	2b00      	cmp	r3, #0
    11b4:	d002      	beq.n	11bc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    11b6:	2380      	movs	r3, #128	; 0x80
    11b8:	02db      	lsls	r3, r3, #11
    11ba:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    11bc:	7a4b      	ldrb	r3, [r1, #9]
    11be:	2b00      	cmp	r3, #0
    11c0:	d002      	beq.n	11c8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    11c2:	2380      	movs	r3, #128	; 0x80
    11c4:	031b      	lsls	r3, r3, #12
    11c6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    11c8:	6848      	ldr	r0, [r1, #4]
    11ca:	2801      	cmp	r0, #1
    11cc:	d910      	bls.n	11f0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    11ce:	1e43      	subs	r3, r0, #1
    11d0:	4218      	tst	r0, r3
    11d2:	d134      	bne.n	123e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    11d4:	2802      	cmp	r0, #2
    11d6:	d930      	bls.n	123a <system_gclk_gen_set_config+0x96>
    11d8:	2302      	movs	r3, #2
    11da:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    11dc:	3201      	adds	r2, #1
						mask <<= 1) {
    11de:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    11e0:	4298      	cmp	r0, r3
    11e2:	d8fb      	bhi.n	11dc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    11e4:	0212      	lsls	r2, r2, #8
    11e6:	4332      	orrs	r2, r6
    11e8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    11ea:	2380      	movs	r3, #128	; 0x80
    11ec:	035b      	lsls	r3, r3, #13
    11ee:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    11f0:	7a0b      	ldrb	r3, [r1, #8]
    11f2:	2b00      	cmp	r3, #0
    11f4:	d002      	beq.n	11fc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    11f6:	2380      	movs	r3, #128	; 0x80
    11f8:	039b      	lsls	r3, r3, #14
    11fa:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11fc:	4a13      	ldr	r2, [pc, #76]	; (124c <system_gclk_gen_set_config+0xa8>)
    11fe:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1200:	b25b      	sxtb	r3, r3
    1202:	2b00      	cmp	r3, #0
    1204:	dbfb      	blt.n	11fe <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1206:	4b12      	ldr	r3, [pc, #72]	; (1250 <system_gclk_gen_set_config+0xac>)
    1208:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    120a:	4b12      	ldr	r3, [pc, #72]	; (1254 <system_gclk_gen_set_config+0xb0>)
    120c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    120e:	4a0f      	ldr	r2, [pc, #60]	; (124c <system_gclk_gen_set_config+0xa8>)
    1210:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1212:	b25b      	sxtb	r3, r3
    1214:	2b00      	cmp	r3, #0
    1216:	dbfb      	blt.n	1210 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1218:	4b0c      	ldr	r3, [pc, #48]	; (124c <system_gclk_gen_set_config+0xa8>)
    121a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    121c:	001a      	movs	r2, r3
    121e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1220:	b25b      	sxtb	r3, r3
    1222:	2b00      	cmp	r3, #0
    1224:	dbfb      	blt.n	121e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1226:	4a09      	ldr	r2, [pc, #36]	; (124c <system_gclk_gen_set_config+0xa8>)
    1228:	6853      	ldr	r3, [r2, #4]
    122a:	2180      	movs	r1, #128	; 0x80
    122c:	0249      	lsls	r1, r1, #9
    122e:	400b      	ands	r3, r1
    1230:	431d      	orrs	r5, r3
    1232:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1234:	4b08      	ldr	r3, [pc, #32]	; (1258 <system_gclk_gen_set_config+0xb4>)
    1236:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1238:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    123a:	2200      	movs	r2, #0
    123c:	e7d2      	b.n	11e4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    123e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1240:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1242:	2380      	movs	r3, #128	; 0x80
    1244:	029b      	lsls	r3, r3, #10
    1246:	431d      	orrs	r5, r3
    1248:	e7d2      	b.n	11f0 <system_gclk_gen_set_config+0x4c>
    124a:	46c0      	nop			; (mov r8, r8)
    124c:	40000c00 	.word	0x40000c00
    1250:	00000ca9 	.word	0x00000ca9
    1254:	40000c08 	.word	0x40000c08
    1258:	00000ce9 	.word	0x00000ce9

0000125c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    125c:	b510      	push	{r4, lr}
    125e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1260:	4a0b      	ldr	r2, [pc, #44]	; (1290 <system_gclk_gen_enable+0x34>)
    1262:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1264:	b25b      	sxtb	r3, r3
    1266:	2b00      	cmp	r3, #0
    1268:	dbfb      	blt.n	1262 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    126a:	4b0a      	ldr	r3, [pc, #40]	; (1294 <system_gclk_gen_enable+0x38>)
    126c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    126e:	4b0a      	ldr	r3, [pc, #40]	; (1298 <system_gclk_gen_enable+0x3c>)
    1270:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1272:	4a07      	ldr	r2, [pc, #28]	; (1290 <system_gclk_gen_enable+0x34>)
    1274:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1276:	b25b      	sxtb	r3, r3
    1278:	2b00      	cmp	r3, #0
    127a:	dbfb      	blt.n	1274 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    127c:	4a04      	ldr	r2, [pc, #16]	; (1290 <system_gclk_gen_enable+0x34>)
    127e:	6851      	ldr	r1, [r2, #4]
    1280:	2380      	movs	r3, #128	; 0x80
    1282:	025b      	lsls	r3, r3, #9
    1284:	430b      	orrs	r3, r1
    1286:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1288:	4b04      	ldr	r3, [pc, #16]	; (129c <system_gclk_gen_enable+0x40>)
    128a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    128c:	bd10      	pop	{r4, pc}
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	40000c00 	.word	0x40000c00
    1294:	00000ca9 	.word	0x00000ca9
    1298:	40000c04 	.word	0x40000c04
    129c:	00000ce9 	.word	0x00000ce9

000012a0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    12a0:	b570      	push	{r4, r5, r6, lr}
    12a2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12a4:	4a1a      	ldr	r2, [pc, #104]	; (1310 <system_gclk_gen_get_hz+0x70>)
    12a6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    12a8:	b25b      	sxtb	r3, r3
    12aa:	2b00      	cmp	r3, #0
    12ac:	dbfb      	blt.n	12a6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    12ae:	4b19      	ldr	r3, [pc, #100]	; (1314 <system_gclk_gen_get_hz+0x74>)
    12b0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    12b2:	4b19      	ldr	r3, [pc, #100]	; (1318 <system_gclk_gen_get_hz+0x78>)
    12b4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12b6:	4a16      	ldr	r2, [pc, #88]	; (1310 <system_gclk_gen_get_hz+0x70>)
    12b8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    12ba:	b25b      	sxtb	r3, r3
    12bc:	2b00      	cmp	r3, #0
    12be:	dbfb      	blt.n	12b8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    12c0:	4e13      	ldr	r6, [pc, #76]	; (1310 <system_gclk_gen_get_hz+0x70>)
    12c2:	6870      	ldr	r0, [r6, #4]
    12c4:	04c0      	lsls	r0, r0, #19
    12c6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    12c8:	4b14      	ldr	r3, [pc, #80]	; (131c <system_gclk_gen_get_hz+0x7c>)
    12ca:	4798      	blx	r3
    12cc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    12ce:	4b12      	ldr	r3, [pc, #72]	; (1318 <system_gclk_gen_get_hz+0x78>)
    12d0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    12d2:	6876      	ldr	r6, [r6, #4]
    12d4:	02f6      	lsls	r6, r6, #11
    12d6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    12d8:	4b11      	ldr	r3, [pc, #68]	; (1320 <system_gclk_gen_get_hz+0x80>)
    12da:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12dc:	4a0c      	ldr	r2, [pc, #48]	; (1310 <system_gclk_gen_get_hz+0x70>)
    12de:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    12e0:	b25b      	sxtb	r3, r3
    12e2:	2b00      	cmp	r3, #0
    12e4:	dbfb      	blt.n	12de <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    12e6:	4b0a      	ldr	r3, [pc, #40]	; (1310 <system_gclk_gen_get_hz+0x70>)
    12e8:	689c      	ldr	r4, [r3, #8]
    12ea:	0224      	lsls	r4, r4, #8
    12ec:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    12ee:	4b0d      	ldr	r3, [pc, #52]	; (1324 <system_gclk_gen_get_hz+0x84>)
    12f0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    12f2:	2e00      	cmp	r6, #0
    12f4:	d107      	bne.n	1306 <system_gclk_gen_get_hz+0x66>
    12f6:	2c01      	cmp	r4, #1
    12f8:	d907      	bls.n	130a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    12fa:	0021      	movs	r1, r4
    12fc:	0028      	movs	r0, r5
    12fe:	4b0a      	ldr	r3, [pc, #40]	; (1328 <system_gclk_gen_get_hz+0x88>)
    1300:	4798      	blx	r3
    1302:	0005      	movs	r5, r0
    1304:	e001      	b.n	130a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1306:	3401      	adds	r4, #1
    1308:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    130a:	0028      	movs	r0, r5
    130c:	bd70      	pop	{r4, r5, r6, pc}
    130e:	46c0      	nop			; (mov r8, r8)
    1310:	40000c00 	.word	0x40000c00
    1314:	00000ca9 	.word	0x00000ca9
    1318:	40000c04 	.word	0x40000c04
    131c:	00000d75 	.word	0x00000d75
    1320:	40000c08 	.word	0x40000c08
    1324:	00000ce9 	.word	0x00000ce9
    1328:	00001835 	.word	0x00001835

0000132c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    132c:	b510      	push	{r4, lr}
    132e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1330:	4b06      	ldr	r3, [pc, #24]	; (134c <system_gclk_chan_enable+0x20>)
    1332:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1334:	4b06      	ldr	r3, [pc, #24]	; (1350 <system_gclk_chan_enable+0x24>)
    1336:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1338:	4a06      	ldr	r2, [pc, #24]	; (1354 <system_gclk_chan_enable+0x28>)
    133a:	8853      	ldrh	r3, [r2, #2]
    133c:	2180      	movs	r1, #128	; 0x80
    133e:	01c9      	lsls	r1, r1, #7
    1340:	430b      	orrs	r3, r1
    1342:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1344:	4b04      	ldr	r3, [pc, #16]	; (1358 <system_gclk_chan_enable+0x2c>)
    1346:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1348:	bd10      	pop	{r4, pc}
    134a:	46c0      	nop			; (mov r8, r8)
    134c:	00000ca9 	.word	0x00000ca9
    1350:	40000c02 	.word	0x40000c02
    1354:	40000c00 	.word	0x40000c00
    1358:	00000ce9 	.word	0x00000ce9

0000135c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    135c:	b510      	push	{r4, lr}
    135e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1360:	4b0f      	ldr	r3, [pc, #60]	; (13a0 <system_gclk_chan_disable+0x44>)
    1362:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1364:	4b0f      	ldr	r3, [pc, #60]	; (13a4 <system_gclk_chan_disable+0x48>)
    1366:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1368:	4a0f      	ldr	r2, [pc, #60]	; (13a8 <system_gclk_chan_disable+0x4c>)
    136a:	8853      	ldrh	r3, [r2, #2]
    136c:	051b      	lsls	r3, r3, #20
    136e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1370:	8853      	ldrh	r3, [r2, #2]
    1372:	490e      	ldr	r1, [pc, #56]	; (13ac <system_gclk_chan_disable+0x50>)
    1374:	400b      	ands	r3, r1
    1376:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1378:	8853      	ldrh	r3, [r2, #2]
    137a:	490d      	ldr	r1, [pc, #52]	; (13b0 <system_gclk_chan_disable+0x54>)
    137c:	400b      	ands	r3, r1
    137e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1380:	0011      	movs	r1, r2
    1382:	2280      	movs	r2, #128	; 0x80
    1384:	01d2      	lsls	r2, r2, #7
    1386:	884b      	ldrh	r3, [r1, #2]
    1388:	4213      	tst	r3, r2
    138a:	d1fc      	bne.n	1386 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    138c:	4906      	ldr	r1, [pc, #24]	; (13a8 <system_gclk_chan_disable+0x4c>)
    138e:	884a      	ldrh	r2, [r1, #2]
    1390:	0203      	lsls	r3, r0, #8
    1392:	4806      	ldr	r0, [pc, #24]	; (13ac <system_gclk_chan_disable+0x50>)
    1394:	4002      	ands	r2, r0
    1396:	4313      	orrs	r3, r2
    1398:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    139a:	4b06      	ldr	r3, [pc, #24]	; (13b4 <system_gclk_chan_disable+0x58>)
    139c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    139e:	bd10      	pop	{r4, pc}
    13a0:	00000ca9 	.word	0x00000ca9
    13a4:	40000c02 	.word	0x40000c02
    13a8:	40000c00 	.word	0x40000c00
    13ac:	fffff0ff 	.word	0xfffff0ff
    13b0:	ffffbfff 	.word	0xffffbfff
    13b4:	00000ce9 	.word	0x00000ce9

000013b8 <system_gclk_chan_set_config>:
{
    13b8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    13ba:	780c      	ldrb	r4, [r1, #0]
    13bc:	0224      	lsls	r4, r4, #8
    13be:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    13c0:	4b02      	ldr	r3, [pc, #8]	; (13cc <system_gclk_chan_set_config+0x14>)
    13c2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    13c4:	b2a4      	uxth	r4, r4
    13c6:	4b02      	ldr	r3, [pc, #8]	; (13d0 <system_gclk_chan_set_config+0x18>)
    13c8:	805c      	strh	r4, [r3, #2]
}
    13ca:	bd10      	pop	{r4, pc}
    13cc:	0000135d 	.word	0x0000135d
    13d0:	40000c00 	.word	0x40000c00

000013d4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    13d4:	b510      	push	{r4, lr}
    13d6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    13d8:	4b06      	ldr	r3, [pc, #24]	; (13f4 <system_gclk_chan_get_hz+0x20>)
    13da:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    13dc:	4b06      	ldr	r3, [pc, #24]	; (13f8 <system_gclk_chan_get_hz+0x24>)
    13de:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    13e0:	4b06      	ldr	r3, [pc, #24]	; (13fc <system_gclk_chan_get_hz+0x28>)
    13e2:	885c      	ldrh	r4, [r3, #2]
    13e4:	0524      	lsls	r4, r4, #20
    13e6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    13e8:	4b05      	ldr	r3, [pc, #20]	; (1400 <system_gclk_chan_get_hz+0x2c>)
    13ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    13ec:	0020      	movs	r0, r4
    13ee:	4b05      	ldr	r3, [pc, #20]	; (1404 <system_gclk_chan_get_hz+0x30>)
    13f0:	4798      	blx	r3
}
    13f2:	bd10      	pop	{r4, pc}
    13f4:	00000ca9 	.word	0x00000ca9
    13f8:	40000c02 	.word	0x40000c02
    13fc:	40000c00 	.word	0x40000c00
    1400:	00000ce9 	.word	0x00000ce9
    1404:	000012a1 	.word	0x000012a1

00001408 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1408:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    140a:	78d3      	ldrb	r3, [r2, #3]
    140c:	2b00      	cmp	r3, #0
    140e:	d135      	bne.n	147c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1410:	7813      	ldrb	r3, [r2, #0]
    1412:	2b80      	cmp	r3, #128	; 0x80
    1414:	d029      	beq.n	146a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1416:	061b      	lsls	r3, r3, #24
    1418:	2480      	movs	r4, #128	; 0x80
    141a:	0264      	lsls	r4, r4, #9
    141c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    141e:	7854      	ldrb	r4, [r2, #1]
    1420:	2502      	movs	r5, #2
    1422:	43ac      	bics	r4, r5
    1424:	d106      	bne.n	1434 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1426:	7894      	ldrb	r4, [r2, #2]
    1428:	2c00      	cmp	r4, #0
    142a:	d120      	bne.n	146e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    142c:	2480      	movs	r4, #128	; 0x80
    142e:	02a4      	lsls	r4, r4, #10
    1430:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1432:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1434:	7854      	ldrb	r4, [r2, #1]
    1436:	3c01      	subs	r4, #1
    1438:	2c01      	cmp	r4, #1
    143a:	d91c      	bls.n	1476 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    143c:	040d      	lsls	r5, r1, #16
    143e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1440:	24a0      	movs	r4, #160	; 0xa0
    1442:	05e4      	lsls	r4, r4, #23
    1444:	432c      	orrs	r4, r5
    1446:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1448:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    144a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    144c:	24d0      	movs	r4, #208	; 0xd0
    144e:	0624      	lsls	r4, r4, #24
    1450:	432c      	orrs	r4, r5
    1452:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1454:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1456:	78d4      	ldrb	r4, [r2, #3]
    1458:	2c00      	cmp	r4, #0
    145a:	d122      	bne.n	14a2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    145c:	035b      	lsls	r3, r3, #13
    145e:	d51c      	bpl.n	149a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1460:	7893      	ldrb	r3, [r2, #2]
    1462:	2b01      	cmp	r3, #1
    1464:	d01e      	beq.n	14a4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1466:	6141      	str	r1, [r0, #20]
    1468:	e017      	b.n	149a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    146a:	2300      	movs	r3, #0
    146c:	e7d7      	b.n	141e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    146e:	24c0      	movs	r4, #192	; 0xc0
    1470:	02e4      	lsls	r4, r4, #11
    1472:	4323      	orrs	r3, r4
    1474:	e7dd      	b.n	1432 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1476:	4c0d      	ldr	r4, [pc, #52]	; (14ac <_system_pinmux_config+0xa4>)
    1478:	4023      	ands	r3, r4
    147a:	e7df      	b.n	143c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    147c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    147e:	040c      	lsls	r4, r1, #16
    1480:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1482:	23a0      	movs	r3, #160	; 0xa0
    1484:	05db      	lsls	r3, r3, #23
    1486:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1488:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    148a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    148c:	23d0      	movs	r3, #208	; 0xd0
    148e:	061b      	lsls	r3, r3, #24
    1490:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1492:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1494:	78d3      	ldrb	r3, [r2, #3]
    1496:	2b00      	cmp	r3, #0
    1498:	d103      	bne.n	14a2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    149a:	7853      	ldrb	r3, [r2, #1]
    149c:	3b01      	subs	r3, #1
    149e:	2b01      	cmp	r3, #1
    14a0:	d902      	bls.n	14a8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    14a2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    14a4:	6181      	str	r1, [r0, #24]
    14a6:	e7f8      	b.n	149a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    14a8:	6081      	str	r1, [r0, #8]
}
    14aa:	e7fa      	b.n	14a2 <_system_pinmux_config+0x9a>
    14ac:	fffbffff 	.word	0xfffbffff

000014b0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    14b0:	b510      	push	{r4, lr}
    14b2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14b4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    14b6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    14b8:	2900      	cmp	r1, #0
    14ba:	d104      	bne.n	14c6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    14bc:	0943      	lsrs	r3, r0, #5
    14be:	01db      	lsls	r3, r3, #7
    14c0:	4905      	ldr	r1, [pc, #20]	; (14d8 <system_pinmux_pin_set_config+0x28>)
    14c2:	468c      	mov	ip, r1
    14c4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    14c6:	241f      	movs	r4, #31
    14c8:	4020      	ands	r0, r4
    14ca:	2101      	movs	r1, #1
    14cc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    14ce:	0018      	movs	r0, r3
    14d0:	4b02      	ldr	r3, [pc, #8]	; (14dc <system_pinmux_pin_set_config+0x2c>)
    14d2:	4798      	blx	r3
}
    14d4:	bd10      	pop	{r4, pc}
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	41004400 	.word	0x41004400
    14dc:	00001409 	.word	0x00001409

000014e0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    14e0:	4770      	bx	lr
	...

000014e4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    14e4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    14e6:	4b05      	ldr	r3, [pc, #20]	; (14fc <system_init+0x18>)
    14e8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    14ea:	4b05      	ldr	r3, [pc, #20]	; (1500 <system_init+0x1c>)
    14ec:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    14ee:	4b05      	ldr	r3, [pc, #20]	; (1504 <system_init+0x20>)
    14f0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    14f2:	4b05      	ldr	r3, [pc, #20]	; (1508 <system_init+0x24>)
    14f4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    14f6:	4b05      	ldr	r3, [pc, #20]	; (150c <system_init+0x28>)
    14f8:	4798      	blx	r3
}
    14fa:	bd10      	pop	{r4, pc}
    14fc:	00001021 	.word	0x00001021
    1500:	00000d19 	.word	0x00000d19
    1504:	000014e1 	.word	0x000014e1
    1508:	000014e1 	.word	0x000014e1
    150c:	000014e1 	.word	0x000014e1

00001510 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1510:	e7fe      	b.n	1510 <Dummy_Handler>
	...

00001514 <Reset_Handler>:
{
    1514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1516:	4a2a      	ldr	r2, [pc, #168]	; (15c0 <Reset_Handler+0xac>)
    1518:	4b2a      	ldr	r3, [pc, #168]	; (15c4 <Reset_Handler+0xb0>)
    151a:	429a      	cmp	r2, r3
    151c:	d011      	beq.n	1542 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    151e:	001a      	movs	r2, r3
    1520:	4b29      	ldr	r3, [pc, #164]	; (15c8 <Reset_Handler+0xb4>)
    1522:	429a      	cmp	r2, r3
    1524:	d20d      	bcs.n	1542 <Reset_Handler+0x2e>
    1526:	4a29      	ldr	r2, [pc, #164]	; (15cc <Reset_Handler+0xb8>)
    1528:	3303      	adds	r3, #3
    152a:	1a9b      	subs	r3, r3, r2
    152c:	089b      	lsrs	r3, r3, #2
    152e:	3301      	adds	r3, #1
    1530:	009b      	lsls	r3, r3, #2
    1532:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1534:	4823      	ldr	r0, [pc, #140]	; (15c4 <Reset_Handler+0xb0>)
    1536:	4922      	ldr	r1, [pc, #136]	; (15c0 <Reset_Handler+0xac>)
    1538:	588c      	ldr	r4, [r1, r2]
    153a:	5084      	str	r4, [r0, r2]
    153c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    153e:	429a      	cmp	r2, r3
    1540:	d1fa      	bne.n	1538 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1542:	4a23      	ldr	r2, [pc, #140]	; (15d0 <Reset_Handler+0xbc>)
    1544:	4b23      	ldr	r3, [pc, #140]	; (15d4 <Reset_Handler+0xc0>)
    1546:	429a      	cmp	r2, r3
    1548:	d20a      	bcs.n	1560 <Reset_Handler+0x4c>
    154a:	43d3      	mvns	r3, r2
    154c:	4921      	ldr	r1, [pc, #132]	; (15d4 <Reset_Handler+0xc0>)
    154e:	185b      	adds	r3, r3, r1
    1550:	2103      	movs	r1, #3
    1552:	438b      	bics	r3, r1
    1554:	3304      	adds	r3, #4
    1556:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1558:	2100      	movs	r1, #0
    155a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    155c:	4293      	cmp	r3, r2
    155e:	d1fc      	bne.n	155a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1560:	4a1d      	ldr	r2, [pc, #116]	; (15d8 <Reset_Handler+0xc4>)
    1562:	21ff      	movs	r1, #255	; 0xff
    1564:	4b1d      	ldr	r3, [pc, #116]	; (15dc <Reset_Handler+0xc8>)
    1566:	438b      	bics	r3, r1
    1568:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    156a:	39fd      	subs	r1, #253	; 0xfd
    156c:	2390      	movs	r3, #144	; 0x90
    156e:	005b      	lsls	r3, r3, #1
    1570:	4a1b      	ldr	r2, [pc, #108]	; (15e0 <Reset_Handler+0xcc>)
    1572:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1574:	4a1b      	ldr	r2, [pc, #108]	; (15e4 <Reset_Handler+0xd0>)
    1576:	78d3      	ldrb	r3, [r2, #3]
    1578:	2503      	movs	r5, #3
    157a:	43ab      	bics	r3, r5
    157c:	2402      	movs	r4, #2
    157e:	4323      	orrs	r3, r4
    1580:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1582:	78d3      	ldrb	r3, [r2, #3]
    1584:	270c      	movs	r7, #12
    1586:	43bb      	bics	r3, r7
    1588:	2608      	movs	r6, #8
    158a:	4333      	orrs	r3, r6
    158c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    158e:	4b16      	ldr	r3, [pc, #88]	; (15e8 <Reset_Handler+0xd4>)
    1590:	7b98      	ldrb	r0, [r3, #14]
    1592:	2230      	movs	r2, #48	; 0x30
    1594:	4390      	bics	r0, r2
    1596:	2220      	movs	r2, #32
    1598:	4310      	orrs	r0, r2
    159a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    159c:	7b99      	ldrb	r1, [r3, #14]
    159e:	43b9      	bics	r1, r7
    15a0:	4331      	orrs	r1, r6
    15a2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    15a4:	7b9a      	ldrb	r2, [r3, #14]
    15a6:	43aa      	bics	r2, r5
    15a8:	4322      	orrs	r2, r4
    15aa:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    15ac:	4a0f      	ldr	r2, [pc, #60]	; (15ec <Reset_Handler+0xd8>)
    15ae:	6853      	ldr	r3, [r2, #4]
    15b0:	2180      	movs	r1, #128	; 0x80
    15b2:	430b      	orrs	r3, r1
    15b4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    15b6:	4b0e      	ldr	r3, [pc, #56]	; (15f0 <Reset_Handler+0xdc>)
    15b8:	4798      	blx	r3
        main();
    15ba:	4b0e      	ldr	r3, [pc, #56]	; (15f4 <Reset_Handler+0xe0>)
    15bc:	4798      	blx	r3
    15be:	e7fe      	b.n	15be <Reset_Handler+0xaa>
    15c0:	00002b00 	.word	0x00002b00
    15c4:	20000000 	.word	0x20000000
    15c8:	20000068 	.word	0x20000068
    15cc:	20000004 	.word	0x20000004
    15d0:	20000068 	.word	0x20000068
    15d4:	2000018c 	.word	0x2000018c
    15d8:	e000ed00 	.word	0xe000ed00
    15dc:	00000000 	.word	0x00000000
    15e0:	41007000 	.word	0x41007000
    15e4:	41005000 	.word	0x41005000
    15e8:	41004800 	.word	0x41004800
    15ec:	41004000 	.word	0x41004000
    15f0:	000019a1 	.word	0x000019a1
    15f4:	000017b5 	.word	0x000017b5

000015f8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    15f8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    15fa:	4a06      	ldr	r2, [pc, #24]	; (1614 <_sbrk+0x1c>)
    15fc:	6812      	ldr	r2, [r2, #0]
    15fe:	2a00      	cmp	r2, #0
    1600:	d004      	beq.n	160c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1602:	4a04      	ldr	r2, [pc, #16]	; (1614 <_sbrk+0x1c>)
    1604:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1606:	18c3      	adds	r3, r0, r3
    1608:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    160a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    160c:	4902      	ldr	r1, [pc, #8]	; (1618 <_sbrk+0x20>)
    160e:	4a01      	ldr	r2, [pc, #4]	; (1614 <_sbrk+0x1c>)
    1610:	6011      	str	r1, [r2, #0]
    1612:	e7f6      	b.n	1602 <_sbrk+0xa>
    1614:	200000c0 	.word	0x200000c0
    1618:	20002190 	.word	0x20002190

0000161c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    161c:	2001      	movs	r0, #1
    161e:	4240      	negs	r0, r0
    1620:	4770      	bx	lr

00001622 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1622:	2380      	movs	r3, #128	; 0x80
    1624:	019b      	lsls	r3, r3, #6
    1626:	604b      	str	r3, [r1, #4]

	return 0;
}
    1628:	2000      	movs	r0, #0
    162a:	4770      	bx	lr

0000162c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    162c:	2001      	movs	r0, #1
    162e:	4770      	bx	lr

00001630 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1630:	2000      	movs	r0, #0
    1632:	4770      	bx	lr

00001634 <usart_read_callback>:

void usart_read_callback(struct usart_module *const usart_module)
{
	//usart_write_buffer_job(&usart_instance,
	//(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
}
    1634:	4770      	bx	lr
	...

00001638 <usart_write_callback>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1638:	2280      	movs	r2, #128	; 0x80
    163a:	0412      	lsls	r2, r2, #16
    163c:	4b01      	ldr	r3, [pc, #4]	; (1644 <usart_write_callback+0xc>)
    163e:	61da      	str	r2, [r3, #28]
void usart_write_callback(struct usart_module *const usart_module)
{
	port_pin_toggle_output_level(LED_0_PIN);
}
    1640:	4770      	bx	lr
    1642:	46c0      	nop			; (mov r8, r8)
    1644:	41004400 	.word	0x41004400

00001648 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1648:	b570      	push	{r4, r5, r6, lr}
    164a:	b082      	sub	sp, #8
    164c:	0005      	movs	r5, r0
    164e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1650:	2200      	movs	r2, #0
    1652:	466b      	mov	r3, sp
    1654:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1656:	4c06      	ldr	r4, [pc, #24]	; (1670 <usart_serial_getchar+0x28>)
    1658:	466b      	mov	r3, sp
    165a:	1d99      	adds	r1, r3, #6
    165c:	0028      	movs	r0, r5
    165e:	47a0      	blx	r4
    1660:	2800      	cmp	r0, #0
    1662:	d1f9      	bne.n	1658 <usart_serial_getchar+0x10>

	*c = temp;
    1664:	466b      	mov	r3, sp
    1666:	3306      	adds	r3, #6
    1668:	881b      	ldrh	r3, [r3, #0]
    166a:	7033      	strb	r3, [r6, #0]
}
    166c:	b002      	add	sp, #8
    166e:	bd70      	pop	{r4, r5, r6, pc}
    1670:	0000088d 	.word	0x0000088d

00001674 <usart_serial_putchar>:
{
    1674:	b570      	push	{r4, r5, r6, lr}
    1676:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1678:	b28c      	uxth	r4, r1
    167a:	4e03      	ldr	r6, [pc, #12]	; (1688 <usart_serial_putchar+0x14>)
    167c:	0021      	movs	r1, r4
    167e:	0028      	movs	r0, r5
    1680:	47b0      	blx	r6
    1682:	2800      	cmp	r0, #0
    1684:	d1fa      	bne.n	167c <usart_serial_putchar+0x8>
}
    1686:	bd70      	pop	{r4, r5, r6, pc}
    1688:	00000861 	.word	0x00000861

0000168c <configure_usart>:

void configure_usart(void)
{
    168c:	b5f0      	push	{r4, r5, r6, r7, lr}
    168e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1690:	2380      	movs	r3, #128	; 0x80
    1692:	05db      	lsls	r3, r3, #23
    1694:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1696:	2300      	movs	r3, #0
    1698:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    169a:	22ff      	movs	r2, #255	; 0xff
    169c:	4669      	mov	r1, sp
    169e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    16a0:	2200      	movs	r2, #0
    16a2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    16a4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    16a6:	2401      	movs	r4, #1
    16a8:	2124      	movs	r1, #36	; 0x24
    16aa:	4668      	mov	r0, sp
    16ac:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    16ae:	3101      	adds	r1, #1
    16b0:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    16b2:	3101      	adds	r1, #1
    16b4:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    16b6:	3101      	adds	r1, #1
    16b8:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    16ba:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    16bc:	3105      	adds	r1, #5
    16be:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    16c0:	3101      	adds	r1, #1
    16c2:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    16c4:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    16c6:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    16c8:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    16ca:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    16cc:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    16ce:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    16d0:	2313      	movs	r3, #19
    16d2:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    16d4:	7742      	strb	r2, [r0, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate    = BAUDRATE;
    16d6:	23e1      	movs	r3, #225	; 0xe1
    16d8:	025b      	lsls	r3, r3, #9
    16da:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    16dc:	23c4      	movs	r3, #196	; 0xc4
    16de:	039b      	lsls	r3, r3, #14
    16e0:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    16e2:	2301      	movs	r3, #1
    16e4:	425b      	negs	r3, r3
    16e6:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    16e8:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    16ea:	4b17      	ldr	r3, [pc, #92]	; (1748 <configure_usart+0xbc>)
    16ec:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    16ee:	4b17      	ldr	r3, [pc, #92]	; (174c <configure_usart+0xc0>)
    16f0:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    16f2:	4d17      	ldr	r5, [pc, #92]	; (1750 <configure_usart+0xc4>)
    16f4:	4b17      	ldr	r3, [pc, #92]	; (1754 <configure_usart+0xc8>)
    16f6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    16f8:	4a17      	ldr	r2, [pc, #92]	; (1758 <configure_usart+0xcc>)
    16fa:	4b18      	ldr	r3, [pc, #96]	; (175c <configure_usart+0xd0>)
    16fc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    16fe:	4a18      	ldr	r2, [pc, #96]	; (1760 <configure_usart+0xd4>)
    1700:	4b18      	ldr	r3, [pc, #96]	; (1764 <configure_usart+0xd8>)
    1702:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1704:	466a      	mov	r2, sp
    1706:	4918      	ldr	r1, [pc, #96]	; (1768 <configure_usart+0xdc>)
    1708:	0028      	movs	r0, r5
    170a:	4b18      	ldr	r3, [pc, #96]	; (176c <configure_usart+0xe0>)
    170c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    170e:	4f18      	ldr	r7, [pc, #96]	; (1770 <configure_usart+0xe4>)
    1710:	683b      	ldr	r3, [r7, #0]
    1712:	6898      	ldr	r0, [r3, #8]
    1714:	2100      	movs	r1, #0
    1716:	4e17      	ldr	r6, [pc, #92]	; (1774 <configure_usart+0xe8>)
    1718:	47b0      	blx	r6
	setbuf(stdin, NULL);
    171a:	683b      	ldr	r3, [r7, #0]
    171c:	6858      	ldr	r0, [r3, #4]
    171e:	2100      	movs	r1, #0
    1720:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1722:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1724:	0030      	movs	r0, r6
    1726:	4b14      	ldr	r3, [pc, #80]	; (1778 <configure_usart+0xec>)
    1728:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    172a:	231f      	movs	r3, #31
    172c:	4018      	ands	r0, r3
    172e:	4084      	lsls	r4, r0
    1730:	4b12      	ldr	r3, [pc, #72]	; (177c <configure_usart+0xf0>)
    1732:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1734:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1736:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1738:	2b00      	cmp	r3, #0
    173a:	d1fc      	bne.n	1736 <configure_usart+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    173c:	6833      	ldr	r3, [r6, #0]
    173e:	2202      	movs	r2, #2
    1740:	4313      	orrs	r3, r2
    1742:	6033      	str	r3, [r6, #0]
	
	//while (usart_init(&usart_instance,
	//EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
	//}
	//usart_enable(&usart_instance);
}
    1744:	b011      	add	sp, #68	; 0x44
    1746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1748:	002a0003 	.word	0x002a0003
    174c:	002b0003 	.word	0x002b0003
    1750:	200000f0 	.word	0x200000f0
    1754:	200000d4 	.word	0x200000d4
    1758:	00001675 	.word	0x00001675
    175c:	200000d0 	.word	0x200000d0
    1760:	00001649 	.word	0x00001649
    1764:	200000cc 	.word	0x200000cc
    1768:	42001800 	.word	0x42001800
    176c:	0000051d 	.word	0x0000051d
    1770:	20000004 	.word	0x20000004
    1774:	00001a2d 	.word	0x00001a2d
    1778:	00000c19 	.word	0x00000c19
    177c:	e000e100 	.word	0xe000e100

00001780 <configure_usart_callbacks>:
void configure_usart_callbacks(void)
{
    1780:	b570      	push	{r4, r5, r6, lr}
	usart_register_callback(&usart_instance,
    1782:	4c08      	ldr	r4, [pc, #32]	; (17a4 <configure_usart_callbacks+0x24>)
    1784:	2200      	movs	r2, #0
    1786:	4908      	ldr	r1, [pc, #32]	; (17a8 <configure_usart_callbacks+0x28>)
    1788:	0020      	movs	r0, r4
    178a:	4d08      	ldr	r5, [pc, #32]	; (17ac <configure_usart_callbacks+0x2c>)
    178c:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    178e:	2201      	movs	r2, #1
    1790:	4907      	ldr	r1, [pc, #28]	; (17b0 <configure_usart_callbacks+0x30>)
    1792:	0020      	movs	r0, r4
    1794:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1796:	2231      	movs	r2, #49	; 0x31
    1798:	5ca3      	ldrb	r3, [r4, r2]
    179a:	2103      	movs	r1, #3
    179c:	430b      	orrs	r3, r1
    179e:	54a3      	strb	r3, [r4, r2]
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    17a0:	bd70      	pop	{r4, r5, r6, pc}
    17a2:	46c0      	nop			; (mov r8, r8)
    17a4:	200000f0 	.word	0x200000f0
    17a8:	00001639 	.word	0x00001639
    17ac:	00000a0d 	.word	0x00000a0d
    17b0:	00001635 	.word	0x00001635

000017b4 <main>:


int main (void)
{
    17b4:	b570      	push	{r4, r5, r6, lr}
    17b6:	b084      	sub	sp, #16
	//Initializing
	system_init();
    17b8:	4b12      	ldr	r3, [pc, #72]	; (1804 <main+0x50>)
    17ba:	4798      	blx	r3
	board_init();
    17bc:	4b12      	ldr	r3, [pc, #72]	; (1808 <main+0x54>)
    17be:	4798      	blx	r3

	configure_usart();
    17c0:	4b12      	ldr	r3, [pc, #72]	; (180c <main+0x58>)
    17c2:	4798      	blx	r3
	configure_usart_callbacks();
    17c4:	4b12      	ldr	r3, [pc, #72]	; (1810 <main+0x5c>)
    17c6:	4798      	blx	r3
	cpu_irq_enable();
    17c8:	2201      	movs	r2, #1
    17ca:	4b12      	ldr	r3, [pc, #72]	; (1814 <main+0x60>)
    17cc:	701a      	strb	r2, [r3, #0]
    17ce:	f3bf 8f5f 	dmb	sy
    17d2:	b662      	cpsie	i
	
    system_interrupt_enable_global();
    uint8_t string[] = "Hello World!\r\n";
    17d4:	4669      	mov	r1, sp
    17d6:	4b10      	ldr	r3, [pc, #64]	; (1818 <main+0x64>)
    17d8:	466a      	mov	r2, sp
    17da:	cb31      	ldmia	r3!, {r0, r4, r5}
    17dc:	c231      	stmia	r2!, {r0, r4, r5}
    17de:	8818      	ldrh	r0, [r3, #0]
    17e0:	8010      	strh	r0, [r2, #0]
    17e2:	789b      	ldrb	r3, [r3, #2]
    17e4:	7093      	strb	r3, [r2, #2]
    usart_write_buffer_wait(&usart_instance, string, sizeof(string));
    17e6:	220f      	movs	r2, #15
    17e8:	480c      	ldr	r0, [pc, #48]	; (181c <main+0x68>)
    17ea:	4b0d      	ldr	r3, [pc, #52]	; (1820 <main+0x6c>)
    17ec:	4798      	blx	r3
	
	printf("Test");
    17ee:	480d      	ldr	r0, [pc, #52]	; (1824 <main+0x70>)
    17f0:	4b0d      	ldr	r3, [pc, #52]	; (1828 <main+0x74>)
    17f2:	4798      	blx	r3
	
    while (true) {
	    usart_read_buffer_job(&usart_instance,
    17f4:	4e0d      	ldr	r6, [pc, #52]	; (182c <main+0x78>)
    17f6:	4d09      	ldr	r5, [pc, #36]	; (181c <main+0x68>)
    17f8:	4c0d      	ldr	r4, [pc, #52]	; (1830 <main+0x7c>)
    17fa:	2264      	movs	r2, #100	; 0x64
    17fc:	0031      	movs	r1, r6
    17fe:	0028      	movs	r0, r5
    1800:	47a0      	blx	r4
    1802:	e7fa      	b.n	17fa <main+0x46>
    1804:	000014e5 	.word	0x000014e5
    1808:	00000d19 	.word	0x00000d19
    180c:	0000168d 	.word	0x0000168d
    1810:	00001781 	.word	0x00001781
    1814:	20000000 	.word	0x20000000
    1818:	00002a38 	.word	0x00002a38
    181c:	200000f0 	.word	0x200000f0
    1820:	000008fd 	.word	0x000008fd
    1824:	00002a30 	.word	0x00002a30
    1828:	000019f9 	.word	0x000019f9
    182c:	20000124 	.word	0x20000124
    1830:	00000a25 	.word	0x00000a25

00001834 <__udivsi3>:
    1834:	2200      	movs	r2, #0
    1836:	0843      	lsrs	r3, r0, #1
    1838:	428b      	cmp	r3, r1
    183a:	d374      	bcc.n	1926 <__udivsi3+0xf2>
    183c:	0903      	lsrs	r3, r0, #4
    183e:	428b      	cmp	r3, r1
    1840:	d35f      	bcc.n	1902 <__udivsi3+0xce>
    1842:	0a03      	lsrs	r3, r0, #8
    1844:	428b      	cmp	r3, r1
    1846:	d344      	bcc.n	18d2 <__udivsi3+0x9e>
    1848:	0b03      	lsrs	r3, r0, #12
    184a:	428b      	cmp	r3, r1
    184c:	d328      	bcc.n	18a0 <__udivsi3+0x6c>
    184e:	0c03      	lsrs	r3, r0, #16
    1850:	428b      	cmp	r3, r1
    1852:	d30d      	bcc.n	1870 <__udivsi3+0x3c>
    1854:	22ff      	movs	r2, #255	; 0xff
    1856:	0209      	lsls	r1, r1, #8
    1858:	ba12      	rev	r2, r2
    185a:	0c03      	lsrs	r3, r0, #16
    185c:	428b      	cmp	r3, r1
    185e:	d302      	bcc.n	1866 <__udivsi3+0x32>
    1860:	1212      	asrs	r2, r2, #8
    1862:	0209      	lsls	r1, r1, #8
    1864:	d065      	beq.n	1932 <__udivsi3+0xfe>
    1866:	0b03      	lsrs	r3, r0, #12
    1868:	428b      	cmp	r3, r1
    186a:	d319      	bcc.n	18a0 <__udivsi3+0x6c>
    186c:	e000      	b.n	1870 <__udivsi3+0x3c>
    186e:	0a09      	lsrs	r1, r1, #8
    1870:	0bc3      	lsrs	r3, r0, #15
    1872:	428b      	cmp	r3, r1
    1874:	d301      	bcc.n	187a <__udivsi3+0x46>
    1876:	03cb      	lsls	r3, r1, #15
    1878:	1ac0      	subs	r0, r0, r3
    187a:	4152      	adcs	r2, r2
    187c:	0b83      	lsrs	r3, r0, #14
    187e:	428b      	cmp	r3, r1
    1880:	d301      	bcc.n	1886 <__udivsi3+0x52>
    1882:	038b      	lsls	r3, r1, #14
    1884:	1ac0      	subs	r0, r0, r3
    1886:	4152      	adcs	r2, r2
    1888:	0b43      	lsrs	r3, r0, #13
    188a:	428b      	cmp	r3, r1
    188c:	d301      	bcc.n	1892 <__udivsi3+0x5e>
    188e:	034b      	lsls	r3, r1, #13
    1890:	1ac0      	subs	r0, r0, r3
    1892:	4152      	adcs	r2, r2
    1894:	0b03      	lsrs	r3, r0, #12
    1896:	428b      	cmp	r3, r1
    1898:	d301      	bcc.n	189e <__udivsi3+0x6a>
    189a:	030b      	lsls	r3, r1, #12
    189c:	1ac0      	subs	r0, r0, r3
    189e:	4152      	adcs	r2, r2
    18a0:	0ac3      	lsrs	r3, r0, #11
    18a2:	428b      	cmp	r3, r1
    18a4:	d301      	bcc.n	18aa <__udivsi3+0x76>
    18a6:	02cb      	lsls	r3, r1, #11
    18a8:	1ac0      	subs	r0, r0, r3
    18aa:	4152      	adcs	r2, r2
    18ac:	0a83      	lsrs	r3, r0, #10
    18ae:	428b      	cmp	r3, r1
    18b0:	d301      	bcc.n	18b6 <__udivsi3+0x82>
    18b2:	028b      	lsls	r3, r1, #10
    18b4:	1ac0      	subs	r0, r0, r3
    18b6:	4152      	adcs	r2, r2
    18b8:	0a43      	lsrs	r3, r0, #9
    18ba:	428b      	cmp	r3, r1
    18bc:	d301      	bcc.n	18c2 <__udivsi3+0x8e>
    18be:	024b      	lsls	r3, r1, #9
    18c0:	1ac0      	subs	r0, r0, r3
    18c2:	4152      	adcs	r2, r2
    18c4:	0a03      	lsrs	r3, r0, #8
    18c6:	428b      	cmp	r3, r1
    18c8:	d301      	bcc.n	18ce <__udivsi3+0x9a>
    18ca:	020b      	lsls	r3, r1, #8
    18cc:	1ac0      	subs	r0, r0, r3
    18ce:	4152      	adcs	r2, r2
    18d0:	d2cd      	bcs.n	186e <__udivsi3+0x3a>
    18d2:	09c3      	lsrs	r3, r0, #7
    18d4:	428b      	cmp	r3, r1
    18d6:	d301      	bcc.n	18dc <__udivsi3+0xa8>
    18d8:	01cb      	lsls	r3, r1, #7
    18da:	1ac0      	subs	r0, r0, r3
    18dc:	4152      	adcs	r2, r2
    18de:	0983      	lsrs	r3, r0, #6
    18e0:	428b      	cmp	r3, r1
    18e2:	d301      	bcc.n	18e8 <__udivsi3+0xb4>
    18e4:	018b      	lsls	r3, r1, #6
    18e6:	1ac0      	subs	r0, r0, r3
    18e8:	4152      	adcs	r2, r2
    18ea:	0943      	lsrs	r3, r0, #5
    18ec:	428b      	cmp	r3, r1
    18ee:	d301      	bcc.n	18f4 <__udivsi3+0xc0>
    18f0:	014b      	lsls	r3, r1, #5
    18f2:	1ac0      	subs	r0, r0, r3
    18f4:	4152      	adcs	r2, r2
    18f6:	0903      	lsrs	r3, r0, #4
    18f8:	428b      	cmp	r3, r1
    18fa:	d301      	bcc.n	1900 <__udivsi3+0xcc>
    18fc:	010b      	lsls	r3, r1, #4
    18fe:	1ac0      	subs	r0, r0, r3
    1900:	4152      	adcs	r2, r2
    1902:	08c3      	lsrs	r3, r0, #3
    1904:	428b      	cmp	r3, r1
    1906:	d301      	bcc.n	190c <__udivsi3+0xd8>
    1908:	00cb      	lsls	r3, r1, #3
    190a:	1ac0      	subs	r0, r0, r3
    190c:	4152      	adcs	r2, r2
    190e:	0883      	lsrs	r3, r0, #2
    1910:	428b      	cmp	r3, r1
    1912:	d301      	bcc.n	1918 <__udivsi3+0xe4>
    1914:	008b      	lsls	r3, r1, #2
    1916:	1ac0      	subs	r0, r0, r3
    1918:	4152      	adcs	r2, r2
    191a:	0843      	lsrs	r3, r0, #1
    191c:	428b      	cmp	r3, r1
    191e:	d301      	bcc.n	1924 <__udivsi3+0xf0>
    1920:	004b      	lsls	r3, r1, #1
    1922:	1ac0      	subs	r0, r0, r3
    1924:	4152      	adcs	r2, r2
    1926:	1a41      	subs	r1, r0, r1
    1928:	d200      	bcs.n	192c <__udivsi3+0xf8>
    192a:	4601      	mov	r1, r0
    192c:	4152      	adcs	r2, r2
    192e:	4610      	mov	r0, r2
    1930:	4770      	bx	lr
    1932:	e7ff      	b.n	1934 <__udivsi3+0x100>
    1934:	b501      	push	{r0, lr}
    1936:	2000      	movs	r0, #0
    1938:	f000 f806 	bl	1948 <__aeabi_idiv0>
    193c:	bd02      	pop	{r1, pc}
    193e:	46c0      	nop			; (mov r8, r8)

00001940 <__aeabi_uidivmod>:
    1940:	2900      	cmp	r1, #0
    1942:	d0f7      	beq.n	1934 <__udivsi3+0x100>
    1944:	e776      	b.n	1834 <__udivsi3>
    1946:	4770      	bx	lr

00001948 <__aeabi_idiv0>:
    1948:	4770      	bx	lr
    194a:	46c0      	nop			; (mov r8, r8)

0000194c <__aeabi_lmul>:
    194c:	b5f0      	push	{r4, r5, r6, r7, lr}
    194e:	46ce      	mov	lr, r9
    1950:	4647      	mov	r7, r8
    1952:	0415      	lsls	r5, r2, #16
    1954:	0c2d      	lsrs	r5, r5, #16
    1956:	002e      	movs	r6, r5
    1958:	b580      	push	{r7, lr}
    195a:	0407      	lsls	r7, r0, #16
    195c:	0c14      	lsrs	r4, r2, #16
    195e:	0c3f      	lsrs	r7, r7, #16
    1960:	4699      	mov	r9, r3
    1962:	0c03      	lsrs	r3, r0, #16
    1964:	437e      	muls	r6, r7
    1966:	435d      	muls	r5, r3
    1968:	4367      	muls	r7, r4
    196a:	4363      	muls	r3, r4
    196c:	197f      	adds	r7, r7, r5
    196e:	0c34      	lsrs	r4, r6, #16
    1970:	19e4      	adds	r4, r4, r7
    1972:	469c      	mov	ip, r3
    1974:	42a5      	cmp	r5, r4
    1976:	d903      	bls.n	1980 <__aeabi_lmul+0x34>
    1978:	2380      	movs	r3, #128	; 0x80
    197a:	025b      	lsls	r3, r3, #9
    197c:	4698      	mov	r8, r3
    197e:	44c4      	add	ip, r8
    1980:	464b      	mov	r3, r9
    1982:	4351      	muls	r1, r2
    1984:	4343      	muls	r3, r0
    1986:	0436      	lsls	r6, r6, #16
    1988:	0c36      	lsrs	r6, r6, #16
    198a:	0c25      	lsrs	r5, r4, #16
    198c:	0424      	lsls	r4, r4, #16
    198e:	4465      	add	r5, ip
    1990:	19a4      	adds	r4, r4, r6
    1992:	1859      	adds	r1, r3, r1
    1994:	1949      	adds	r1, r1, r5
    1996:	0020      	movs	r0, r4
    1998:	bc0c      	pop	{r2, r3}
    199a:	4690      	mov	r8, r2
    199c:	4699      	mov	r9, r3
    199e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000019a0 <__libc_init_array>:
    19a0:	b570      	push	{r4, r5, r6, lr}
    19a2:	2600      	movs	r6, #0
    19a4:	4d0c      	ldr	r5, [pc, #48]	; (19d8 <__libc_init_array+0x38>)
    19a6:	4c0d      	ldr	r4, [pc, #52]	; (19dc <__libc_init_array+0x3c>)
    19a8:	1b64      	subs	r4, r4, r5
    19aa:	10a4      	asrs	r4, r4, #2
    19ac:	42a6      	cmp	r6, r4
    19ae:	d109      	bne.n	19c4 <__libc_init_array+0x24>
    19b0:	2600      	movs	r6, #0
    19b2:	f001 f895 	bl	2ae0 <_init>
    19b6:	4d0a      	ldr	r5, [pc, #40]	; (19e0 <__libc_init_array+0x40>)
    19b8:	4c0a      	ldr	r4, [pc, #40]	; (19e4 <__libc_init_array+0x44>)
    19ba:	1b64      	subs	r4, r4, r5
    19bc:	10a4      	asrs	r4, r4, #2
    19be:	42a6      	cmp	r6, r4
    19c0:	d105      	bne.n	19ce <__libc_init_array+0x2e>
    19c2:	bd70      	pop	{r4, r5, r6, pc}
    19c4:	00b3      	lsls	r3, r6, #2
    19c6:	58eb      	ldr	r3, [r5, r3]
    19c8:	4798      	blx	r3
    19ca:	3601      	adds	r6, #1
    19cc:	e7ee      	b.n	19ac <__libc_init_array+0xc>
    19ce:	00b3      	lsls	r3, r6, #2
    19d0:	58eb      	ldr	r3, [r5, r3]
    19d2:	4798      	blx	r3
    19d4:	3601      	adds	r6, #1
    19d6:	e7f2      	b.n	19be <__libc_init_array+0x1e>
    19d8:	00002aec 	.word	0x00002aec
    19dc:	00002aec 	.word	0x00002aec
    19e0:	00002aec 	.word	0x00002aec
    19e4:	00002af0 	.word	0x00002af0

000019e8 <memset>:
    19e8:	0003      	movs	r3, r0
    19ea:	1882      	adds	r2, r0, r2
    19ec:	4293      	cmp	r3, r2
    19ee:	d100      	bne.n	19f2 <memset+0xa>
    19f0:	4770      	bx	lr
    19f2:	7019      	strb	r1, [r3, #0]
    19f4:	3301      	adds	r3, #1
    19f6:	e7f9      	b.n	19ec <memset+0x4>

000019f8 <iprintf>:
    19f8:	b40f      	push	{r0, r1, r2, r3}
    19fa:	4b0b      	ldr	r3, [pc, #44]	; (1a28 <iprintf+0x30>)
    19fc:	b513      	push	{r0, r1, r4, lr}
    19fe:	681c      	ldr	r4, [r3, #0]
    1a00:	2c00      	cmp	r4, #0
    1a02:	d005      	beq.n	1a10 <iprintf+0x18>
    1a04:	69a3      	ldr	r3, [r4, #24]
    1a06:	2b00      	cmp	r3, #0
    1a08:	d102      	bne.n	1a10 <iprintf+0x18>
    1a0a:	0020      	movs	r0, r4
    1a0c:	f000 f9bc 	bl	1d88 <__sinit>
    1a10:	ab05      	add	r3, sp, #20
    1a12:	9a04      	ldr	r2, [sp, #16]
    1a14:	68a1      	ldr	r1, [r4, #8]
    1a16:	0020      	movs	r0, r4
    1a18:	9301      	str	r3, [sp, #4]
    1a1a:	f000 fb8b 	bl	2134 <_vfiprintf_r>
    1a1e:	bc16      	pop	{r1, r2, r4}
    1a20:	bc08      	pop	{r3}
    1a22:	b004      	add	sp, #16
    1a24:	4718      	bx	r3
    1a26:	46c0      	nop			; (mov r8, r8)
    1a28:	20000004 	.word	0x20000004

00001a2c <setbuf>:
    1a2c:	424a      	negs	r2, r1
    1a2e:	414a      	adcs	r2, r1
    1a30:	2380      	movs	r3, #128	; 0x80
    1a32:	b510      	push	{r4, lr}
    1a34:	0052      	lsls	r2, r2, #1
    1a36:	00db      	lsls	r3, r3, #3
    1a38:	f000 f802 	bl	1a40 <setvbuf>
    1a3c:	bd10      	pop	{r4, pc}
	...

00001a40 <setvbuf>:
    1a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a42:	001d      	movs	r5, r3
    1a44:	4b4f      	ldr	r3, [pc, #316]	; (1b84 <setvbuf+0x144>)
    1a46:	b085      	sub	sp, #20
    1a48:	681e      	ldr	r6, [r3, #0]
    1a4a:	0004      	movs	r4, r0
    1a4c:	000f      	movs	r7, r1
    1a4e:	9200      	str	r2, [sp, #0]
    1a50:	2e00      	cmp	r6, #0
    1a52:	d005      	beq.n	1a60 <setvbuf+0x20>
    1a54:	69b3      	ldr	r3, [r6, #24]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d102      	bne.n	1a60 <setvbuf+0x20>
    1a5a:	0030      	movs	r0, r6
    1a5c:	f000 f994 	bl	1d88 <__sinit>
    1a60:	4b49      	ldr	r3, [pc, #292]	; (1b88 <setvbuf+0x148>)
    1a62:	429c      	cmp	r4, r3
    1a64:	d150      	bne.n	1b08 <setvbuf+0xc8>
    1a66:	6874      	ldr	r4, [r6, #4]
    1a68:	9b00      	ldr	r3, [sp, #0]
    1a6a:	2b02      	cmp	r3, #2
    1a6c:	d005      	beq.n	1a7a <setvbuf+0x3a>
    1a6e:	2b01      	cmp	r3, #1
    1a70:	d900      	bls.n	1a74 <setvbuf+0x34>
    1a72:	e084      	b.n	1b7e <setvbuf+0x13e>
    1a74:	2d00      	cmp	r5, #0
    1a76:	da00      	bge.n	1a7a <setvbuf+0x3a>
    1a78:	e081      	b.n	1b7e <setvbuf+0x13e>
    1a7a:	0021      	movs	r1, r4
    1a7c:	0030      	movs	r0, r6
    1a7e:	f000 f915 	bl	1cac <_fflush_r>
    1a82:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1a84:	2900      	cmp	r1, #0
    1a86:	d008      	beq.n	1a9a <setvbuf+0x5a>
    1a88:	0023      	movs	r3, r4
    1a8a:	3344      	adds	r3, #68	; 0x44
    1a8c:	4299      	cmp	r1, r3
    1a8e:	d002      	beq.n	1a96 <setvbuf+0x56>
    1a90:	0030      	movs	r0, r6
    1a92:	f000 fa7f 	bl	1f94 <_free_r>
    1a96:	2300      	movs	r3, #0
    1a98:	6363      	str	r3, [r4, #52]	; 0x34
    1a9a:	2300      	movs	r3, #0
    1a9c:	61a3      	str	r3, [r4, #24]
    1a9e:	6063      	str	r3, [r4, #4]
    1aa0:	89a3      	ldrh	r3, [r4, #12]
    1aa2:	061b      	lsls	r3, r3, #24
    1aa4:	d503      	bpl.n	1aae <setvbuf+0x6e>
    1aa6:	6921      	ldr	r1, [r4, #16]
    1aa8:	0030      	movs	r0, r6
    1aaa:	f000 fa73 	bl	1f94 <_free_r>
    1aae:	89a3      	ldrh	r3, [r4, #12]
    1ab0:	4a36      	ldr	r2, [pc, #216]	; (1b8c <setvbuf+0x14c>)
    1ab2:	4013      	ands	r3, r2
    1ab4:	81a3      	strh	r3, [r4, #12]
    1ab6:	9b00      	ldr	r3, [sp, #0]
    1ab8:	2b02      	cmp	r3, #2
    1aba:	d05a      	beq.n	1b72 <setvbuf+0x132>
    1abc:	ab03      	add	r3, sp, #12
    1abe:	aa02      	add	r2, sp, #8
    1ac0:	0021      	movs	r1, r4
    1ac2:	0030      	movs	r0, r6
    1ac4:	f000 f9f6 	bl	1eb4 <__swhatbuf_r>
    1ac8:	89a3      	ldrh	r3, [r4, #12]
    1aca:	4318      	orrs	r0, r3
    1acc:	81a0      	strh	r0, [r4, #12]
    1ace:	2d00      	cmp	r5, #0
    1ad0:	d124      	bne.n	1b1c <setvbuf+0xdc>
    1ad2:	9d02      	ldr	r5, [sp, #8]
    1ad4:	0028      	movs	r0, r5
    1ad6:	f000 fa53 	bl	1f80 <malloc>
    1ada:	9501      	str	r5, [sp, #4]
    1adc:	1e07      	subs	r7, r0, #0
    1ade:	d142      	bne.n	1b66 <setvbuf+0x126>
    1ae0:	9b02      	ldr	r3, [sp, #8]
    1ae2:	9301      	str	r3, [sp, #4]
    1ae4:	42ab      	cmp	r3, r5
    1ae6:	d139      	bne.n	1b5c <setvbuf+0x11c>
    1ae8:	2001      	movs	r0, #1
    1aea:	4240      	negs	r0, r0
    1aec:	2302      	movs	r3, #2
    1aee:	89a2      	ldrh	r2, [r4, #12]
    1af0:	4313      	orrs	r3, r2
    1af2:	81a3      	strh	r3, [r4, #12]
    1af4:	2300      	movs	r3, #0
    1af6:	60a3      	str	r3, [r4, #8]
    1af8:	0023      	movs	r3, r4
    1afa:	3347      	adds	r3, #71	; 0x47
    1afc:	6023      	str	r3, [r4, #0]
    1afe:	6123      	str	r3, [r4, #16]
    1b00:	2301      	movs	r3, #1
    1b02:	6163      	str	r3, [r4, #20]
    1b04:	b005      	add	sp, #20
    1b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b08:	4b21      	ldr	r3, [pc, #132]	; (1b90 <setvbuf+0x150>)
    1b0a:	429c      	cmp	r4, r3
    1b0c:	d101      	bne.n	1b12 <setvbuf+0xd2>
    1b0e:	68b4      	ldr	r4, [r6, #8]
    1b10:	e7aa      	b.n	1a68 <setvbuf+0x28>
    1b12:	4b20      	ldr	r3, [pc, #128]	; (1b94 <setvbuf+0x154>)
    1b14:	429c      	cmp	r4, r3
    1b16:	d1a7      	bne.n	1a68 <setvbuf+0x28>
    1b18:	68f4      	ldr	r4, [r6, #12]
    1b1a:	e7a5      	b.n	1a68 <setvbuf+0x28>
    1b1c:	2f00      	cmp	r7, #0
    1b1e:	d0d9      	beq.n	1ad4 <setvbuf+0x94>
    1b20:	69b3      	ldr	r3, [r6, #24]
    1b22:	2b00      	cmp	r3, #0
    1b24:	d102      	bne.n	1b2c <setvbuf+0xec>
    1b26:	0030      	movs	r0, r6
    1b28:	f000 f92e 	bl	1d88 <__sinit>
    1b2c:	9b00      	ldr	r3, [sp, #0]
    1b2e:	2b01      	cmp	r3, #1
    1b30:	d103      	bne.n	1b3a <setvbuf+0xfa>
    1b32:	89a3      	ldrh	r3, [r4, #12]
    1b34:	9a00      	ldr	r2, [sp, #0]
    1b36:	431a      	orrs	r2, r3
    1b38:	81a2      	strh	r2, [r4, #12]
    1b3a:	2008      	movs	r0, #8
    1b3c:	89a3      	ldrh	r3, [r4, #12]
    1b3e:	6027      	str	r7, [r4, #0]
    1b40:	6127      	str	r7, [r4, #16]
    1b42:	6165      	str	r5, [r4, #20]
    1b44:	4018      	ands	r0, r3
    1b46:	d018      	beq.n	1b7a <setvbuf+0x13a>
    1b48:	2001      	movs	r0, #1
    1b4a:	4018      	ands	r0, r3
    1b4c:	2300      	movs	r3, #0
    1b4e:	4298      	cmp	r0, r3
    1b50:	d011      	beq.n	1b76 <setvbuf+0x136>
    1b52:	426d      	negs	r5, r5
    1b54:	60a3      	str	r3, [r4, #8]
    1b56:	61a5      	str	r5, [r4, #24]
    1b58:	0018      	movs	r0, r3
    1b5a:	e7d3      	b.n	1b04 <setvbuf+0xc4>
    1b5c:	9801      	ldr	r0, [sp, #4]
    1b5e:	f000 fa0f 	bl	1f80 <malloc>
    1b62:	1e07      	subs	r7, r0, #0
    1b64:	d0c0      	beq.n	1ae8 <setvbuf+0xa8>
    1b66:	2380      	movs	r3, #128	; 0x80
    1b68:	89a2      	ldrh	r2, [r4, #12]
    1b6a:	9d01      	ldr	r5, [sp, #4]
    1b6c:	4313      	orrs	r3, r2
    1b6e:	81a3      	strh	r3, [r4, #12]
    1b70:	e7d6      	b.n	1b20 <setvbuf+0xe0>
    1b72:	2000      	movs	r0, #0
    1b74:	e7ba      	b.n	1aec <setvbuf+0xac>
    1b76:	60a5      	str	r5, [r4, #8]
    1b78:	e7c4      	b.n	1b04 <setvbuf+0xc4>
    1b7a:	60a0      	str	r0, [r4, #8]
    1b7c:	e7c2      	b.n	1b04 <setvbuf+0xc4>
    1b7e:	2001      	movs	r0, #1
    1b80:	4240      	negs	r0, r0
    1b82:	e7bf      	b.n	1b04 <setvbuf+0xc4>
    1b84:	20000004 	.word	0x20000004
    1b88:	00002a6c 	.word	0x00002a6c
    1b8c:	fffff35c 	.word	0xfffff35c
    1b90:	00002a8c 	.word	0x00002a8c
    1b94:	00002a4c 	.word	0x00002a4c

00001b98 <__sflush_r>:
    1b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1b9a:	898a      	ldrh	r2, [r1, #12]
    1b9c:	0005      	movs	r5, r0
    1b9e:	000c      	movs	r4, r1
    1ba0:	0713      	lsls	r3, r2, #28
    1ba2:	d460      	bmi.n	1c66 <__sflush_r+0xce>
    1ba4:	684b      	ldr	r3, [r1, #4]
    1ba6:	2b00      	cmp	r3, #0
    1ba8:	dc04      	bgt.n	1bb4 <__sflush_r+0x1c>
    1baa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1bac:	2b00      	cmp	r3, #0
    1bae:	dc01      	bgt.n	1bb4 <__sflush_r+0x1c>
    1bb0:	2000      	movs	r0, #0
    1bb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1bb4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1bb6:	2f00      	cmp	r7, #0
    1bb8:	d0fa      	beq.n	1bb0 <__sflush_r+0x18>
    1bba:	2300      	movs	r3, #0
    1bbc:	682e      	ldr	r6, [r5, #0]
    1bbe:	602b      	str	r3, [r5, #0]
    1bc0:	2380      	movs	r3, #128	; 0x80
    1bc2:	015b      	lsls	r3, r3, #5
    1bc4:	401a      	ands	r2, r3
    1bc6:	d034      	beq.n	1c32 <__sflush_r+0x9a>
    1bc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1bca:	89a3      	ldrh	r3, [r4, #12]
    1bcc:	075b      	lsls	r3, r3, #29
    1bce:	d506      	bpl.n	1bde <__sflush_r+0x46>
    1bd0:	6863      	ldr	r3, [r4, #4]
    1bd2:	1ac0      	subs	r0, r0, r3
    1bd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	d001      	beq.n	1bde <__sflush_r+0x46>
    1bda:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1bdc:	1ac0      	subs	r0, r0, r3
    1bde:	0002      	movs	r2, r0
    1be0:	6a21      	ldr	r1, [r4, #32]
    1be2:	2300      	movs	r3, #0
    1be4:	0028      	movs	r0, r5
    1be6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1be8:	47b8      	blx	r7
    1bea:	89a1      	ldrh	r1, [r4, #12]
    1bec:	1c43      	adds	r3, r0, #1
    1bee:	d106      	bne.n	1bfe <__sflush_r+0x66>
    1bf0:	682b      	ldr	r3, [r5, #0]
    1bf2:	2b1d      	cmp	r3, #29
    1bf4:	d831      	bhi.n	1c5a <__sflush_r+0xc2>
    1bf6:	4a2c      	ldr	r2, [pc, #176]	; (1ca8 <__sflush_r+0x110>)
    1bf8:	40da      	lsrs	r2, r3
    1bfa:	07d3      	lsls	r3, r2, #31
    1bfc:	d52d      	bpl.n	1c5a <__sflush_r+0xc2>
    1bfe:	2300      	movs	r3, #0
    1c00:	6063      	str	r3, [r4, #4]
    1c02:	6923      	ldr	r3, [r4, #16]
    1c04:	6023      	str	r3, [r4, #0]
    1c06:	04cb      	lsls	r3, r1, #19
    1c08:	d505      	bpl.n	1c16 <__sflush_r+0x7e>
    1c0a:	1c43      	adds	r3, r0, #1
    1c0c:	d102      	bne.n	1c14 <__sflush_r+0x7c>
    1c0e:	682b      	ldr	r3, [r5, #0]
    1c10:	2b00      	cmp	r3, #0
    1c12:	d100      	bne.n	1c16 <__sflush_r+0x7e>
    1c14:	6560      	str	r0, [r4, #84]	; 0x54
    1c16:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1c18:	602e      	str	r6, [r5, #0]
    1c1a:	2900      	cmp	r1, #0
    1c1c:	d0c8      	beq.n	1bb0 <__sflush_r+0x18>
    1c1e:	0023      	movs	r3, r4
    1c20:	3344      	adds	r3, #68	; 0x44
    1c22:	4299      	cmp	r1, r3
    1c24:	d002      	beq.n	1c2c <__sflush_r+0x94>
    1c26:	0028      	movs	r0, r5
    1c28:	f000 f9b4 	bl	1f94 <_free_r>
    1c2c:	2000      	movs	r0, #0
    1c2e:	6360      	str	r0, [r4, #52]	; 0x34
    1c30:	e7bf      	b.n	1bb2 <__sflush_r+0x1a>
    1c32:	2301      	movs	r3, #1
    1c34:	6a21      	ldr	r1, [r4, #32]
    1c36:	0028      	movs	r0, r5
    1c38:	47b8      	blx	r7
    1c3a:	1c43      	adds	r3, r0, #1
    1c3c:	d1c5      	bne.n	1bca <__sflush_r+0x32>
    1c3e:	682b      	ldr	r3, [r5, #0]
    1c40:	2b00      	cmp	r3, #0
    1c42:	d0c2      	beq.n	1bca <__sflush_r+0x32>
    1c44:	2b1d      	cmp	r3, #29
    1c46:	d001      	beq.n	1c4c <__sflush_r+0xb4>
    1c48:	2b16      	cmp	r3, #22
    1c4a:	d101      	bne.n	1c50 <__sflush_r+0xb8>
    1c4c:	602e      	str	r6, [r5, #0]
    1c4e:	e7af      	b.n	1bb0 <__sflush_r+0x18>
    1c50:	2340      	movs	r3, #64	; 0x40
    1c52:	89a2      	ldrh	r2, [r4, #12]
    1c54:	4313      	orrs	r3, r2
    1c56:	81a3      	strh	r3, [r4, #12]
    1c58:	e7ab      	b.n	1bb2 <__sflush_r+0x1a>
    1c5a:	2340      	movs	r3, #64	; 0x40
    1c5c:	430b      	orrs	r3, r1
    1c5e:	2001      	movs	r0, #1
    1c60:	81a3      	strh	r3, [r4, #12]
    1c62:	4240      	negs	r0, r0
    1c64:	e7a5      	b.n	1bb2 <__sflush_r+0x1a>
    1c66:	690f      	ldr	r7, [r1, #16]
    1c68:	2f00      	cmp	r7, #0
    1c6a:	d0a1      	beq.n	1bb0 <__sflush_r+0x18>
    1c6c:	680b      	ldr	r3, [r1, #0]
    1c6e:	600f      	str	r7, [r1, #0]
    1c70:	1bdb      	subs	r3, r3, r7
    1c72:	9301      	str	r3, [sp, #4]
    1c74:	2300      	movs	r3, #0
    1c76:	0792      	lsls	r2, r2, #30
    1c78:	d100      	bne.n	1c7c <__sflush_r+0xe4>
    1c7a:	694b      	ldr	r3, [r1, #20]
    1c7c:	60a3      	str	r3, [r4, #8]
    1c7e:	9b01      	ldr	r3, [sp, #4]
    1c80:	2b00      	cmp	r3, #0
    1c82:	dc00      	bgt.n	1c86 <__sflush_r+0xee>
    1c84:	e794      	b.n	1bb0 <__sflush_r+0x18>
    1c86:	9b01      	ldr	r3, [sp, #4]
    1c88:	003a      	movs	r2, r7
    1c8a:	6a21      	ldr	r1, [r4, #32]
    1c8c:	0028      	movs	r0, r5
    1c8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1c90:	47b0      	blx	r6
    1c92:	2800      	cmp	r0, #0
    1c94:	dc03      	bgt.n	1c9e <__sflush_r+0x106>
    1c96:	2340      	movs	r3, #64	; 0x40
    1c98:	89a2      	ldrh	r2, [r4, #12]
    1c9a:	4313      	orrs	r3, r2
    1c9c:	e7df      	b.n	1c5e <__sflush_r+0xc6>
    1c9e:	9b01      	ldr	r3, [sp, #4]
    1ca0:	183f      	adds	r7, r7, r0
    1ca2:	1a1b      	subs	r3, r3, r0
    1ca4:	9301      	str	r3, [sp, #4]
    1ca6:	e7ea      	b.n	1c7e <__sflush_r+0xe6>
    1ca8:	20400001 	.word	0x20400001

00001cac <_fflush_r>:
    1cac:	690b      	ldr	r3, [r1, #16]
    1cae:	b570      	push	{r4, r5, r6, lr}
    1cb0:	0005      	movs	r5, r0
    1cb2:	000c      	movs	r4, r1
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d101      	bne.n	1cbc <_fflush_r+0x10>
    1cb8:	2000      	movs	r0, #0
    1cba:	bd70      	pop	{r4, r5, r6, pc}
    1cbc:	2800      	cmp	r0, #0
    1cbe:	d004      	beq.n	1cca <_fflush_r+0x1e>
    1cc0:	6983      	ldr	r3, [r0, #24]
    1cc2:	2b00      	cmp	r3, #0
    1cc4:	d101      	bne.n	1cca <_fflush_r+0x1e>
    1cc6:	f000 f85f 	bl	1d88 <__sinit>
    1cca:	4b0b      	ldr	r3, [pc, #44]	; (1cf8 <_fflush_r+0x4c>)
    1ccc:	429c      	cmp	r4, r3
    1cce:	d109      	bne.n	1ce4 <_fflush_r+0x38>
    1cd0:	686c      	ldr	r4, [r5, #4]
    1cd2:	220c      	movs	r2, #12
    1cd4:	5ea3      	ldrsh	r3, [r4, r2]
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	d0ee      	beq.n	1cb8 <_fflush_r+0xc>
    1cda:	0021      	movs	r1, r4
    1cdc:	0028      	movs	r0, r5
    1cde:	f7ff ff5b 	bl	1b98 <__sflush_r>
    1ce2:	e7ea      	b.n	1cba <_fflush_r+0xe>
    1ce4:	4b05      	ldr	r3, [pc, #20]	; (1cfc <_fflush_r+0x50>)
    1ce6:	429c      	cmp	r4, r3
    1ce8:	d101      	bne.n	1cee <_fflush_r+0x42>
    1cea:	68ac      	ldr	r4, [r5, #8]
    1cec:	e7f1      	b.n	1cd2 <_fflush_r+0x26>
    1cee:	4b04      	ldr	r3, [pc, #16]	; (1d00 <_fflush_r+0x54>)
    1cf0:	429c      	cmp	r4, r3
    1cf2:	d1ee      	bne.n	1cd2 <_fflush_r+0x26>
    1cf4:	68ec      	ldr	r4, [r5, #12]
    1cf6:	e7ec      	b.n	1cd2 <_fflush_r+0x26>
    1cf8:	00002a6c 	.word	0x00002a6c
    1cfc:	00002a8c 	.word	0x00002a8c
    1d00:	00002a4c 	.word	0x00002a4c

00001d04 <_cleanup_r>:
    1d04:	b510      	push	{r4, lr}
    1d06:	4902      	ldr	r1, [pc, #8]	; (1d10 <_cleanup_r+0xc>)
    1d08:	f000 f8b2 	bl	1e70 <_fwalk_reent>
    1d0c:	bd10      	pop	{r4, pc}
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	00001cad 	.word	0x00001cad

00001d14 <std.isra.0>:
    1d14:	2300      	movs	r3, #0
    1d16:	b510      	push	{r4, lr}
    1d18:	0004      	movs	r4, r0
    1d1a:	6003      	str	r3, [r0, #0]
    1d1c:	6043      	str	r3, [r0, #4]
    1d1e:	6083      	str	r3, [r0, #8]
    1d20:	8181      	strh	r1, [r0, #12]
    1d22:	6643      	str	r3, [r0, #100]	; 0x64
    1d24:	81c2      	strh	r2, [r0, #14]
    1d26:	6103      	str	r3, [r0, #16]
    1d28:	6143      	str	r3, [r0, #20]
    1d2a:	6183      	str	r3, [r0, #24]
    1d2c:	0019      	movs	r1, r3
    1d2e:	2208      	movs	r2, #8
    1d30:	305c      	adds	r0, #92	; 0x5c
    1d32:	f7ff fe59 	bl	19e8 <memset>
    1d36:	4b05      	ldr	r3, [pc, #20]	; (1d4c <std.isra.0+0x38>)
    1d38:	6224      	str	r4, [r4, #32]
    1d3a:	6263      	str	r3, [r4, #36]	; 0x24
    1d3c:	4b04      	ldr	r3, [pc, #16]	; (1d50 <std.isra.0+0x3c>)
    1d3e:	62a3      	str	r3, [r4, #40]	; 0x28
    1d40:	4b04      	ldr	r3, [pc, #16]	; (1d54 <std.isra.0+0x40>)
    1d42:	62e3      	str	r3, [r4, #44]	; 0x2c
    1d44:	4b04      	ldr	r3, [pc, #16]	; (1d58 <std.isra.0+0x44>)
    1d46:	6323      	str	r3, [r4, #48]	; 0x30
    1d48:	bd10      	pop	{r4, pc}
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	000026a1 	.word	0x000026a1
    1d50:	000026c9 	.word	0x000026c9
    1d54:	00002701 	.word	0x00002701
    1d58:	0000272d 	.word	0x0000272d

00001d5c <__sfmoreglue>:
    1d5c:	b570      	push	{r4, r5, r6, lr}
    1d5e:	2568      	movs	r5, #104	; 0x68
    1d60:	1e4a      	subs	r2, r1, #1
    1d62:	4355      	muls	r5, r2
    1d64:	000e      	movs	r6, r1
    1d66:	0029      	movs	r1, r5
    1d68:	3174      	adds	r1, #116	; 0x74
    1d6a:	f000 f95d 	bl	2028 <_malloc_r>
    1d6e:	1e04      	subs	r4, r0, #0
    1d70:	d008      	beq.n	1d84 <__sfmoreglue+0x28>
    1d72:	2100      	movs	r1, #0
    1d74:	002a      	movs	r2, r5
    1d76:	6001      	str	r1, [r0, #0]
    1d78:	6046      	str	r6, [r0, #4]
    1d7a:	300c      	adds	r0, #12
    1d7c:	60a0      	str	r0, [r4, #8]
    1d7e:	3268      	adds	r2, #104	; 0x68
    1d80:	f7ff fe32 	bl	19e8 <memset>
    1d84:	0020      	movs	r0, r4
    1d86:	bd70      	pop	{r4, r5, r6, pc}

00001d88 <__sinit>:
    1d88:	6983      	ldr	r3, [r0, #24]
    1d8a:	b513      	push	{r0, r1, r4, lr}
    1d8c:	0004      	movs	r4, r0
    1d8e:	2b00      	cmp	r3, #0
    1d90:	d128      	bne.n	1de4 <__sinit+0x5c>
    1d92:	6483      	str	r3, [r0, #72]	; 0x48
    1d94:	64c3      	str	r3, [r0, #76]	; 0x4c
    1d96:	6503      	str	r3, [r0, #80]	; 0x50
    1d98:	4b13      	ldr	r3, [pc, #76]	; (1de8 <__sinit+0x60>)
    1d9a:	4a14      	ldr	r2, [pc, #80]	; (1dec <__sinit+0x64>)
    1d9c:	681b      	ldr	r3, [r3, #0]
    1d9e:	6282      	str	r2, [r0, #40]	; 0x28
    1da0:	9301      	str	r3, [sp, #4]
    1da2:	4298      	cmp	r0, r3
    1da4:	d101      	bne.n	1daa <__sinit+0x22>
    1da6:	2301      	movs	r3, #1
    1da8:	6183      	str	r3, [r0, #24]
    1daa:	0020      	movs	r0, r4
    1dac:	f000 f820 	bl	1df0 <__sfp>
    1db0:	6060      	str	r0, [r4, #4]
    1db2:	0020      	movs	r0, r4
    1db4:	f000 f81c 	bl	1df0 <__sfp>
    1db8:	60a0      	str	r0, [r4, #8]
    1dba:	0020      	movs	r0, r4
    1dbc:	f000 f818 	bl	1df0 <__sfp>
    1dc0:	2200      	movs	r2, #0
    1dc2:	60e0      	str	r0, [r4, #12]
    1dc4:	2104      	movs	r1, #4
    1dc6:	6860      	ldr	r0, [r4, #4]
    1dc8:	f7ff ffa4 	bl	1d14 <std.isra.0>
    1dcc:	2201      	movs	r2, #1
    1dce:	2109      	movs	r1, #9
    1dd0:	68a0      	ldr	r0, [r4, #8]
    1dd2:	f7ff ff9f 	bl	1d14 <std.isra.0>
    1dd6:	2202      	movs	r2, #2
    1dd8:	2112      	movs	r1, #18
    1dda:	68e0      	ldr	r0, [r4, #12]
    1ddc:	f7ff ff9a 	bl	1d14 <std.isra.0>
    1de0:	2301      	movs	r3, #1
    1de2:	61a3      	str	r3, [r4, #24]
    1de4:	bd13      	pop	{r0, r1, r4, pc}
    1de6:	46c0      	nop			; (mov r8, r8)
    1de8:	00002a48 	.word	0x00002a48
    1dec:	00001d05 	.word	0x00001d05

00001df0 <__sfp>:
    1df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1df2:	4b1e      	ldr	r3, [pc, #120]	; (1e6c <__sfp+0x7c>)
    1df4:	0007      	movs	r7, r0
    1df6:	681e      	ldr	r6, [r3, #0]
    1df8:	69b3      	ldr	r3, [r6, #24]
    1dfa:	2b00      	cmp	r3, #0
    1dfc:	d102      	bne.n	1e04 <__sfp+0x14>
    1dfe:	0030      	movs	r0, r6
    1e00:	f7ff ffc2 	bl	1d88 <__sinit>
    1e04:	3648      	adds	r6, #72	; 0x48
    1e06:	68b4      	ldr	r4, [r6, #8]
    1e08:	6873      	ldr	r3, [r6, #4]
    1e0a:	3b01      	subs	r3, #1
    1e0c:	d504      	bpl.n	1e18 <__sfp+0x28>
    1e0e:	6833      	ldr	r3, [r6, #0]
    1e10:	2b00      	cmp	r3, #0
    1e12:	d007      	beq.n	1e24 <__sfp+0x34>
    1e14:	6836      	ldr	r6, [r6, #0]
    1e16:	e7f6      	b.n	1e06 <__sfp+0x16>
    1e18:	220c      	movs	r2, #12
    1e1a:	5ea5      	ldrsh	r5, [r4, r2]
    1e1c:	2d00      	cmp	r5, #0
    1e1e:	d00d      	beq.n	1e3c <__sfp+0x4c>
    1e20:	3468      	adds	r4, #104	; 0x68
    1e22:	e7f2      	b.n	1e0a <__sfp+0x1a>
    1e24:	2104      	movs	r1, #4
    1e26:	0038      	movs	r0, r7
    1e28:	f7ff ff98 	bl	1d5c <__sfmoreglue>
    1e2c:	6030      	str	r0, [r6, #0]
    1e2e:	2800      	cmp	r0, #0
    1e30:	d1f0      	bne.n	1e14 <__sfp+0x24>
    1e32:	230c      	movs	r3, #12
    1e34:	0004      	movs	r4, r0
    1e36:	603b      	str	r3, [r7, #0]
    1e38:	0020      	movs	r0, r4
    1e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e3c:	2301      	movs	r3, #1
    1e3e:	0020      	movs	r0, r4
    1e40:	425b      	negs	r3, r3
    1e42:	81e3      	strh	r3, [r4, #14]
    1e44:	3302      	adds	r3, #2
    1e46:	81a3      	strh	r3, [r4, #12]
    1e48:	6665      	str	r5, [r4, #100]	; 0x64
    1e4a:	6025      	str	r5, [r4, #0]
    1e4c:	60a5      	str	r5, [r4, #8]
    1e4e:	6065      	str	r5, [r4, #4]
    1e50:	6125      	str	r5, [r4, #16]
    1e52:	6165      	str	r5, [r4, #20]
    1e54:	61a5      	str	r5, [r4, #24]
    1e56:	2208      	movs	r2, #8
    1e58:	0029      	movs	r1, r5
    1e5a:	305c      	adds	r0, #92	; 0x5c
    1e5c:	f7ff fdc4 	bl	19e8 <memset>
    1e60:	6365      	str	r5, [r4, #52]	; 0x34
    1e62:	63a5      	str	r5, [r4, #56]	; 0x38
    1e64:	64a5      	str	r5, [r4, #72]	; 0x48
    1e66:	64e5      	str	r5, [r4, #76]	; 0x4c
    1e68:	e7e6      	b.n	1e38 <__sfp+0x48>
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	00002a48 	.word	0x00002a48

00001e70 <_fwalk_reent>:
    1e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e72:	0004      	movs	r4, r0
    1e74:	0007      	movs	r7, r0
    1e76:	2600      	movs	r6, #0
    1e78:	9101      	str	r1, [sp, #4]
    1e7a:	3448      	adds	r4, #72	; 0x48
    1e7c:	2c00      	cmp	r4, #0
    1e7e:	d101      	bne.n	1e84 <_fwalk_reent+0x14>
    1e80:	0030      	movs	r0, r6
    1e82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1e84:	6863      	ldr	r3, [r4, #4]
    1e86:	68a5      	ldr	r5, [r4, #8]
    1e88:	9300      	str	r3, [sp, #0]
    1e8a:	9b00      	ldr	r3, [sp, #0]
    1e8c:	3b01      	subs	r3, #1
    1e8e:	9300      	str	r3, [sp, #0]
    1e90:	d501      	bpl.n	1e96 <_fwalk_reent+0x26>
    1e92:	6824      	ldr	r4, [r4, #0]
    1e94:	e7f2      	b.n	1e7c <_fwalk_reent+0xc>
    1e96:	89ab      	ldrh	r3, [r5, #12]
    1e98:	2b01      	cmp	r3, #1
    1e9a:	d908      	bls.n	1eae <_fwalk_reent+0x3e>
    1e9c:	220e      	movs	r2, #14
    1e9e:	5eab      	ldrsh	r3, [r5, r2]
    1ea0:	3301      	adds	r3, #1
    1ea2:	d004      	beq.n	1eae <_fwalk_reent+0x3e>
    1ea4:	0029      	movs	r1, r5
    1ea6:	0038      	movs	r0, r7
    1ea8:	9b01      	ldr	r3, [sp, #4]
    1eaa:	4798      	blx	r3
    1eac:	4306      	orrs	r6, r0
    1eae:	3568      	adds	r5, #104	; 0x68
    1eb0:	e7eb      	b.n	1e8a <_fwalk_reent+0x1a>
	...

00001eb4 <__swhatbuf_r>:
    1eb4:	b570      	push	{r4, r5, r6, lr}
    1eb6:	000e      	movs	r6, r1
    1eb8:	001d      	movs	r5, r3
    1eba:	230e      	movs	r3, #14
    1ebc:	5ec9      	ldrsh	r1, [r1, r3]
    1ebe:	b090      	sub	sp, #64	; 0x40
    1ec0:	0014      	movs	r4, r2
    1ec2:	2900      	cmp	r1, #0
    1ec4:	da07      	bge.n	1ed6 <__swhatbuf_r+0x22>
    1ec6:	2300      	movs	r3, #0
    1ec8:	602b      	str	r3, [r5, #0]
    1eca:	89b3      	ldrh	r3, [r6, #12]
    1ecc:	061b      	lsls	r3, r3, #24
    1ece:	d411      	bmi.n	1ef4 <__swhatbuf_r+0x40>
    1ed0:	2380      	movs	r3, #128	; 0x80
    1ed2:	00db      	lsls	r3, r3, #3
    1ed4:	e00f      	b.n	1ef6 <__swhatbuf_r+0x42>
    1ed6:	aa01      	add	r2, sp, #4
    1ed8:	f000 fd20 	bl	291c <_fstat_r>
    1edc:	2800      	cmp	r0, #0
    1ede:	dbf2      	blt.n	1ec6 <__swhatbuf_r+0x12>
    1ee0:	22f0      	movs	r2, #240	; 0xf0
    1ee2:	9b02      	ldr	r3, [sp, #8]
    1ee4:	0212      	lsls	r2, r2, #8
    1ee6:	4013      	ands	r3, r2
    1ee8:	4a05      	ldr	r2, [pc, #20]	; (1f00 <__swhatbuf_r+0x4c>)
    1eea:	189b      	adds	r3, r3, r2
    1eec:	425a      	negs	r2, r3
    1eee:	4153      	adcs	r3, r2
    1ef0:	602b      	str	r3, [r5, #0]
    1ef2:	e7ed      	b.n	1ed0 <__swhatbuf_r+0x1c>
    1ef4:	2340      	movs	r3, #64	; 0x40
    1ef6:	2000      	movs	r0, #0
    1ef8:	6023      	str	r3, [r4, #0]
    1efa:	b010      	add	sp, #64	; 0x40
    1efc:	bd70      	pop	{r4, r5, r6, pc}
    1efe:	46c0      	nop			; (mov r8, r8)
    1f00:	ffffe000 	.word	0xffffe000

00001f04 <__smakebuf_r>:
    1f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1f06:	2602      	movs	r6, #2
    1f08:	898b      	ldrh	r3, [r1, #12]
    1f0a:	0005      	movs	r5, r0
    1f0c:	000c      	movs	r4, r1
    1f0e:	4233      	tst	r3, r6
    1f10:	d006      	beq.n	1f20 <__smakebuf_r+0x1c>
    1f12:	0023      	movs	r3, r4
    1f14:	3347      	adds	r3, #71	; 0x47
    1f16:	6023      	str	r3, [r4, #0]
    1f18:	6123      	str	r3, [r4, #16]
    1f1a:	2301      	movs	r3, #1
    1f1c:	6163      	str	r3, [r4, #20]
    1f1e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1f20:	ab01      	add	r3, sp, #4
    1f22:	466a      	mov	r2, sp
    1f24:	f7ff ffc6 	bl	1eb4 <__swhatbuf_r>
    1f28:	9900      	ldr	r1, [sp, #0]
    1f2a:	0007      	movs	r7, r0
    1f2c:	0028      	movs	r0, r5
    1f2e:	f000 f87b 	bl	2028 <_malloc_r>
    1f32:	2800      	cmp	r0, #0
    1f34:	d106      	bne.n	1f44 <__smakebuf_r+0x40>
    1f36:	220c      	movs	r2, #12
    1f38:	5ea3      	ldrsh	r3, [r4, r2]
    1f3a:	059a      	lsls	r2, r3, #22
    1f3c:	d4ef      	bmi.n	1f1e <__smakebuf_r+0x1a>
    1f3e:	431e      	orrs	r6, r3
    1f40:	81a6      	strh	r6, [r4, #12]
    1f42:	e7e6      	b.n	1f12 <__smakebuf_r+0xe>
    1f44:	4b0d      	ldr	r3, [pc, #52]	; (1f7c <__smakebuf_r+0x78>)
    1f46:	62ab      	str	r3, [r5, #40]	; 0x28
    1f48:	2380      	movs	r3, #128	; 0x80
    1f4a:	89a2      	ldrh	r2, [r4, #12]
    1f4c:	6020      	str	r0, [r4, #0]
    1f4e:	4313      	orrs	r3, r2
    1f50:	81a3      	strh	r3, [r4, #12]
    1f52:	9b00      	ldr	r3, [sp, #0]
    1f54:	6120      	str	r0, [r4, #16]
    1f56:	6163      	str	r3, [r4, #20]
    1f58:	9b01      	ldr	r3, [sp, #4]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d00a      	beq.n	1f74 <__smakebuf_r+0x70>
    1f5e:	230e      	movs	r3, #14
    1f60:	5ee1      	ldrsh	r1, [r4, r3]
    1f62:	0028      	movs	r0, r5
    1f64:	f000 fcec 	bl	2940 <_isatty_r>
    1f68:	2800      	cmp	r0, #0
    1f6a:	d003      	beq.n	1f74 <__smakebuf_r+0x70>
    1f6c:	2301      	movs	r3, #1
    1f6e:	89a2      	ldrh	r2, [r4, #12]
    1f70:	4313      	orrs	r3, r2
    1f72:	81a3      	strh	r3, [r4, #12]
    1f74:	89a0      	ldrh	r0, [r4, #12]
    1f76:	4338      	orrs	r0, r7
    1f78:	81a0      	strh	r0, [r4, #12]
    1f7a:	e7d0      	b.n	1f1e <__smakebuf_r+0x1a>
    1f7c:	00001d05 	.word	0x00001d05

00001f80 <malloc>:
    1f80:	b510      	push	{r4, lr}
    1f82:	4b03      	ldr	r3, [pc, #12]	; (1f90 <malloc+0x10>)
    1f84:	0001      	movs	r1, r0
    1f86:	6818      	ldr	r0, [r3, #0]
    1f88:	f000 f84e 	bl	2028 <_malloc_r>
    1f8c:	bd10      	pop	{r4, pc}
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	20000004 	.word	0x20000004

00001f94 <_free_r>:
    1f94:	b570      	push	{r4, r5, r6, lr}
    1f96:	0005      	movs	r5, r0
    1f98:	2900      	cmp	r1, #0
    1f9a:	d010      	beq.n	1fbe <_free_r+0x2a>
    1f9c:	1f0c      	subs	r4, r1, #4
    1f9e:	6823      	ldr	r3, [r4, #0]
    1fa0:	2b00      	cmp	r3, #0
    1fa2:	da00      	bge.n	1fa6 <_free_r+0x12>
    1fa4:	18e4      	adds	r4, r4, r3
    1fa6:	0028      	movs	r0, r5
    1fa8:	f000 fcfb 	bl	29a2 <__malloc_lock>
    1fac:	4a1d      	ldr	r2, [pc, #116]	; (2024 <STACK_SIZE+0x24>)
    1fae:	6813      	ldr	r3, [r2, #0]
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	d105      	bne.n	1fc0 <_free_r+0x2c>
    1fb4:	6063      	str	r3, [r4, #4]
    1fb6:	6014      	str	r4, [r2, #0]
    1fb8:	0028      	movs	r0, r5
    1fba:	f000 fcf3 	bl	29a4 <__malloc_unlock>
    1fbe:	bd70      	pop	{r4, r5, r6, pc}
    1fc0:	42a3      	cmp	r3, r4
    1fc2:	d909      	bls.n	1fd8 <_free_r+0x44>
    1fc4:	6821      	ldr	r1, [r4, #0]
    1fc6:	1860      	adds	r0, r4, r1
    1fc8:	4283      	cmp	r3, r0
    1fca:	d1f3      	bne.n	1fb4 <_free_r+0x20>
    1fcc:	6818      	ldr	r0, [r3, #0]
    1fce:	685b      	ldr	r3, [r3, #4]
    1fd0:	1841      	adds	r1, r0, r1
    1fd2:	6021      	str	r1, [r4, #0]
    1fd4:	e7ee      	b.n	1fb4 <_free_r+0x20>
    1fd6:	0013      	movs	r3, r2
    1fd8:	685a      	ldr	r2, [r3, #4]
    1fda:	2a00      	cmp	r2, #0
    1fdc:	d001      	beq.n	1fe2 <_free_r+0x4e>
    1fde:	42a2      	cmp	r2, r4
    1fe0:	d9f9      	bls.n	1fd6 <_free_r+0x42>
    1fe2:	6819      	ldr	r1, [r3, #0]
    1fe4:	1858      	adds	r0, r3, r1
    1fe6:	42a0      	cmp	r0, r4
    1fe8:	d10b      	bne.n	2002 <STACK_SIZE+0x2>
    1fea:	6820      	ldr	r0, [r4, #0]
    1fec:	1809      	adds	r1, r1, r0
    1fee:	1858      	adds	r0, r3, r1
    1ff0:	6019      	str	r1, [r3, #0]
    1ff2:	4282      	cmp	r2, r0
    1ff4:	d1e0      	bne.n	1fb8 <_free_r+0x24>
    1ff6:	6810      	ldr	r0, [r2, #0]
    1ff8:	6852      	ldr	r2, [r2, #4]
    1ffa:	1841      	adds	r1, r0, r1
    1ffc:	6019      	str	r1, [r3, #0]
    1ffe:	605a      	str	r2, [r3, #4]
    2000:	e7da      	b.n	1fb8 <_free_r+0x24>
    2002:	42a0      	cmp	r0, r4
    2004:	d902      	bls.n	200c <STACK_SIZE+0xc>
    2006:	230c      	movs	r3, #12
    2008:	602b      	str	r3, [r5, #0]
    200a:	e7d5      	b.n	1fb8 <_free_r+0x24>
    200c:	6821      	ldr	r1, [r4, #0]
    200e:	1860      	adds	r0, r4, r1
    2010:	4282      	cmp	r2, r0
    2012:	d103      	bne.n	201c <STACK_SIZE+0x1c>
    2014:	6810      	ldr	r0, [r2, #0]
    2016:	6852      	ldr	r2, [r2, #4]
    2018:	1841      	adds	r1, r0, r1
    201a:	6021      	str	r1, [r4, #0]
    201c:	6062      	str	r2, [r4, #4]
    201e:	605c      	str	r4, [r3, #4]
    2020:	e7ca      	b.n	1fb8 <_free_r+0x24>
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	200000c4 	.word	0x200000c4

00002028 <_malloc_r>:
    2028:	2303      	movs	r3, #3
    202a:	b570      	push	{r4, r5, r6, lr}
    202c:	1ccd      	adds	r5, r1, #3
    202e:	439d      	bics	r5, r3
    2030:	3508      	adds	r5, #8
    2032:	0006      	movs	r6, r0
    2034:	2d0c      	cmp	r5, #12
    2036:	d21e      	bcs.n	2076 <_malloc_r+0x4e>
    2038:	250c      	movs	r5, #12
    203a:	42a9      	cmp	r1, r5
    203c:	d81d      	bhi.n	207a <_malloc_r+0x52>
    203e:	0030      	movs	r0, r6
    2040:	f000 fcaf 	bl	29a2 <__malloc_lock>
    2044:	4a25      	ldr	r2, [pc, #148]	; (20dc <_malloc_r+0xb4>)
    2046:	6814      	ldr	r4, [r2, #0]
    2048:	0021      	movs	r1, r4
    204a:	2900      	cmp	r1, #0
    204c:	d119      	bne.n	2082 <_malloc_r+0x5a>
    204e:	4c24      	ldr	r4, [pc, #144]	; (20e0 <_malloc_r+0xb8>)
    2050:	6823      	ldr	r3, [r4, #0]
    2052:	2b00      	cmp	r3, #0
    2054:	d103      	bne.n	205e <_malloc_r+0x36>
    2056:	0030      	movs	r0, r6
    2058:	f000 fb10 	bl	267c <_sbrk_r>
    205c:	6020      	str	r0, [r4, #0]
    205e:	0029      	movs	r1, r5
    2060:	0030      	movs	r0, r6
    2062:	f000 fb0b 	bl	267c <_sbrk_r>
    2066:	1c43      	adds	r3, r0, #1
    2068:	d12c      	bne.n	20c4 <_malloc_r+0x9c>
    206a:	230c      	movs	r3, #12
    206c:	0030      	movs	r0, r6
    206e:	6033      	str	r3, [r6, #0]
    2070:	f000 fc98 	bl	29a4 <__malloc_unlock>
    2074:	e003      	b.n	207e <_malloc_r+0x56>
    2076:	2d00      	cmp	r5, #0
    2078:	dadf      	bge.n	203a <_malloc_r+0x12>
    207a:	230c      	movs	r3, #12
    207c:	6033      	str	r3, [r6, #0]
    207e:	2000      	movs	r0, #0
    2080:	bd70      	pop	{r4, r5, r6, pc}
    2082:	680b      	ldr	r3, [r1, #0]
    2084:	1b5b      	subs	r3, r3, r5
    2086:	d41a      	bmi.n	20be <_malloc_r+0x96>
    2088:	2b0b      	cmp	r3, #11
    208a:	d903      	bls.n	2094 <_malloc_r+0x6c>
    208c:	600b      	str	r3, [r1, #0]
    208e:	18cc      	adds	r4, r1, r3
    2090:	6025      	str	r5, [r4, #0]
    2092:	e003      	b.n	209c <_malloc_r+0x74>
    2094:	428c      	cmp	r4, r1
    2096:	d10e      	bne.n	20b6 <_malloc_r+0x8e>
    2098:	6863      	ldr	r3, [r4, #4]
    209a:	6013      	str	r3, [r2, #0]
    209c:	0030      	movs	r0, r6
    209e:	f000 fc81 	bl	29a4 <__malloc_unlock>
    20a2:	0020      	movs	r0, r4
    20a4:	2207      	movs	r2, #7
    20a6:	300b      	adds	r0, #11
    20a8:	1d23      	adds	r3, r4, #4
    20aa:	4390      	bics	r0, r2
    20ac:	1ac3      	subs	r3, r0, r3
    20ae:	d0e7      	beq.n	2080 <_malloc_r+0x58>
    20b0:	425a      	negs	r2, r3
    20b2:	50e2      	str	r2, [r4, r3]
    20b4:	e7e4      	b.n	2080 <_malloc_r+0x58>
    20b6:	684b      	ldr	r3, [r1, #4]
    20b8:	6063      	str	r3, [r4, #4]
    20ba:	000c      	movs	r4, r1
    20bc:	e7ee      	b.n	209c <_malloc_r+0x74>
    20be:	000c      	movs	r4, r1
    20c0:	6849      	ldr	r1, [r1, #4]
    20c2:	e7c2      	b.n	204a <_malloc_r+0x22>
    20c4:	2303      	movs	r3, #3
    20c6:	1cc4      	adds	r4, r0, #3
    20c8:	439c      	bics	r4, r3
    20ca:	42a0      	cmp	r0, r4
    20cc:	d0e0      	beq.n	2090 <_malloc_r+0x68>
    20ce:	1a21      	subs	r1, r4, r0
    20d0:	0030      	movs	r0, r6
    20d2:	f000 fad3 	bl	267c <_sbrk_r>
    20d6:	1c43      	adds	r3, r0, #1
    20d8:	d1da      	bne.n	2090 <_malloc_r+0x68>
    20da:	e7c6      	b.n	206a <_malloc_r+0x42>
    20dc:	200000c4 	.word	0x200000c4
    20e0:	200000c8 	.word	0x200000c8

000020e4 <__sfputc_r>:
    20e4:	6893      	ldr	r3, [r2, #8]
    20e6:	b510      	push	{r4, lr}
    20e8:	3b01      	subs	r3, #1
    20ea:	6093      	str	r3, [r2, #8]
    20ec:	2b00      	cmp	r3, #0
    20ee:	da05      	bge.n	20fc <__sfputc_r+0x18>
    20f0:	6994      	ldr	r4, [r2, #24]
    20f2:	42a3      	cmp	r3, r4
    20f4:	db08      	blt.n	2108 <__sfputc_r+0x24>
    20f6:	b2cb      	uxtb	r3, r1
    20f8:	2b0a      	cmp	r3, #10
    20fa:	d005      	beq.n	2108 <__sfputc_r+0x24>
    20fc:	6813      	ldr	r3, [r2, #0]
    20fe:	1c58      	adds	r0, r3, #1
    2100:	6010      	str	r0, [r2, #0]
    2102:	7019      	strb	r1, [r3, #0]
    2104:	b2c8      	uxtb	r0, r1
    2106:	bd10      	pop	{r4, pc}
    2108:	f000 fb16 	bl	2738 <__swbuf_r>
    210c:	e7fb      	b.n	2106 <__sfputc_r+0x22>

0000210e <__sfputs_r>:
    210e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2110:	0006      	movs	r6, r0
    2112:	000f      	movs	r7, r1
    2114:	0014      	movs	r4, r2
    2116:	18d5      	adds	r5, r2, r3
    2118:	42ac      	cmp	r4, r5
    211a:	d101      	bne.n	2120 <__sfputs_r+0x12>
    211c:	2000      	movs	r0, #0
    211e:	e007      	b.n	2130 <__sfputs_r+0x22>
    2120:	7821      	ldrb	r1, [r4, #0]
    2122:	003a      	movs	r2, r7
    2124:	0030      	movs	r0, r6
    2126:	f7ff ffdd 	bl	20e4 <__sfputc_r>
    212a:	3401      	adds	r4, #1
    212c:	1c43      	adds	r3, r0, #1
    212e:	d1f3      	bne.n	2118 <__sfputs_r+0xa>
    2130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002134 <_vfiprintf_r>:
    2134:	b5f0      	push	{r4, r5, r6, r7, lr}
    2136:	b09f      	sub	sp, #124	; 0x7c
    2138:	0006      	movs	r6, r0
    213a:	000f      	movs	r7, r1
    213c:	0014      	movs	r4, r2
    213e:	9305      	str	r3, [sp, #20]
    2140:	2800      	cmp	r0, #0
    2142:	d004      	beq.n	214e <_vfiprintf_r+0x1a>
    2144:	6983      	ldr	r3, [r0, #24]
    2146:	2b00      	cmp	r3, #0
    2148:	d101      	bne.n	214e <_vfiprintf_r+0x1a>
    214a:	f7ff fe1d 	bl	1d88 <__sinit>
    214e:	4b7f      	ldr	r3, [pc, #508]	; (234c <_vfiprintf_r+0x218>)
    2150:	429f      	cmp	r7, r3
    2152:	d15c      	bne.n	220e <_vfiprintf_r+0xda>
    2154:	6877      	ldr	r7, [r6, #4]
    2156:	89bb      	ldrh	r3, [r7, #12]
    2158:	071b      	lsls	r3, r3, #28
    215a:	d562      	bpl.n	2222 <_vfiprintf_r+0xee>
    215c:	693b      	ldr	r3, [r7, #16]
    215e:	2b00      	cmp	r3, #0
    2160:	d05f      	beq.n	2222 <_vfiprintf_r+0xee>
    2162:	2300      	movs	r3, #0
    2164:	ad06      	add	r5, sp, #24
    2166:	616b      	str	r3, [r5, #20]
    2168:	3320      	adds	r3, #32
    216a:	766b      	strb	r3, [r5, #25]
    216c:	3310      	adds	r3, #16
    216e:	76ab      	strb	r3, [r5, #26]
    2170:	9402      	str	r4, [sp, #8]
    2172:	9c02      	ldr	r4, [sp, #8]
    2174:	7823      	ldrb	r3, [r4, #0]
    2176:	2b00      	cmp	r3, #0
    2178:	d15d      	bne.n	2236 <_vfiprintf_r+0x102>
    217a:	9b02      	ldr	r3, [sp, #8]
    217c:	1ae3      	subs	r3, r4, r3
    217e:	9304      	str	r3, [sp, #16]
    2180:	d00d      	beq.n	219e <_vfiprintf_r+0x6a>
    2182:	9b04      	ldr	r3, [sp, #16]
    2184:	9a02      	ldr	r2, [sp, #8]
    2186:	0039      	movs	r1, r7
    2188:	0030      	movs	r0, r6
    218a:	f7ff ffc0 	bl	210e <__sfputs_r>
    218e:	1c43      	adds	r3, r0, #1
    2190:	d100      	bne.n	2194 <_vfiprintf_r+0x60>
    2192:	e0cc      	b.n	232e <_vfiprintf_r+0x1fa>
    2194:	696a      	ldr	r2, [r5, #20]
    2196:	9b04      	ldr	r3, [sp, #16]
    2198:	4694      	mov	ip, r2
    219a:	4463      	add	r3, ip
    219c:	616b      	str	r3, [r5, #20]
    219e:	7823      	ldrb	r3, [r4, #0]
    21a0:	2b00      	cmp	r3, #0
    21a2:	d100      	bne.n	21a6 <_vfiprintf_r+0x72>
    21a4:	e0c3      	b.n	232e <_vfiprintf_r+0x1fa>
    21a6:	2201      	movs	r2, #1
    21a8:	2300      	movs	r3, #0
    21aa:	4252      	negs	r2, r2
    21ac:	606a      	str	r2, [r5, #4]
    21ae:	a902      	add	r1, sp, #8
    21b0:	3254      	adds	r2, #84	; 0x54
    21b2:	1852      	adds	r2, r2, r1
    21b4:	3401      	adds	r4, #1
    21b6:	602b      	str	r3, [r5, #0]
    21b8:	60eb      	str	r3, [r5, #12]
    21ba:	60ab      	str	r3, [r5, #8]
    21bc:	7013      	strb	r3, [r2, #0]
    21be:	65ab      	str	r3, [r5, #88]	; 0x58
    21c0:	7821      	ldrb	r1, [r4, #0]
    21c2:	2205      	movs	r2, #5
    21c4:	4862      	ldr	r0, [pc, #392]	; (2350 <_vfiprintf_r+0x21c>)
    21c6:	f000 fbe1 	bl	298c <memchr>
    21ca:	1c63      	adds	r3, r4, #1
    21cc:	469c      	mov	ip, r3
    21ce:	2800      	cmp	r0, #0
    21d0:	d135      	bne.n	223e <_vfiprintf_r+0x10a>
    21d2:	6829      	ldr	r1, [r5, #0]
    21d4:	06cb      	lsls	r3, r1, #27
    21d6:	d504      	bpl.n	21e2 <_vfiprintf_r+0xae>
    21d8:	2353      	movs	r3, #83	; 0x53
    21da:	aa02      	add	r2, sp, #8
    21dc:	3020      	adds	r0, #32
    21de:	189b      	adds	r3, r3, r2
    21e0:	7018      	strb	r0, [r3, #0]
    21e2:	070b      	lsls	r3, r1, #28
    21e4:	d504      	bpl.n	21f0 <_vfiprintf_r+0xbc>
    21e6:	2353      	movs	r3, #83	; 0x53
    21e8:	202b      	movs	r0, #43	; 0x2b
    21ea:	aa02      	add	r2, sp, #8
    21ec:	189b      	adds	r3, r3, r2
    21ee:	7018      	strb	r0, [r3, #0]
    21f0:	7823      	ldrb	r3, [r4, #0]
    21f2:	2b2a      	cmp	r3, #42	; 0x2a
    21f4:	d02c      	beq.n	2250 <_vfiprintf_r+0x11c>
    21f6:	2000      	movs	r0, #0
    21f8:	210a      	movs	r1, #10
    21fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    21fc:	7822      	ldrb	r2, [r4, #0]
    21fe:	3a30      	subs	r2, #48	; 0x30
    2200:	2a09      	cmp	r2, #9
    2202:	d800      	bhi.n	2206 <_vfiprintf_r+0xd2>
    2204:	e06b      	b.n	22de <_vfiprintf_r+0x1aa>
    2206:	2800      	cmp	r0, #0
    2208:	d02a      	beq.n	2260 <_vfiprintf_r+0x12c>
    220a:	9309      	str	r3, [sp, #36]	; 0x24
    220c:	e028      	b.n	2260 <_vfiprintf_r+0x12c>
    220e:	4b51      	ldr	r3, [pc, #324]	; (2354 <_vfiprintf_r+0x220>)
    2210:	429f      	cmp	r7, r3
    2212:	d101      	bne.n	2218 <_vfiprintf_r+0xe4>
    2214:	68b7      	ldr	r7, [r6, #8]
    2216:	e79e      	b.n	2156 <_vfiprintf_r+0x22>
    2218:	4b4f      	ldr	r3, [pc, #316]	; (2358 <_vfiprintf_r+0x224>)
    221a:	429f      	cmp	r7, r3
    221c:	d19b      	bne.n	2156 <_vfiprintf_r+0x22>
    221e:	68f7      	ldr	r7, [r6, #12]
    2220:	e799      	b.n	2156 <_vfiprintf_r+0x22>
    2222:	0039      	movs	r1, r7
    2224:	0030      	movs	r0, r6
    2226:	f000 faf1 	bl	280c <__swsetup_r>
    222a:	2800      	cmp	r0, #0
    222c:	d099      	beq.n	2162 <_vfiprintf_r+0x2e>
    222e:	2001      	movs	r0, #1
    2230:	4240      	negs	r0, r0
    2232:	b01f      	add	sp, #124	; 0x7c
    2234:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2236:	2b25      	cmp	r3, #37	; 0x25
    2238:	d09f      	beq.n	217a <_vfiprintf_r+0x46>
    223a:	3401      	adds	r4, #1
    223c:	e79a      	b.n	2174 <_vfiprintf_r+0x40>
    223e:	4b44      	ldr	r3, [pc, #272]	; (2350 <_vfiprintf_r+0x21c>)
    2240:	6829      	ldr	r1, [r5, #0]
    2242:	1ac0      	subs	r0, r0, r3
    2244:	2301      	movs	r3, #1
    2246:	4083      	lsls	r3, r0
    2248:	430b      	orrs	r3, r1
    224a:	602b      	str	r3, [r5, #0]
    224c:	4664      	mov	r4, ip
    224e:	e7b7      	b.n	21c0 <_vfiprintf_r+0x8c>
    2250:	9b05      	ldr	r3, [sp, #20]
    2252:	1d18      	adds	r0, r3, #4
    2254:	681b      	ldr	r3, [r3, #0]
    2256:	9005      	str	r0, [sp, #20]
    2258:	2b00      	cmp	r3, #0
    225a:	db3a      	blt.n	22d2 <_vfiprintf_r+0x19e>
    225c:	9309      	str	r3, [sp, #36]	; 0x24
    225e:	4664      	mov	r4, ip
    2260:	7823      	ldrb	r3, [r4, #0]
    2262:	2b2e      	cmp	r3, #46	; 0x2e
    2264:	d10b      	bne.n	227e <_vfiprintf_r+0x14a>
    2266:	7863      	ldrb	r3, [r4, #1]
    2268:	1c62      	adds	r2, r4, #1
    226a:	2b2a      	cmp	r3, #42	; 0x2a
    226c:	d13f      	bne.n	22ee <_vfiprintf_r+0x1ba>
    226e:	9b05      	ldr	r3, [sp, #20]
    2270:	3402      	adds	r4, #2
    2272:	1d1a      	adds	r2, r3, #4
    2274:	681b      	ldr	r3, [r3, #0]
    2276:	9205      	str	r2, [sp, #20]
    2278:	2b00      	cmp	r3, #0
    227a:	db35      	blt.n	22e8 <_vfiprintf_r+0x1b4>
    227c:	9307      	str	r3, [sp, #28]
    227e:	7821      	ldrb	r1, [r4, #0]
    2280:	2203      	movs	r2, #3
    2282:	4836      	ldr	r0, [pc, #216]	; (235c <_vfiprintf_r+0x228>)
    2284:	f000 fb82 	bl	298c <memchr>
    2288:	2800      	cmp	r0, #0
    228a:	d007      	beq.n	229c <_vfiprintf_r+0x168>
    228c:	4b33      	ldr	r3, [pc, #204]	; (235c <_vfiprintf_r+0x228>)
    228e:	682a      	ldr	r2, [r5, #0]
    2290:	1ac0      	subs	r0, r0, r3
    2292:	2340      	movs	r3, #64	; 0x40
    2294:	4083      	lsls	r3, r0
    2296:	4313      	orrs	r3, r2
    2298:	602b      	str	r3, [r5, #0]
    229a:	3401      	adds	r4, #1
    229c:	7821      	ldrb	r1, [r4, #0]
    229e:	1c63      	adds	r3, r4, #1
    22a0:	2206      	movs	r2, #6
    22a2:	482f      	ldr	r0, [pc, #188]	; (2360 <_vfiprintf_r+0x22c>)
    22a4:	9302      	str	r3, [sp, #8]
    22a6:	7629      	strb	r1, [r5, #24]
    22a8:	f000 fb70 	bl	298c <memchr>
    22ac:	2800      	cmp	r0, #0
    22ae:	d044      	beq.n	233a <_vfiprintf_r+0x206>
    22b0:	4b2c      	ldr	r3, [pc, #176]	; (2364 <_vfiprintf_r+0x230>)
    22b2:	2b00      	cmp	r3, #0
    22b4:	d12f      	bne.n	2316 <_vfiprintf_r+0x1e2>
    22b6:	6829      	ldr	r1, [r5, #0]
    22b8:	9b05      	ldr	r3, [sp, #20]
    22ba:	2207      	movs	r2, #7
    22bc:	05c9      	lsls	r1, r1, #23
    22be:	d528      	bpl.n	2312 <_vfiprintf_r+0x1de>
    22c0:	189b      	adds	r3, r3, r2
    22c2:	4393      	bics	r3, r2
    22c4:	3308      	adds	r3, #8
    22c6:	9305      	str	r3, [sp, #20]
    22c8:	696b      	ldr	r3, [r5, #20]
    22ca:	9a03      	ldr	r2, [sp, #12]
    22cc:	189b      	adds	r3, r3, r2
    22ce:	616b      	str	r3, [r5, #20]
    22d0:	e74f      	b.n	2172 <_vfiprintf_r+0x3e>
    22d2:	425b      	negs	r3, r3
    22d4:	60eb      	str	r3, [r5, #12]
    22d6:	2302      	movs	r3, #2
    22d8:	430b      	orrs	r3, r1
    22da:	602b      	str	r3, [r5, #0]
    22dc:	e7bf      	b.n	225e <_vfiprintf_r+0x12a>
    22de:	434b      	muls	r3, r1
    22e0:	3401      	adds	r4, #1
    22e2:	189b      	adds	r3, r3, r2
    22e4:	2001      	movs	r0, #1
    22e6:	e789      	b.n	21fc <_vfiprintf_r+0xc8>
    22e8:	2301      	movs	r3, #1
    22ea:	425b      	negs	r3, r3
    22ec:	e7c6      	b.n	227c <_vfiprintf_r+0x148>
    22ee:	2300      	movs	r3, #0
    22f0:	0014      	movs	r4, r2
    22f2:	200a      	movs	r0, #10
    22f4:	001a      	movs	r2, r3
    22f6:	606b      	str	r3, [r5, #4]
    22f8:	7821      	ldrb	r1, [r4, #0]
    22fa:	3930      	subs	r1, #48	; 0x30
    22fc:	2909      	cmp	r1, #9
    22fe:	d903      	bls.n	2308 <_vfiprintf_r+0x1d4>
    2300:	2b00      	cmp	r3, #0
    2302:	d0bc      	beq.n	227e <_vfiprintf_r+0x14a>
    2304:	9207      	str	r2, [sp, #28]
    2306:	e7ba      	b.n	227e <_vfiprintf_r+0x14a>
    2308:	4342      	muls	r2, r0
    230a:	3401      	adds	r4, #1
    230c:	1852      	adds	r2, r2, r1
    230e:	2301      	movs	r3, #1
    2310:	e7f2      	b.n	22f8 <_vfiprintf_r+0x1c4>
    2312:	3307      	adds	r3, #7
    2314:	e7d5      	b.n	22c2 <_vfiprintf_r+0x18e>
    2316:	ab05      	add	r3, sp, #20
    2318:	9300      	str	r3, [sp, #0]
    231a:	003a      	movs	r2, r7
    231c:	4b12      	ldr	r3, [pc, #72]	; (2368 <_vfiprintf_r+0x234>)
    231e:	0029      	movs	r1, r5
    2320:	0030      	movs	r0, r6
    2322:	e000      	b.n	2326 <_vfiprintf_r+0x1f2>
    2324:	bf00      	nop
    2326:	9003      	str	r0, [sp, #12]
    2328:	9b03      	ldr	r3, [sp, #12]
    232a:	3301      	adds	r3, #1
    232c:	d1cc      	bne.n	22c8 <_vfiprintf_r+0x194>
    232e:	89bb      	ldrh	r3, [r7, #12]
    2330:	065b      	lsls	r3, r3, #25
    2332:	d500      	bpl.n	2336 <_vfiprintf_r+0x202>
    2334:	e77b      	b.n	222e <_vfiprintf_r+0xfa>
    2336:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2338:	e77b      	b.n	2232 <_vfiprintf_r+0xfe>
    233a:	ab05      	add	r3, sp, #20
    233c:	9300      	str	r3, [sp, #0]
    233e:	003a      	movs	r2, r7
    2340:	4b09      	ldr	r3, [pc, #36]	; (2368 <_vfiprintf_r+0x234>)
    2342:	0029      	movs	r1, r5
    2344:	0030      	movs	r0, r6
    2346:	f000 f87f 	bl	2448 <_printf_i>
    234a:	e7ec      	b.n	2326 <_vfiprintf_r+0x1f2>
    234c:	00002a6c 	.word	0x00002a6c
    2350:	00002aac 	.word	0x00002aac
    2354:	00002a8c 	.word	0x00002a8c
    2358:	00002a4c 	.word	0x00002a4c
    235c:	00002ab2 	.word	0x00002ab2
    2360:	00002ab6 	.word	0x00002ab6
    2364:	00000000 	.word	0x00000000
    2368:	0000210f 	.word	0x0000210f

0000236c <_printf_common>:
    236c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    236e:	0015      	movs	r5, r2
    2370:	9301      	str	r3, [sp, #4]
    2372:	688a      	ldr	r2, [r1, #8]
    2374:	690b      	ldr	r3, [r1, #16]
    2376:	9000      	str	r0, [sp, #0]
    2378:	000c      	movs	r4, r1
    237a:	4293      	cmp	r3, r2
    237c:	da00      	bge.n	2380 <_printf_common+0x14>
    237e:	0013      	movs	r3, r2
    2380:	0022      	movs	r2, r4
    2382:	602b      	str	r3, [r5, #0]
    2384:	3243      	adds	r2, #67	; 0x43
    2386:	7812      	ldrb	r2, [r2, #0]
    2388:	2a00      	cmp	r2, #0
    238a:	d001      	beq.n	2390 <_printf_common+0x24>
    238c:	3301      	adds	r3, #1
    238e:	602b      	str	r3, [r5, #0]
    2390:	6823      	ldr	r3, [r4, #0]
    2392:	069b      	lsls	r3, r3, #26
    2394:	d502      	bpl.n	239c <_printf_common+0x30>
    2396:	682b      	ldr	r3, [r5, #0]
    2398:	3302      	adds	r3, #2
    239a:	602b      	str	r3, [r5, #0]
    239c:	2706      	movs	r7, #6
    239e:	6823      	ldr	r3, [r4, #0]
    23a0:	401f      	ands	r7, r3
    23a2:	d027      	beq.n	23f4 <_printf_common+0x88>
    23a4:	0023      	movs	r3, r4
    23a6:	3343      	adds	r3, #67	; 0x43
    23a8:	781b      	ldrb	r3, [r3, #0]
    23aa:	1e5a      	subs	r2, r3, #1
    23ac:	4193      	sbcs	r3, r2
    23ae:	6822      	ldr	r2, [r4, #0]
    23b0:	0692      	lsls	r2, r2, #26
    23b2:	d430      	bmi.n	2416 <_printf_common+0xaa>
    23b4:	0022      	movs	r2, r4
    23b6:	9901      	ldr	r1, [sp, #4]
    23b8:	3243      	adds	r2, #67	; 0x43
    23ba:	9800      	ldr	r0, [sp, #0]
    23bc:	9e08      	ldr	r6, [sp, #32]
    23be:	47b0      	blx	r6
    23c0:	1c43      	adds	r3, r0, #1
    23c2:	d025      	beq.n	2410 <_printf_common+0xa4>
    23c4:	2306      	movs	r3, #6
    23c6:	6820      	ldr	r0, [r4, #0]
    23c8:	682a      	ldr	r2, [r5, #0]
    23ca:	68e1      	ldr	r1, [r4, #12]
    23cc:	4003      	ands	r3, r0
    23ce:	2500      	movs	r5, #0
    23d0:	2b04      	cmp	r3, #4
    23d2:	d103      	bne.n	23dc <_printf_common+0x70>
    23d4:	1a8d      	subs	r5, r1, r2
    23d6:	43eb      	mvns	r3, r5
    23d8:	17db      	asrs	r3, r3, #31
    23da:	401d      	ands	r5, r3
    23dc:	68a3      	ldr	r3, [r4, #8]
    23de:	6922      	ldr	r2, [r4, #16]
    23e0:	4293      	cmp	r3, r2
    23e2:	dd01      	ble.n	23e8 <_printf_common+0x7c>
    23e4:	1a9b      	subs	r3, r3, r2
    23e6:	18ed      	adds	r5, r5, r3
    23e8:	2700      	movs	r7, #0
    23ea:	42bd      	cmp	r5, r7
    23ec:	d120      	bne.n	2430 <_printf_common+0xc4>
    23ee:	2000      	movs	r0, #0
    23f0:	e010      	b.n	2414 <_printf_common+0xa8>
    23f2:	3701      	adds	r7, #1
    23f4:	68e3      	ldr	r3, [r4, #12]
    23f6:	682a      	ldr	r2, [r5, #0]
    23f8:	1a9b      	subs	r3, r3, r2
    23fa:	429f      	cmp	r7, r3
    23fc:	dad2      	bge.n	23a4 <_printf_common+0x38>
    23fe:	0022      	movs	r2, r4
    2400:	2301      	movs	r3, #1
    2402:	3219      	adds	r2, #25
    2404:	9901      	ldr	r1, [sp, #4]
    2406:	9800      	ldr	r0, [sp, #0]
    2408:	9e08      	ldr	r6, [sp, #32]
    240a:	47b0      	blx	r6
    240c:	1c43      	adds	r3, r0, #1
    240e:	d1f0      	bne.n	23f2 <_printf_common+0x86>
    2410:	2001      	movs	r0, #1
    2412:	4240      	negs	r0, r0
    2414:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2416:	2030      	movs	r0, #48	; 0x30
    2418:	18e1      	adds	r1, r4, r3
    241a:	3143      	adds	r1, #67	; 0x43
    241c:	7008      	strb	r0, [r1, #0]
    241e:	0021      	movs	r1, r4
    2420:	1c5a      	adds	r2, r3, #1
    2422:	3145      	adds	r1, #69	; 0x45
    2424:	7809      	ldrb	r1, [r1, #0]
    2426:	18a2      	adds	r2, r4, r2
    2428:	3243      	adds	r2, #67	; 0x43
    242a:	3302      	adds	r3, #2
    242c:	7011      	strb	r1, [r2, #0]
    242e:	e7c1      	b.n	23b4 <_printf_common+0x48>
    2430:	0022      	movs	r2, r4
    2432:	2301      	movs	r3, #1
    2434:	321a      	adds	r2, #26
    2436:	9901      	ldr	r1, [sp, #4]
    2438:	9800      	ldr	r0, [sp, #0]
    243a:	9e08      	ldr	r6, [sp, #32]
    243c:	47b0      	blx	r6
    243e:	1c43      	adds	r3, r0, #1
    2440:	d0e6      	beq.n	2410 <_printf_common+0xa4>
    2442:	3701      	adds	r7, #1
    2444:	e7d1      	b.n	23ea <_printf_common+0x7e>
	...

00002448 <_printf_i>:
    2448:	b5f0      	push	{r4, r5, r6, r7, lr}
    244a:	b08b      	sub	sp, #44	; 0x2c
    244c:	9206      	str	r2, [sp, #24]
    244e:	000a      	movs	r2, r1
    2450:	3243      	adds	r2, #67	; 0x43
    2452:	9307      	str	r3, [sp, #28]
    2454:	9005      	str	r0, [sp, #20]
    2456:	9204      	str	r2, [sp, #16]
    2458:	7e0a      	ldrb	r2, [r1, #24]
    245a:	000c      	movs	r4, r1
    245c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    245e:	2a6e      	cmp	r2, #110	; 0x6e
    2460:	d100      	bne.n	2464 <_printf_i+0x1c>
    2462:	e08f      	b.n	2584 <_printf_i+0x13c>
    2464:	d817      	bhi.n	2496 <_printf_i+0x4e>
    2466:	2a63      	cmp	r2, #99	; 0x63
    2468:	d02c      	beq.n	24c4 <_printf_i+0x7c>
    246a:	d808      	bhi.n	247e <_printf_i+0x36>
    246c:	2a00      	cmp	r2, #0
    246e:	d100      	bne.n	2472 <_printf_i+0x2a>
    2470:	e099      	b.n	25a6 <_printf_i+0x15e>
    2472:	2a58      	cmp	r2, #88	; 0x58
    2474:	d054      	beq.n	2520 <_printf_i+0xd8>
    2476:	0026      	movs	r6, r4
    2478:	3642      	adds	r6, #66	; 0x42
    247a:	7032      	strb	r2, [r6, #0]
    247c:	e029      	b.n	24d2 <_printf_i+0x8a>
    247e:	2a64      	cmp	r2, #100	; 0x64
    2480:	d001      	beq.n	2486 <_printf_i+0x3e>
    2482:	2a69      	cmp	r2, #105	; 0x69
    2484:	d1f7      	bne.n	2476 <_printf_i+0x2e>
    2486:	6821      	ldr	r1, [r4, #0]
    2488:	681a      	ldr	r2, [r3, #0]
    248a:	0608      	lsls	r0, r1, #24
    248c:	d523      	bpl.n	24d6 <_printf_i+0x8e>
    248e:	1d11      	adds	r1, r2, #4
    2490:	6019      	str	r1, [r3, #0]
    2492:	6815      	ldr	r5, [r2, #0]
    2494:	e025      	b.n	24e2 <_printf_i+0x9a>
    2496:	2a73      	cmp	r2, #115	; 0x73
    2498:	d100      	bne.n	249c <_printf_i+0x54>
    249a:	e088      	b.n	25ae <_printf_i+0x166>
    249c:	d808      	bhi.n	24b0 <_printf_i+0x68>
    249e:	2a6f      	cmp	r2, #111	; 0x6f
    24a0:	d029      	beq.n	24f6 <_printf_i+0xae>
    24a2:	2a70      	cmp	r2, #112	; 0x70
    24a4:	d1e7      	bne.n	2476 <_printf_i+0x2e>
    24a6:	2220      	movs	r2, #32
    24a8:	6809      	ldr	r1, [r1, #0]
    24aa:	430a      	orrs	r2, r1
    24ac:	6022      	str	r2, [r4, #0]
    24ae:	e003      	b.n	24b8 <_printf_i+0x70>
    24b0:	2a75      	cmp	r2, #117	; 0x75
    24b2:	d020      	beq.n	24f6 <_printf_i+0xae>
    24b4:	2a78      	cmp	r2, #120	; 0x78
    24b6:	d1de      	bne.n	2476 <_printf_i+0x2e>
    24b8:	0022      	movs	r2, r4
    24ba:	2178      	movs	r1, #120	; 0x78
    24bc:	3245      	adds	r2, #69	; 0x45
    24be:	7011      	strb	r1, [r2, #0]
    24c0:	4a6c      	ldr	r2, [pc, #432]	; (2674 <_printf_i+0x22c>)
    24c2:	e030      	b.n	2526 <_printf_i+0xde>
    24c4:	000e      	movs	r6, r1
    24c6:	681a      	ldr	r2, [r3, #0]
    24c8:	3642      	adds	r6, #66	; 0x42
    24ca:	1d11      	adds	r1, r2, #4
    24cc:	6019      	str	r1, [r3, #0]
    24ce:	6813      	ldr	r3, [r2, #0]
    24d0:	7033      	strb	r3, [r6, #0]
    24d2:	2301      	movs	r3, #1
    24d4:	e079      	b.n	25ca <_printf_i+0x182>
    24d6:	0649      	lsls	r1, r1, #25
    24d8:	d5d9      	bpl.n	248e <_printf_i+0x46>
    24da:	1d11      	adds	r1, r2, #4
    24dc:	6019      	str	r1, [r3, #0]
    24de:	2300      	movs	r3, #0
    24e0:	5ed5      	ldrsh	r5, [r2, r3]
    24e2:	2d00      	cmp	r5, #0
    24e4:	da03      	bge.n	24ee <_printf_i+0xa6>
    24e6:	232d      	movs	r3, #45	; 0x2d
    24e8:	9a04      	ldr	r2, [sp, #16]
    24ea:	426d      	negs	r5, r5
    24ec:	7013      	strb	r3, [r2, #0]
    24ee:	4b62      	ldr	r3, [pc, #392]	; (2678 <_printf_i+0x230>)
    24f0:	270a      	movs	r7, #10
    24f2:	9303      	str	r3, [sp, #12]
    24f4:	e02f      	b.n	2556 <_printf_i+0x10e>
    24f6:	6820      	ldr	r0, [r4, #0]
    24f8:	6819      	ldr	r1, [r3, #0]
    24fa:	0605      	lsls	r5, r0, #24
    24fc:	d503      	bpl.n	2506 <_printf_i+0xbe>
    24fe:	1d08      	adds	r0, r1, #4
    2500:	6018      	str	r0, [r3, #0]
    2502:	680d      	ldr	r5, [r1, #0]
    2504:	e005      	b.n	2512 <_printf_i+0xca>
    2506:	0640      	lsls	r0, r0, #25
    2508:	d5f9      	bpl.n	24fe <_printf_i+0xb6>
    250a:	680d      	ldr	r5, [r1, #0]
    250c:	1d08      	adds	r0, r1, #4
    250e:	6018      	str	r0, [r3, #0]
    2510:	b2ad      	uxth	r5, r5
    2512:	4b59      	ldr	r3, [pc, #356]	; (2678 <_printf_i+0x230>)
    2514:	2708      	movs	r7, #8
    2516:	9303      	str	r3, [sp, #12]
    2518:	2a6f      	cmp	r2, #111	; 0x6f
    251a:	d018      	beq.n	254e <_printf_i+0x106>
    251c:	270a      	movs	r7, #10
    251e:	e016      	b.n	254e <_printf_i+0x106>
    2520:	3145      	adds	r1, #69	; 0x45
    2522:	700a      	strb	r2, [r1, #0]
    2524:	4a54      	ldr	r2, [pc, #336]	; (2678 <_printf_i+0x230>)
    2526:	9203      	str	r2, [sp, #12]
    2528:	681a      	ldr	r2, [r3, #0]
    252a:	6821      	ldr	r1, [r4, #0]
    252c:	1d10      	adds	r0, r2, #4
    252e:	6018      	str	r0, [r3, #0]
    2530:	6815      	ldr	r5, [r2, #0]
    2532:	0608      	lsls	r0, r1, #24
    2534:	d522      	bpl.n	257c <_printf_i+0x134>
    2536:	07cb      	lsls	r3, r1, #31
    2538:	d502      	bpl.n	2540 <_printf_i+0xf8>
    253a:	2320      	movs	r3, #32
    253c:	4319      	orrs	r1, r3
    253e:	6021      	str	r1, [r4, #0]
    2540:	2710      	movs	r7, #16
    2542:	2d00      	cmp	r5, #0
    2544:	d103      	bne.n	254e <_printf_i+0x106>
    2546:	2320      	movs	r3, #32
    2548:	6822      	ldr	r2, [r4, #0]
    254a:	439a      	bics	r2, r3
    254c:	6022      	str	r2, [r4, #0]
    254e:	0023      	movs	r3, r4
    2550:	2200      	movs	r2, #0
    2552:	3343      	adds	r3, #67	; 0x43
    2554:	701a      	strb	r2, [r3, #0]
    2556:	6863      	ldr	r3, [r4, #4]
    2558:	60a3      	str	r3, [r4, #8]
    255a:	2b00      	cmp	r3, #0
    255c:	db5c      	blt.n	2618 <_printf_i+0x1d0>
    255e:	2204      	movs	r2, #4
    2560:	6821      	ldr	r1, [r4, #0]
    2562:	4391      	bics	r1, r2
    2564:	6021      	str	r1, [r4, #0]
    2566:	2d00      	cmp	r5, #0
    2568:	d158      	bne.n	261c <_printf_i+0x1d4>
    256a:	9e04      	ldr	r6, [sp, #16]
    256c:	2b00      	cmp	r3, #0
    256e:	d064      	beq.n	263a <_printf_i+0x1f2>
    2570:	0026      	movs	r6, r4
    2572:	9b03      	ldr	r3, [sp, #12]
    2574:	3642      	adds	r6, #66	; 0x42
    2576:	781b      	ldrb	r3, [r3, #0]
    2578:	7033      	strb	r3, [r6, #0]
    257a:	e05e      	b.n	263a <_printf_i+0x1f2>
    257c:	0648      	lsls	r0, r1, #25
    257e:	d5da      	bpl.n	2536 <_printf_i+0xee>
    2580:	b2ad      	uxth	r5, r5
    2582:	e7d8      	b.n	2536 <_printf_i+0xee>
    2584:	6809      	ldr	r1, [r1, #0]
    2586:	681a      	ldr	r2, [r3, #0]
    2588:	0608      	lsls	r0, r1, #24
    258a:	d505      	bpl.n	2598 <_printf_i+0x150>
    258c:	1d11      	adds	r1, r2, #4
    258e:	6019      	str	r1, [r3, #0]
    2590:	6813      	ldr	r3, [r2, #0]
    2592:	6962      	ldr	r2, [r4, #20]
    2594:	601a      	str	r2, [r3, #0]
    2596:	e006      	b.n	25a6 <_printf_i+0x15e>
    2598:	0649      	lsls	r1, r1, #25
    259a:	d5f7      	bpl.n	258c <_printf_i+0x144>
    259c:	1d11      	adds	r1, r2, #4
    259e:	6019      	str	r1, [r3, #0]
    25a0:	6813      	ldr	r3, [r2, #0]
    25a2:	8aa2      	ldrh	r2, [r4, #20]
    25a4:	801a      	strh	r2, [r3, #0]
    25a6:	2300      	movs	r3, #0
    25a8:	9e04      	ldr	r6, [sp, #16]
    25aa:	6123      	str	r3, [r4, #16]
    25ac:	e054      	b.n	2658 <_printf_i+0x210>
    25ae:	681a      	ldr	r2, [r3, #0]
    25b0:	1d11      	adds	r1, r2, #4
    25b2:	6019      	str	r1, [r3, #0]
    25b4:	6816      	ldr	r6, [r2, #0]
    25b6:	2100      	movs	r1, #0
    25b8:	6862      	ldr	r2, [r4, #4]
    25ba:	0030      	movs	r0, r6
    25bc:	f000 f9e6 	bl	298c <memchr>
    25c0:	2800      	cmp	r0, #0
    25c2:	d001      	beq.n	25c8 <_printf_i+0x180>
    25c4:	1b80      	subs	r0, r0, r6
    25c6:	6060      	str	r0, [r4, #4]
    25c8:	6863      	ldr	r3, [r4, #4]
    25ca:	6123      	str	r3, [r4, #16]
    25cc:	2300      	movs	r3, #0
    25ce:	9a04      	ldr	r2, [sp, #16]
    25d0:	7013      	strb	r3, [r2, #0]
    25d2:	e041      	b.n	2658 <_printf_i+0x210>
    25d4:	6923      	ldr	r3, [r4, #16]
    25d6:	0032      	movs	r2, r6
    25d8:	9906      	ldr	r1, [sp, #24]
    25da:	9805      	ldr	r0, [sp, #20]
    25dc:	9d07      	ldr	r5, [sp, #28]
    25de:	47a8      	blx	r5
    25e0:	1c43      	adds	r3, r0, #1
    25e2:	d043      	beq.n	266c <_printf_i+0x224>
    25e4:	6823      	ldr	r3, [r4, #0]
    25e6:	2500      	movs	r5, #0
    25e8:	079b      	lsls	r3, r3, #30
    25ea:	d40f      	bmi.n	260c <_printf_i+0x1c4>
    25ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25ee:	68e0      	ldr	r0, [r4, #12]
    25f0:	4298      	cmp	r0, r3
    25f2:	da3d      	bge.n	2670 <_printf_i+0x228>
    25f4:	0018      	movs	r0, r3
    25f6:	e03b      	b.n	2670 <_printf_i+0x228>
    25f8:	0022      	movs	r2, r4
    25fa:	2301      	movs	r3, #1
    25fc:	3219      	adds	r2, #25
    25fe:	9906      	ldr	r1, [sp, #24]
    2600:	9805      	ldr	r0, [sp, #20]
    2602:	9e07      	ldr	r6, [sp, #28]
    2604:	47b0      	blx	r6
    2606:	1c43      	adds	r3, r0, #1
    2608:	d030      	beq.n	266c <_printf_i+0x224>
    260a:	3501      	adds	r5, #1
    260c:	68e3      	ldr	r3, [r4, #12]
    260e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2610:	1a9b      	subs	r3, r3, r2
    2612:	429d      	cmp	r5, r3
    2614:	dbf0      	blt.n	25f8 <_printf_i+0x1b0>
    2616:	e7e9      	b.n	25ec <_printf_i+0x1a4>
    2618:	2d00      	cmp	r5, #0
    261a:	d0a9      	beq.n	2570 <_printf_i+0x128>
    261c:	9e04      	ldr	r6, [sp, #16]
    261e:	0028      	movs	r0, r5
    2620:	0039      	movs	r1, r7
    2622:	f7ff f98d 	bl	1940 <__aeabi_uidivmod>
    2626:	9b03      	ldr	r3, [sp, #12]
    2628:	3e01      	subs	r6, #1
    262a:	5c5b      	ldrb	r3, [r3, r1]
    262c:	0028      	movs	r0, r5
    262e:	7033      	strb	r3, [r6, #0]
    2630:	0039      	movs	r1, r7
    2632:	f7ff f8ff 	bl	1834 <__udivsi3>
    2636:	1e05      	subs	r5, r0, #0
    2638:	d1f1      	bne.n	261e <_printf_i+0x1d6>
    263a:	2f08      	cmp	r7, #8
    263c:	d109      	bne.n	2652 <_printf_i+0x20a>
    263e:	6823      	ldr	r3, [r4, #0]
    2640:	07db      	lsls	r3, r3, #31
    2642:	d506      	bpl.n	2652 <_printf_i+0x20a>
    2644:	6863      	ldr	r3, [r4, #4]
    2646:	6922      	ldr	r2, [r4, #16]
    2648:	4293      	cmp	r3, r2
    264a:	dc02      	bgt.n	2652 <_printf_i+0x20a>
    264c:	2330      	movs	r3, #48	; 0x30
    264e:	3e01      	subs	r6, #1
    2650:	7033      	strb	r3, [r6, #0]
    2652:	9b04      	ldr	r3, [sp, #16]
    2654:	1b9b      	subs	r3, r3, r6
    2656:	6123      	str	r3, [r4, #16]
    2658:	9b07      	ldr	r3, [sp, #28]
    265a:	aa09      	add	r2, sp, #36	; 0x24
    265c:	9300      	str	r3, [sp, #0]
    265e:	0021      	movs	r1, r4
    2660:	9b06      	ldr	r3, [sp, #24]
    2662:	9805      	ldr	r0, [sp, #20]
    2664:	f7ff fe82 	bl	236c <_printf_common>
    2668:	1c43      	adds	r3, r0, #1
    266a:	d1b3      	bne.n	25d4 <_printf_i+0x18c>
    266c:	2001      	movs	r0, #1
    266e:	4240      	negs	r0, r0
    2670:	b00b      	add	sp, #44	; 0x2c
    2672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2674:	00002ace 	.word	0x00002ace
    2678:	00002abd 	.word	0x00002abd

0000267c <_sbrk_r>:
    267c:	2300      	movs	r3, #0
    267e:	b570      	push	{r4, r5, r6, lr}
    2680:	4c06      	ldr	r4, [pc, #24]	; (269c <_sbrk_r+0x20>)
    2682:	0005      	movs	r5, r0
    2684:	0008      	movs	r0, r1
    2686:	6023      	str	r3, [r4, #0]
    2688:	f7fe ffb6 	bl	15f8 <_sbrk>
    268c:	1c43      	adds	r3, r0, #1
    268e:	d103      	bne.n	2698 <_sbrk_r+0x1c>
    2690:	6823      	ldr	r3, [r4, #0]
    2692:	2b00      	cmp	r3, #0
    2694:	d000      	beq.n	2698 <_sbrk_r+0x1c>
    2696:	602b      	str	r3, [r5, #0]
    2698:	bd70      	pop	{r4, r5, r6, pc}
    269a:	46c0      	nop			; (mov r8, r8)
    269c:	20000188 	.word	0x20000188

000026a0 <__sread>:
    26a0:	b570      	push	{r4, r5, r6, lr}
    26a2:	000c      	movs	r4, r1
    26a4:	250e      	movs	r5, #14
    26a6:	5f49      	ldrsh	r1, [r1, r5]
    26a8:	f000 f97e 	bl	29a8 <_read_r>
    26ac:	2800      	cmp	r0, #0
    26ae:	db03      	blt.n	26b8 <__sread+0x18>
    26b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    26b2:	181b      	adds	r3, r3, r0
    26b4:	6563      	str	r3, [r4, #84]	; 0x54
    26b6:	bd70      	pop	{r4, r5, r6, pc}
    26b8:	89a3      	ldrh	r3, [r4, #12]
    26ba:	4a02      	ldr	r2, [pc, #8]	; (26c4 <__sread+0x24>)
    26bc:	4013      	ands	r3, r2
    26be:	81a3      	strh	r3, [r4, #12]
    26c0:	e7f9      	b.n	26b6 <__sread+0x16>
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	ffffefff 	.word	0xffffefff

000026c8 <__swrite>:
    26c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26ca:	001f      	movs	r7, r3
    26cc:	898b      	ldrh	r3, [r1, #12]
    26ce:	0005      	movs	r5, r0
    26d0:	000c      	movs	r4, r1
    26d2:	0016      	movs	r6, r2
    26d4:	05db      	lsls	r3, r3, #23
    26d6:	d505      	bpl.n	26e4 <__swrite+0x1c>
    26d8:	230e      	movs	r3, #14
    26da:	5ec9      	ldrsh	r1, [r1, r3]
    26dc:	2200      	movs	r2, #0
    26de:	2302      	movs	r3, #2
    26e0:	f000 f940 	bl	2964 <_lseek_r>
    26e4:	89a3      	ldrh	r3, [r4, #12]
    26e6:	4a05      	ldr	r2, [pc, #20]	; (26fc <__swrite+0x34>)
    26e8:	0028      	movs	r0, r5
    26ea:	4013      	ands	r3, r2
    26ec:	81a3      	strh	r3, [r4, #12]
    26ee:	0032      	movs	r2, r6
    26f0:	230e      	movs	r3, #14
    26f2:	5ee1      	ldrsh	r1, [r4, r3]
    26f4:	003b      	movs	r3, r7
    26f6:	f000 f875 	bl	27e4 <_write_r>
    26fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26fc:	ffffefff 	.word	0xffffefff

00002700 <__sseek>:
    2700:	b570      	push	{r4, r5, r6, lr}
    2702:	000c      	movs	r4, r1
    2704:	250e      	movs	r5, #14
    2706:	5f49      	ldrsh	r1, [r1, r5]
    2708:	f000 f92c 	bl	2964 <_lseek_r>
    270c:	89a3      	ldrh	r3, [r4, #12]
    270e:	1c42      	adds	r2, r0, #1
    2710:	d103      	bne.n	271a <__sseek+0x1a>
    2712:	4a05      	ldr	r2, [pc, #20]	; (2728 <__sseek+0x28>)
    2714:	4013      	ands	r3, r2
    2716:	81a3      	strh	r3, [r4, #12]
    2718:	bd70      	pop	{r4, r5, r6, pc}
    271a:	2280      	movs	r2, #128	; 0x80
    271c:	0152      	lsls	r2, r2, #5
    271e:	4313      	orrs	r3, r2
    2720:	81a3      	strh	r3, [r4, #12]
    2722:	6560      	str	r0, [r4, #84]	; 0x54
    2724:	e7f8      	b.n	2718 <__sseek+0x18>
    2726:	46c0      	nop			; (mov r8, r8)
    2728:	ffffefff 	.word	0xffffefff

0000272c <__sclose>:
    272c:	b510      	push	{r4, lr}
    272e:	230e      	movs	r3, #14
    2730:	5ec9      	ldrsh	r1, [r1, r3]
    2732:	f000 f8e1 	bl	28f8 <_close_r>
    2736:	bd10      	pop	{r4, pc}

00002738 <__swbuf_r>:
    2738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    273a:	0005      	movs	r5, r0
    273c:	000e      	movs	r6, r1
    273e:	0014      	movs	r4, r2
    2740:	2800      	cmp	r0, #0
    2742:	d004      	beq.n	274e <__swbuf_r+0x16>
    2744:	6983      	ldr	r3, [r0, #24]
    2746:	2b00      	cmp	r3, #0
    2748:	d101      	bne.n	274e <__swbuf_r+0x16>
    274a:	f7ff fb1d 	bl	1d88 <__sinit>
    274e:	4b22      	ldr	r3, [pc, #136]	; (27d8 <__swbuf_r+0xa0>)
    2750:	429c      	cmp	r4, r3
    2752:	d12d      	bne.n	27b0 <__swbuf_r+0x78>
    2754:	686c      	ldr	r4, [r5, #4]
    2756:	69a3      	ldr	r3, [r4, #24]
    2758:	60a3      	str	r3, [r4, #8]
    275a:	89a3      	ldrh	r3, [r4, #12]
    275c:	071b      	lsls	r3, r3, #28
    275e:	d531      	bpl.n	27c4 <__swbuf_r+0x8c>
    2760:	6923      	ldr	r3, [r4, #16]
    2762:	2b00      	cmp	r3, #0
    2764:	d02e      	beq.n	27c4 <__swbuf_r+0x8c>
    2766:	6823      	ldr	r3, [r4, #0]
    2768:	6922      	ldr	r2, [r4, #16]
    276a:	b2f7      	uxtb	r7, r6
    276c:	1a98      	subs	r0, r3, r2
    276e:	6963      	ldr	r3, [r4, #20]
    2770:	b2f6      	uxtb	r6, r6
    2772:	4298      	cmp	r0, r3
    2774:	db05      	blt.n	2782 <__swbuf_r+0x4a>
    2776:	0021      	movs	r1, r4
    2778:	0028      	movs	r0, r5
    277a:	f7ff fa97 	bl	1cac <_fflush_r>
    277e:	2800      	cmp	r0, #0
    2780:	d126      	bne.n	27d0 <__swbuf_r+0x98>
    2782:	68a3      	ldr	r3, [r4, #8]
    2784:	3001      	adds	r0, #1
    2786:	3b01      	subs	r3, #1
    2788:	60a3      	str	r3, [r4, #8]
    278a:	6823      	ldr	r3, [r4, #0]
    278c:	1c5a      	adds	r2, r3, #1
    278e:	6022      	str	r2, [r4, #0]
    2790:	701f      	strb	r7, [r3, #0]
    2792:	6963      	ldr	r3, [r4, #20]
    2794:	4298      	cmp	r0, r3
    2796:	d004      	beq.n	27a2 <__swbuf_r+0x6a>
    2798:	89a3      	ldrh	r3, [r4, #12]
    279a:	07db      	lsls	r3, r3, #31
    279c:	d51a      	bpl.n	27d4 <__swbuf_r+0x9c>
    279e:	2e0a      	cmp	r6, #10
    27a0:	d118      	bne.n	27d4 <__swbuf_r+0x9c>
    27a2:	0021      	movs	r1, r4
    27a4:	0028      	movs	r0, r5
    27a6:	f7ff fa81 	bl	1cac <_fflush_r>
    27aa:	2800      	cmp	r0, #0
    27ac:	d012      	beq.n	27d4 <__swbuf_r+0x9c>
    27ae:	e00f      	b.n	27d0 <__swbuf_r+0x98>
    27b0:	4b0a      	ldr	r3, [pc, #40]	; (27dc <__swbuf_r+0xa4>)
    27b2:	429c      	cmp	r4, r3
    27b4:	d101      	bne.n	27ba <__swbuf_r+0x82>
    27b6:	68ac      	ldr	r4, [r5, #8]
    27b8:	e7cd      	b.n	2756 <__swbuf_r+0x1e>
    27ba:	4b09      	ldr	r3, [pc, #36]	; (27e0 <__swbuf_r+0xa8>)
    27bc:	429c      	cmp	r4, r3
    27be:	d1ca      	bne.n	2756 <__swbuf_r+0x1e>
    27c0:	68ec      	ldr	r4, [r5, #12]
    27c2:	e7c8      	b.n	2756 <__swbuf_r+0x1e>
    27c4:	0021      	movs	r1, r4
    27c6:	0028      	movs	r0, r5
    27c8:	f000 f820 	bl	280c <__swsetup_r>
    27cc:	2800      	cmp	r0, #0
    27ce:	d0ca      	beq.n	2766 <__swbuf_r+0x2e>
    27d0:	2601      	movs	r6, #1
    27d2:	4276      	negs	r6, r6
    27d4:	0030      	movs	r0, r6
    27d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27d8:	00002a6c 	.word	0x00002a6c
    27dc:	00002a8c 	.word	0x00002a8c
    27e0:	00002a4c 	.word	0x00002a4c

000027e4 <_write_r>:
    27e4:	b570      	push	{r4, r5, r6, lr}
    27e6:	0005      	movs	r5, r0
    27e8:	0008      	movs	r0, r1
    27ea:	0011      	movs	r1, r2
    27ec:	2200      	movs	r2, #0
    27ee:	4c06      	ldr	r4, [pc, #24]	; (2808 <_write_r+0x24>)
    27f0:	6022      	str	r2, [r4, #0]
    27f2:	001a      	movs	r2, r3
    27f4:	f7fd fe6a 	bl	4cc <_write>
    27f8:	1c43      	adds	r3, r0, #1
    27fa:	d103      	bne.n	2804 <_write_r+0x20>
    27fc:	6823      	ldr	r3, [r4, #0]
    27fe:	2b00      	cmp	r3, #0
    2800:	d000      	beq.n	2804 <_write_r+0x20>
    2802:	602b      	str	r3, [r5, #0]
    2804:	bd70      	pop	{r4, r5, r6, pc}
    2806:	46c0      	nop			; (mov r8, r8)
    2808:	20000188 	.word	0x20000188

0000280c <__swsetup_r>:
    280c:	4b36      	ldr	r3, [pc, #216]	; (28e8 <__swsetup_r+0xdc>)
    280e:	b570      	push	{r4, r5, r6, lr}
    2810:	681d      	ldr	r5, [r3, #0]
    2812:	0006      	movs	r6, r0
    2814:	000c      	movs	r4, r1
    2816:	2d00      	cmp	r5, #0
    2818:	d005      	beq.n	2826 <__swsetup_r+0x1a>
    281a:	69ab      	ldr	r3, [r5, #24]
    281c:	2b00      	cmp	r3, #0
    281e:	d102      	bne.n	2826 <__swsetup_r+0x1a>
    2820:	0028      	movs	r0, r5
    2822:	f7ff fab1 	bl	1d88 <__sinit>
    2826:	4b31      	ldr	r3, [pc, #196]	; (28ec <__swsetup_r+0xe0>)
    2828:	429c      	cmp	r4, r3
    282a:	d10f      	bne.n	284c <__swsetup_r+0x40>
    282c:	686c      	ldr	r4, [r5, #4]
    282e:	230c      	movs	r3, #12
    2830:	5ee2      	ldrsh	r2, [r4, r3]
    2832:	b293      	uxth	r3, r2
    2834:	0719      	lsls	r1, r3, #28
    2836:	d42d      	bmi.n	2894 <__swsetup_r+0x88>
    2838:	06d9      	lsls	r1, r3, #27
    283a:	d411      	bmi.n	2860 <__swsetup_r+0x54>
    283c:	2309      	movs	r3, #9
    283e:	2001      	movs	r0, #1
    2840:	6033      	str	r3, [r6, #0]
    2842:	3337      	adds	r3, #55	; 0x37
    2844:	4313      	orrs	r3, r2
    2846:	81a3      	strh	r3, [r4, #12]
    2848:	4240      	negs	r0, r0
    284a:	bd70      	pop	{r4, r5, r6, pc}
    284c:	4b28      	ldr	r3, [pc, #160]	; (28f0 <__swsetup_r+0xe4>)
    284e:	429c      	cmp	r4, r3
    2850:	d101      	bne.n	2856 <__swsetup_r+0x4a>
    2852:	68ac      	ldr	r4, [r5, #8]
    2854:	e7eb      	b.n	282e <__swsetup_r+0x22>
    2856:	4b27      	ldr	r3, [pc, #156]	; (28f4 <__swsetup_r+0xe8>)
    2858:	429c      	cmp	r4, r3
    285a:	d1e8      	bne.n	282e <__swsetup_r+0x22>
    285c:	68ec      	ldr	r4, [r5, #12]
    285e:	e7e6      	b.n	282e <__swsetup_r+0x22>
    2860:	075b      	lsls	r3, r3, #29
    2862:	d513      	bpl.n	288c <__swsetup_r+0x80>
    2864:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2866:	2900      	cmp	r1, #0
    2868:	d008      	beq.n	287c <__swsetup_r+0x70>
    286a:	0023      	movs	r3, r4
    286c:	3344      	adds	r3, #68	; 0x44
    286e:	4299      	cmp	r1, r3
    2870:	d002      	beq.n	2878 <__swsetup_r+0x6c>
    2872:	0030      	movs	r0, r6
    2874:	f7ff fb8e 	bl	1f94 <_free_r>
    2878:	2300      	movs	r3, #0
    287a:	6363      	str	r3, [r4, #52]	; 0x34
    287c:	2224      	movs	r2, #36	; 0x24
    287e:	89a3      	ldrh	r3, [r4, #12]
    2880:	4393      	bics	r3, r2
    2882:	81a3      	strh	r3, [r4, #12]
    2884:	2300      	movs	r3, #0
    2886:	6063      	str	r3, [r4, #4]
    2888:	6923      	ldr	r3, [r4, #16]
    288a:	6023      	str	r3, [r4, #0]
    288c:	2308      	movs	r3, #8
    288e:	89a2      	ldrh	r2, [r4, #12]
    2890:	4313      	orrs	r3, r2
    2892:	81a3      	strh	r3, [r4, #12]
    2894:	6923      	ldr	r3, [r4, #16]
    2896:	2b00      	cmp	r3, #0
    2898:	d10b      	bne.n	28b2 <__swsetup_r+0xa6>
    289a:	21a0      	movs	r1, #160	; 0xa0
    289c:	2280      	movs	r2, #128	; 0x80
    289e:	89a3      	ldrh	r3, [r4, #12]
    28a0:	0089      	lsls	r1, r1, #2
    28a2:	0092      	lsls	r2, r2, #2
    28a4:	400b      	ands	r3, r1
    28a6:	4293      	cmp	r3, r2
    28a8:	d003      	beq.n	28b2 <__swsetup_r+0xa6>
    28aa:	0021      	movs	r1, r4
    28ac:	0030      	movs	r0, r6
    28ae:	f7ff fb29 	bl	1f04 <__smakebuf_r>
    28b2:	2301      	movs	r3, #1
    28b4:	89a2      	ldrh	r2, [r4, #12]
    28b6:	4013      	ands	r3, r2
    28b8:	d011      	beq.n	28de <__swsetup_r+0xd2>
    28ba:	2300      	movs	r3, #0
    28bc:	60a3      	str	r3, [r4, #8]
    28be:	6963      	ldr	r3, [r4, #20]
    28c0:	425b      	negs	r3, r3
    28c2:	61a3      	str	r3, [r4, #24]
    28c4:	2000      	movs	r0, #0
    28c6:	6923      	ldr	r3, [r4, #16]
    28c8:	4283      	cmp	r3, r0
    28ca:	d1be      	bne.n	284a <__swsetup_r+0x3e>
    28cc:	230c      	movs	r3, #12
    28ce:	5ee2      	ldrsh	r2, [r4, r3]
    28d0:	0613      	lsls	r3, r2, #24
    28d2:	d5ba      	bpl.n	284a <__swsetup_r+0x3e>
    28d4:	2340      	movs	r3, #64	; 0x40
    28d6:	4313      	orrs	r3, r2
    28d8:	81a3      	strh	r3, [r4, #12]
    28da:	3801      	subs	r0, #1
    28dc:	e7b5      	b.n	284a <__swsetup_r+0x3e>
    28de:	0792      	lsls	r2, r2, #30
    28e0:	d400      	bmi.n	28e4 <__swsetup_r+0xd8>
    28e2:	6963      	ldr	r3, [r4, #20]
    28e4:	60a3      	str	r3, [r4, #8]
    28e6:	e7ed      	b.n	28c4 <__swsetup_r+0xb8>
    28e8:	20000004 	.word	0x20000004
    28ec:	00002a6c 	.word	0x00002a6c
    28f0:	00002a8c 	.word	0x00002a8c
    28f4:	00002a4c 	.word	0x00002a4c

000028f8 <_close_r>:
    28f8:	2300      	movs	r3, #0
    28fa:	b570      	push	{r4, r5, r6, lr}
    28fc:	4c06      	ldr	r4, [pc, #24]	; (2918 <_close_r+0x20>)
    28fe:	0005      	movs	r5, r0
    2900:	0008      	movs	r0, r1
    2902:	6023      	str	r3, [r4, #0]
    2904:	f7fe fe8a 	bl	161c <_close>
    2908:	1c43      	adds	r3, r0, #1
    290a:	d103      	bne.n	2914 <_close_r+0x1c>
    290c:	6823      	ldr	r3, [r4, #0]
    290e:	2b00      	cmp	r3, #0
    2910:	d000      	beq.n	2914 <_close_r+0x1c>
    2912:	602b      	str	r3, [r5, #0]
    2914:	bd70      	pop	{r4, r5, r6, pc}
    2916:	46c0      	nop			; (mov r8, r8)
    2918:	20000188 	.word	0x20000188

0000291c <_fstat_r>:
    291c:	2300      	movs	r3, #0
    291e:	b570      	push	{r4, r5, r6, lr}
    2920:	4c06      	ldr	r4, [pc, #24]	; (293c <_fstat_r+0x20>)
    2922:	0005      	movs	r5, r0
    2924:	0008      	movs	r0, r1
    2926:	0011      	movs	r1, r2
    2928:	6023      	str	r3, [r4, #0]
    292a:	f7fe fe7a 	bl	1622 <_fstat>
    292e:	1c43      	adds	r3, r0, #1
    2930:	d103      	bne.n	293a <_fstat_r+0x1e>
    2932:	6823      	ldr	r3, [r4, #0]
    2934:	2b00      	cmp	r3, #0
    2936:	d000      	beq.n	293a <_fstat_r+0x1e>
    2938:	602b      	str	r3, [r5, #0]
    293a:	bd70      	pop	{r4, r5, r6, pc}
    293c:	20000188 	.word	0x20000188

00002940 <_isatty_r>:
    2940:	2300      	movs	r3, #0
    2942:	b570      	push	{r4, r5, r6, lr}
    2944:	4c06      	ldr	r4, [pc, #24]	; (2960 <_isatty_r+0x20>)
    2946:	0005      	movs	r5, r0
    2948:	0008      	movs	r0, r1
    294a:	6023      	str	r3, [r4, #0]
    294c:	f7fe fe6e 	bl	162c <_isatty>
    2950:	1c43      	adds	r3, r0, #1
    2952:	d103      	bne.n	295c <_isatty_r+0x1c>
    2954:	6823      	ldr	r3, [r4, #0]
    2956:	2b00      	cmp	r3, #0
    2958:	d000      	beq.n	295c <_isatty_r+0x1c>
    295a:	602b      	str	r3, [r5, #0]
    295c:	bd70      	pop	{r4, r5, r6, pc}
    295e:	46c0      	nop			; (mov r8, r8)
    2960:	20000188 	.word	0x20000188

00002964 <_lseek_r>:
    2964:	b570      	push	{r4, r5, r6, lr}
    2966:	0005      	movs	r5, r0
    2968:	0008      	movs	r0, r1
    296a:	0011      	movs	r1, r2
    296c:	2200      	movs	r2, #0
    296e:	4c06      	ldr	r4, [pc, #24]	; (2988 <_lseek_r+0x24>)
    2970:	6022      	str	r2, [r4, #0]
    2972:	001a      	movs	r2, r3
    2974:	f7fe fe5c 	bl	1630 <_lseek>
    2978:	1c43      	adds	r3, r0, #1
    297a:	d103      	bne.n	2984 <_lseek_r+0x20>
    297c:	6823      	ldr	r3, [r4, #0]
    297e:	2b00      	cmp	r3, #0
    2980:	d000      	beq.n	2984 <_lseek_r+0x20>
    2982:	602b      	str	r3, [r5, #0]
    2984:	bd70      	pop	{r4, r5, r6, pc}
    2986:	46c0      	nop			; (mov r8, r8)
    2988:	20000188 	.word	0x20000188

0000298c <memchr>:
    298c:	b2c9      	uxtb	r1, r1
    298e:	1882      	adds	r2, r0, r2
    2990:	4290      	cmp	r0, r2
    2992:	d101      	bne.n	2998 <memchr+0xc>
    2994:	2000      	movs	r0, #0
    2996:	4770      	bx	lr
    2998:	7803      	ldrb	r3, [r0, #0]
    299a:	428b      	cmp	r3, r1
    299c:	d0fb      	beq.n	2996 <memchr+0xa>
    299e:	3001      	adds	r0, #1
    29a0:	e7f6      	b.n	2990 <memchr+0x4>

000029a2 <__malloc_lock>:
    29a2:	4770      	bx	lr

000029a4 <__malloc_unlock>:
    29a4:	4770      	bx	lr
	...

000029a8 <_read_r>:
    29a8:	b570      	push	{r4, r5, r6, lr}
    29aa:	0005      	movs	r5, r0
    29ac:	0008      	movs	r0, r1
    29ae:	0011      	movs	r1, r2
    29b0:	2200      	movs	r2, #0
    29b2:	4c06      	ldr	r4, [pc, #24]	; (29cc <_read_r+0x24>)
    29b4:	6022      	str	r2, [r4, #0]
    29b6:	001a      	movs	r2, r3
    29b8:	f7fd fd66 	bl	488 <_read>
    29bc:	1c43      	adds	r3, r0, #1
    29be:	d103      	bne.n	29c8 <_read_r+0x20>
    29c0:	6823      	ldr	r3, [r4, #0]
    29c2:	2b00      	cmp	r3, #0
    29c4:	d000      	beq.n	29c8 <_read_r+0x20>
    29c6:	602b      	str	r3, [r5, #0]
    29c8:	bd70      	pop	{r4, r5, r6, pc}
    29ca:	46c0      	nop			; (mov r8, r8)
    29cc:	20000188 	.word	0x20000188
    29d0:	42000800 	.word	0x42000800
    29d4:	42000c00 	.word	0x42000c00
    29d8:	42001000 	.word	0x42001000
    29dc:	42001400 	.word	0x42001400
    29e0:	42001800 	.word	0x42001800
    29e4:	42001c00 	.word	0x42001c00
    29e8:	00000d86 	.word	0x00000d86
    29ec:	00000d82 	.word	0x00000d82
    29f0:	00000d82 	.word	0x00000d82
    29f4:	00000de4 	.word	0x00000de4
    29f8:	00000de4 	.word	0x00000de4
    29fc:	00000d9a 	.word	0x00000d9a
    2a00:	00000d8c 	.word	0x00000d8c
    2a04:	00000da0 	.word	0x00000da0
    2a08:	00000dd2 	.word	0x00000dd2
    2a0c:	00000fa4 	.word	0x00000fa4
    2a10:	00000f84 	.word	0x00000f84
    2a14:	00000f84 	.word	0x00000f84
    2a18:	00001010 	.word	0x00001010
    2a1c:	00000f96 	.word	0x00000f96
    2a20:	00000fb2 	.word	0x00000fb2
    2a24:	00000f88 	.word	0x00000f88
    2a28:	00000fc0 	.word	0x00000fc0
    2a2c:	00001000 	.word	0x00001000
    2a30:	74736554 	.word	0x74736554
    2a34:	00000000 	.word	0x00000000
    2a38:	6c6c6548 	.word	0x6c6c6548
    2a3c:	6f57206f 	.word	0x6f57206f
    2a40:	21646c72 	.word	0x21646c72
    2a44:	00000a0d 	.word	0x00000a0d

00002a48 <_global_impure_ptr>:
    2a48:	20000008                                ... 

00002a4c <__sf_fake_stderr>:
	...

00002a6c <__sf_fake_stdin>:
	...

00002a8c <__sf_fake_stdout>:
	...
    2aac:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2abc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2acc:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2adc:	00006665                                ef..

00002ae0 <_init>:
    2ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ae2:	46c0      	nop			; (mov r8, r8)
    2ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2ae6:	bc08      	pop	{r3}
    2ae8:	469e      	mov	lr, r3
    2aea:	4770      	bx	lr

00002aec <__init_array_start>:
    2aec:	000000dd 	.word	0x000000dd

00002af0 <_fini>:
    2af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2af6:	bc08      	pop	{r3}
    2af8:	469e      	mov	lr, r3
    2afa:	4770      	bx	lr

00002afc <__fini_array_start>:
    2afc:	000000b5 	.word	0x000000b5
