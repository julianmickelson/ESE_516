
WINC1500_CHIP_INFO_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005628  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00005628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000184  20000070  00005698  00020070  2**2
                  ALLOC
  3 .stack        00002004  200001f4  0000581c  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00044592  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000069f6  00000000  00000000  00064683  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000dd98  00000000  00000000  0006b079  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b00  00000000  00000000  00078e11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f60  00000000  00000000  00079911  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001faa8  00000000  00000000  0007a871  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016770  00000000  00000000  0009a319  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008fb2e  00000000  00000000  000b0a89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000259c  00000000  00000000  001405b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 21 00 20 b9 34 00 00 b5 34 00 00 b5 34 00 00     .!. .4...4...4..
	...
      2c:	b5 34 00 00 00 00 00 00 00 00 00 00 b5 34 00 00     .4...........4..
      3c:	b5 34 00 00 b5 34 00 00 b5 34 00 00 b5 34 00 00     .4...4...4...4..
      4c:	b5 34 00 00 3d 1d 00 00 b5 34 00 00 b5 34 00 00     .4..=....4...4..
      5c:	b5 34 00 00 b5 34 00 00 a9 22 00 00 b9 22 00 00     .4...4..."..."..
      6c:	c9 22 00 00 d9 22 00 00 e9 22 00 00 f9 22 00 00     ."..."..."..."..
      7c:	b5 34 00 00 b5 34 00 00 b5 34 00 00 b5 34 00 00     .4...4...4...4..
      8c:	b5 34 00 00 b5 34 00 00 00 00 00 00 00 00 00 00     .4...4..........
      9c:	b5 34 00 00 b5 34 00 00 b5 34 00 00 b5 34 00 00     .4...4...4...4..
      ac:	b5 34 00 00 00 00 00 00                             .4......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00005628 	.word	0x00005628

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00005628 	.word	0x00005628
     10c:	00005628 	.word	0x00005628
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00003245 	.word	0x00003245
     140:	0000381d 	.word	0x0000381d
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     180:	b510      	push	{r4, lr}
	if (gpfIsr) {
     182:	4b03      	ldr	r3, [pc, #12]	; (190 <chip_isr+0x10>)
     184:	681b      	ldr	r3, [r3, #0]
     186:	2b00      	cmp	r3, #0
     188:	d000      	beq.n	18c <chip_isr+0xc>
		gpfIsr();
     18a:	4798      	blx	r3
	}
}
     18c:	bd10      	pop	{r4, pc}
     18e:	46c0      	nop			; (mov r8, r8)
     190:	2000008c 	.word	0x2000008c

00000194 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     194:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     196:	1e44      	subs	r4, r0, #1
     198:	2800      	cmp	r0, #0
     19a:	d004      	beq.n	1a6 <nm_bsp_sleep+0x12>
		delay_ms(1);
     19c:	4d02      	ldr	r5, [pc, #8]	; (1a8 <nm_bsp_sleep+0x14>)
     19e:	2001      	movs	r0, #1
     1a0:	47a8      	blx	r5
	while (u32TimeMsec--) {
     1a2:	3c01      	subs	r4, #1
     1a4:	d2fb      	bcs.n	19e <nm_bsp_sleep+0xa>
	}
}
     1a6:	bd70      	pop	{r4, r5, r6, pc}
     1a8:	00000155 	.word	0x00000155

000001ac <nm_bsp_reset>:
{
     1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1ae:	4c08      	ldr	r4, [pc, #32]	; (1d0 <nm_bsp_reset+0x24>)
     1b0:	2780      	movs	r7, #128	; 0x80
     1b2:	057f      	lsls	r7, r7, #21
     1b4:	6167      	str	r7, [r4, #20]
     1b6:	2680      	movs	r6, #128	; 0x80
     1b8:	0536      	lsls	r6, r6, #20
     1ba:	6166      	str	r6, [r4, #20]
	nm_bsp_sleep(100);
     1bc:	2064      	movs	r0, #100	; 0x64
     1be:	4d05      	ldr	r5, [pc, #20]	; (1d4 <nm_bsp_reset+0x28>)
     1c0:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     1c2:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(100);
     1c4:	2064      	movs	r0, #100	; 0x64
     1c6:	47a8      	blx	r5
     1c8:	61a6      	str	r6, [r4, #24]
	nm_bsp_sleep(100);
     1ca:	2064      	movs	r0, #100	; 0x64
     1cc:	47a8      	blx	r5
}
     1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1d0:	41004400 	.word	0x41004400
     1d4:	00000195 	.word	0x00000195

000001d8 <nm_bsp_init>:
{
     1d8:	b570      	push	{r4, r5, r6, lr}
     1da:	b082      	sub	sp, #8
	gpfIsr = NULL;
     1dc:	2300      	movs	r3, #0
     1de:	4a16      	ldr	r2, [pc, #88]	; (238 <nm_bsp_init+0x60>)
     1e0:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1e2:	ac01      	add	r4, sp, #4
     1e4:	2501      	movs	r5, #1
     1e6:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1e8:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1ea:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     1ec:	0021      	movs	r1, r4
     1ee:	201b      	movs	r0, #27
     1f0:	4e12      	ldr	r6, [pc, #72]	; (23c <nm_bsp_init+0x64>)
     1f2:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     1f4:	0021      	movs	r1, r4
     1f6:	201c      	movs	r0, #28
     1f8:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     1fa:	0021      	movs	r1, r4
     1fc:	2028      	movs	r0, #40	; 0x28
     1fe:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
     200:	4b0f      	ldr	r3, [pc, #60]	; (240 <nm_bsp_init+0x68>)
     202:	2280      	movs	r2, #128	; 0x80
     204:	0552      	lsls	r2, r2, #21
     206:	615a      	str	r2, [r3, #20]
     208:	2280      	movs	r2, #128	; 0x80
     20a:	0512      	lsls	r2, r2, #20
     20c:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     20e:	4b0d      	ldr	r3, [pc, #52]	; (244 <nm_bsp_init+0x6c>)
     210:	681b      	ldr	r3, [r3, #0]
     212:	421d      	tst	r5, r3
     214:	d003      	beq.n	21e <nm_bsp_init+0x46>
     216:	4b0b      	ldr	r3, [pc, #44]	; (244 <nm_bsp_init+0x6c>)
     218:	681b      	ldr	r3, [r3, #0]
     21a:	079b      	lsls	r3, r3, #30
     21c:	d401      	bmi.n	222 <nm_bsp_init+0x4a>
	    delay_init();
     21e:	4b0a      	ldr	r3, [pc, #40]	; (248 <nm_bsp_init+0x70>)
     220:	4798      	blx	r3
	nm_bsp_reset();
     222:	4b0a      	ldr	r3, [pc, #40]	; (24c <nm_bsp_init+0x74>)
     224:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     226:	2201      	movs	r2, #1
     228:	4b09      	ldr	r3, [pc, #36]	; (250 <nm_bsp_init+0x78>)
     22a:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     22c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     230:	b662      	cpsie	i
}
     232:	2000      	movs	r0, #0
     234:	b002      	add	sp, #8
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	2000008c 	.word	0x2000008c
     23c:	00001ea1 	.word	0x00001ea1
     240:	41004400 	.word	0x41004400
     244:	e000e010 	.word	0xe000e010
     248:	00000115 	.word	0x00000115
     24c:	000001ad 	.word	0x000001ad
     250:	2000000a 	.word	0x2000000a

00000254 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     254:	b510      	push	{r4, lr}
     256:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     258:	4b0e      	ldr	r3, [pc, #56]	; (294 <nm_bsp_register_isr+0x40>)
     25a:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     25c:	ac01      	add	r4, sp, #4
     25e:	0020      	movs	r0, r4
     260:	4b0d      	ldr	r3, [pc, #52]	; (298 <nm_bsp_register_isr+0x44>)
     262:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     264:	2329      	movs	r3, #41	; 0x29
     266:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     268:	2300      	movs	r3, #0
     26a:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     26c:	3301      	adds	r3, #1
     26e:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     270:	3301      	adds	r3, #1
     272:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     274:	0021      	movs	r1, r4
     276:	2009      	movs	r0, #9
     278:	4b08      	ldr	r3, [pc, #32]	; (29c <nm_bsp_register_isr+0x48>)
     27a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     27c:	2200      	movs	r2, #0
     27e:	2109      	movs	r1, #9
     280:	4807      	ldr	r0, [pc, #28]	; (2a0 <nm_bsp_register_isr+0x4c>)
     282:	4b08      	ldr	r3, [pc, #32]	; (2a4 <nm_bsp_register_isr+0x50>)
     284:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     286:	2100      	movs	r1, #0
     288:	2009      	movs	r0, #9
     28a:	4b07      	ldr	r3, [pc, #28]	; (2a8 <nm_bsp_register_isr+0x54>)
     28c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     28e:	b004      	add	sp, #16
     290:	bd10      	pop	{r4, pc}
     292:	46c0      	nop			; (mov r8, r8)
     294:	2000008c 	.word	0x2000008c
     298:	00001e15 	.word	0x00001e15
     29c:	00001e29 	.word	0x00001e29
     2a0:	00000181 	.word	0x00000181
     2a4:	00001cd1 	.word	0x00001cd1
     2a8:	00001cfd 	.word	0x00001cfd

000002ac <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     2ac:	b510      	push	{r4, lr}
	if (u8Enable) {
     2ae:	2800      	cmp	r0, #0
     2b0:	d104      	bne.n	2bc <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     2b2:	2100      	movs	r1, #0
     2b4:	2009      	movs	r0, #9
     2b6:	4b04      	ldr	r3, [pc, #16]	; (2c8 <nm_bsp_interrupt_ctrl+0x1c>)
     2b8:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     2ba:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     2bc:	2100      	movs	r1, #0
     2be:	2009      	movs	r0, #9
     2c0:	4b02      	ldr	r3, [pc, #8]	; (2cc <nm_bsp_interrupt_ctrl+0x20>)
     2c2:	4798      	blx	r3
     2c4:	e7f9      	b.n	2ba <nm_bsp_interrupt_ctrl+0xe>
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	00001d1d 	.word	0x00001d1d
     2cc:	00001cfd 	.word	0x00001cfd

000002d0 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     2d0:	b530      	push	{r4, r5, lr}
     2d2:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     2d4:	4c30      	ldr	r4, [pc, #192]	; (398 <nm_bus_init+0xc8>)
     2d6:	230e      	movs	r3, #14
     2d8:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     2da:	2300      	movs	r3, #0
     2dc:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     2de:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     2e0:	a901      	add	r1, sp, #4
     2e2:	2201      	movs	r2, #1
     2e4:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     2e6:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     2e8:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     2ea:	200e      	movs	r0, #14
     2ec:	4b2b      	ldr	r3, [pc, #172]	; (39c <nm_bus_init+0xcc>)
     2ee:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     2f0:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2f2:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     2f4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2f6:	2900      	cmp	r1, #0
     2f8:	d104      	bne.n	304 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     2fa:	0953      	lsrs	r3, r2, #5
     2fc:	01db      	lsls	r3, r3, #7
     2fe:	4928      	ldr	r1, [pc, #160]	; (3a0 <nm_bus_init+0xd0>)
     300:	468c      	mov	ip, r1
     302:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     304:	211f      	movs	r1, #31
     306:	4011      	ands	r1, r2
     308:	2201      	movs	r2, #1
     30a:	0010      	movs	r0, r2
     30c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     30e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     310:	ac02      	add	r4, sp, #8
     312:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     314:	2300      	movs	r3, #0
     316:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     318:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     31a:	21c0      	movs	r1, #192	; 0xc0
     31c:	0389      	lsls	r1, r1, #14
     31e:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     320:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     322:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     324:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     326:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     328:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     32a:	3223      	adds	r2, #35	; 0x23
     32c:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     32e:	3a18      	subs	r2, #24
     330:	2100      	movs	r1, #0
     332:	a808      	add	r0, sp, #32
     334:	4b1b      	ldr	r3, [pc, #108]	; (3a4 <nm_bus_init+0xd4>)
     336:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     338:	4b1b      	ldr	r3, [pc, #108]	; (3a8 <nm_bus_init+0xd8>)
     33a:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     33c:	4b1b      	ldr	r3, [pc, #108]	; (3ac <nm_bus_init+0xdc>)
     33e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     340:	2301      	movs	r3, #1
     342:	425b      	negs	r3, r3
     344:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     346:	4b1a      	ldr	r3, [pc, #104]	; (3b0 <nm_bus_init+0xe0>)
     348:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     34a:	4b1a      	ldr	r3, [pc, #104]	; (3b4 <nm_bus_init+0xe4>)
     34c:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     34e:	0022      	movs	r2, r4
     350:	4919      	ldr	r1, [pc, #100]	; (3b8 <nm_bus_init+0xe8>)
     352:	481a      	ldr	r0, [pc, #104]	; (3bc <nm_bus_init+0xec>)
     354:	4b1a      	ldr	r3, [pc, #104]	; (3c0 <nm_bus_init+0xf0>)
     356:	4798      	blx	r3
     358:	2800      	cmp	r0, #0
     35a:	d11a      	bne.n	392 <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     35c:	4d17      	ldr	r5, [pc, #92]	; (3bc <nm_bus_init+0xec>)
     35e:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     360:	0020      	movs	r0, r4
     362:	4b18      	ldr	r3, [pc, #96]	; (3c4 <nm_bus_init+0xf4>)
     364:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     366:	231f      	movs	r3, #31
     368:	4018      	ands	r0, r3
     36a:	3b1e      	subs	r3, #30
     36c:	4083      	lsls	r3, r0
     36e:	4a16      	ldr	r2, [pc, #88]	; (3c8 <nm_bus_init+0xf8>)
     370:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     372:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     374:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     376:	2b00      	cmp	r3, #0
     378:	d1fc      	bne.n	374 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     37a:	6823      	ldr	r3, [r4, #0]
     37c:	2202      	movs	r2, #2
     37e:	4313      	orrs	r3, r2
     380:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
     382:	4b12      	ldr	r3, [pc, #72]	; (3cc <nm_bus_init+0xfc>)
     384:	4798      	blx	r3
	nm_bsp_sleep(1);
     386:	2001      	movs	r0, #1
     388:	4b11      	ldr	r3, [pc, #68]	; (3d0 <nm_bus_init+0x100>)
     38a:	4798      	blx	r3
#endif
	return result;
     38c:	2000      	movs	r0, #0
}
     38e:	b011      	add	sp, #68	; 0x44
     390:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
     392:	2006      	movs	r0, #6
     394:	4240      	negs	r0, r0
     396:	e7fa      	b.n	38e <nm_bus_init+0xbe>
     398:	2000011c 	.word	0x2000011c
     39c:	00001ea1 	.word	0x00001ea1
     3a0:	41004400 	.word	0x41004400
     3a4:	000039d1 	.word	0x000039d1
     3a8:	000c0002 	.word	0x000c0002
     3ac:	000d0002 	.word	0x000d0002
     3b0:	000f0002 	.word	0x000f0002
     3b4:	00b71b00 	.word	0x00b71b00
     3b8:	42001000 	.word	0x42001000
     3bc:	20000120 	.word	0x20000120
     3c0:	00002309 	.word	0x00002309
     3c4:	00002279 	.word	0x00002279
     3c8:	e000e100 	.word	0xe000e100
     3cc:	000001ad 	.word	0x000001ad
     3d0:	00000195 	.word	0x00000195

000003d4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3d6:	46de      	mov	lr, fp
     3d8:	4657      	mov	r7, sl
     3da:	464e      	mov	r6, r9
     3dc:	4645      	mov	r5, r8
     3de:	b5e0      	push	{r5, r6, r7, lr}
     3e0:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
     3e2:	2803      	cmp	r0, #3
     3e4:	d000      	beq.n	3e8 <nm_bus_ioctl+0x14>
     3e6:	e075      	b.n	4d4 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     3e8:	680e      	ldr	r6, [r1, #0]
     3ea:	684d      	ldr	r5, [r1, #4]
     3ec:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
     3ee:	2200      	movs	r2, #0
     3f0:	466b      	mov	r3, sp
     3f2:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     3f4:	2d00      	cmp	r5, #0
     3f6:	d027      	beq.n	448 <nm_bus_ioctl+0x74>
     3f8:	2c00      	cmp	r4, #0
     3fa:	d065      	beq.n	4c8 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
     3fc:	2e00      	cmp	r6, #0
     3fe:	d100      	bne.n	402 <nm_bus_ioctl+0x2e>
     400:	e077      	b.n	4f2 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     402:	2300      	movs	r3, #0
     404:	4698      	mov	r8, r3
     406:	2300      	movs	r3, #0
     408:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
     40a:	2201      	movs	r2, #1
     40c:	493b      	ldr	r1, [pc, #236]	; (4fc <nm_bus_ioctl+0x128>)
     40e:	483c      	ldr	r0, [pc, #240]	; (500 <nm_bus_ioctl+0x12c>)
     410:	4b3c      	ldr	r3, [pc, #240]	; (504 <nm_bus_ioctl+0x130>)
     412:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     414:	4b3a      	ldr	r3, [pc, #232]	; (500 <nm_bus_ioctl+0x12c>)
     416:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
     418:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
     41a:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     41c:	4699      	mov	r9, r3
			pu8Miso++;
     41e:	4659      	mov	r1, fp
     420:	424b      	negs	r3, r1
     422:	4159      	adcs	r1, r3
     424:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
     426:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     428:	4653      	mov	r3, sl
     42a:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     42c:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     42e:	4239      	tst	r1, r7
     430:	d0fc      	beq.n	42c <nm_bus_ioctl+0x58>
     432:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     434:	4239      	tst	r1, r7
     436:	d0fc      	beq.n	432 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     438:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     43a:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
     43c:	4211      	tst	r1, r2
     43e:	d0fc      	beq.n	43a <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     440:	4649      	mov	r1, r9
     442:	7989      	ldrb	r1, [r1, #6]
     444:	468c      	mov	ip, r1
     446:	e011      	b.n	46c <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     448:	2e00      	cmp	r6, #0
     44a:	d03a      	beq.n	4c2 <nm_bus_ioctl+0xee>
     44c:	2c00      	cmp	r4, #0
     44e:	d03e      	beq.n	4ce <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     450:	2300      	movs	r3, #0
     452:	4698      	mov	r8, r3
		u8SkipMiso = 1;
     454:	3301      	adds	r3, #1
     456:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
     458:	466b      	mov	r3, sp
     45a:	1ddd      	adds	r5, r3, #7
     45c:	e7d5      	b.n	40a <nm_bus_ioctl+0x36>
     45e:	4660      	mov	r0, ip
     460:	2801      	cmp	r0, #1
     462:	d00d      	beq.n	480 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     464:	6a98      	ldr	r0, [r3, #40]	; 0x28
     466:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     468:	2900      	cmp	r1, #0
     46a:	d00d      	beq.n	488 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     46c:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     46e:	4211      	tst	r1, r2
     470:	d0fc      	beq.n	46c <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     472:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
     474:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     476:	4210      	tst	r0, r2
     478:	d0f1      	beq.n	45e <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     47a:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     47c:	311e      	adds	r1, #30
     47e:	e7ee      	b.n	45e <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     480:	6a98      	ldr	r0, [r3, #40]	; 0x28
     482:	05c0      	lsls	r0, r0, #23
     484:	0dc0      	lsrs	r0, r0, #23
     486:	e7ef      	b.n	468 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
     488:	7028      	strb	r0, [r5, #0]
		u16Sz--;
     48a:	3c01      	subs	r4, #1
     48c:	b2a4      	uxth	r4, r4
			pu8Miso++;
     48e:	445d      	add	r5, fp
			pu8Mosi++;
     490:	4643      	mov	r3, r8
     492:	4259      	negs	r1, r3
     494:	414b      	adcs	r3, r1
     496:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
     498:	2c00      	cmp	r4, #0
     49a:	d1c4      	bne.n	426 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     49c:	4b18      	ldr	r3, [pc, #96]	; (500 <nm_bus_ioctl+0x12c>)
     49e:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
     4a0:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     4a2:	7e0b      	ldrb	r3, [r1, #24]
     4a4:	4213      	tst	r3, r2
     4a6:	d0fc      	beq.n	4a2 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
     4a8:	2200      	movs	r2, #0
     4aa:	4914      	ldr	r1, [pc, #80]	; (4fc <nm_bus_ioctl+0x128>)
     4ac:	4814      	ldr	r0, [pc, #80]	; (500 <nm_bus_ioctl+0x12c>)
     4ae:	4b15      	ldr	r3, [pc, #84]	; (504 <nm_bus_ioctl+0x130>)
     4b0:	4798      	blx	r3
	return M2M_SUCCESS;
     4b2:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     4b4:	b003      	add	sp, #12
     4b6:	bc3c      	pop	{r2, r3, r4, r5}
     4b8:	4690      	mov	r8, r2
     4ba:	4699      	mov	r9, r3
     4bc:	46a2      	mov	sl, r4
     4be:	46ab      	mov	fp, r5
     4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
     4c2:	200f      	movs	r0, #15
     4c4:	4240      	negs	r0, r0
     4c6:	e7f5      	b.n	4b4 <nm_bus_ioctl+0xe0>
     4c8:	200f      	movs	r0, #15
     4ca:	4240      	negs	r0, r0
     4cc:	e7f2      	b.n	4b4 <nm_bus_ioctl+0xe0>
     4ce:	200f      	movs	r0, #15
     4d0:	4240      	negs	r0, r0
		break;
     4d2:	e7ef      	b.n	4b4 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
     4d4:	220e      	movs	r2, #14
     4d6:	32ff      	adds	r2, #255	; 0xff
     4d8:	490b      	ldr	r1, [pc, #44]	; (508 <nm_bus_ioctl+0x134>)
     4da:	480c      	ldr	r0, [pc, #48]	; (50c <nm_bus_ioctl+0x138>)
     4dc:	4b0c      	ldr	r3, [pc, #48]	; (510 <nm_bus_ioctl+0x13c>)
     4de:	4798      	blx	r3
     4e0:	480c      	ldr	r0, [pc, #48]	; (514 <nm_bus_ioctl+0x140>)
     4e2:	4b0d      	ldr	r3, [pc, #52]	; (518 <nm_bus_ioctl+0x144>)
     4e4:	4798      	blx	r3
     4e6:	200d      	movs	r0, #13
     4e8:	4b0c      	ldr	r3, [pc, #48]	; (51c <nm_bus_ioctl+0x148>)
     4ea:	4798      	blx	r3
			s8Ret = -1;
     4ec:	2001      	movs	r0, #1
     4ee:	4240      	negs	r0, r0
	return s8Ret;
     4f0:	e7e0      	b.n	4b4 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
     4f2:	2301      	movs	r3, #1
     4f4:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
     4f6:	466b      	mov	r3, sp
     4f8:	1dde      	adds	r6, r3, #7
     4fa:	e784      	b.n	406 <nm_bus_ioctl+0x32>
     4fc:	2000011c 	.word	0x2000011c
     500:	20000120 	.word	0x20000120
     504:	000024e1 	.word	0x000024e1
     508:	00004b2c 	.word	0x00004b2c
     50c:	00004b3c 	.word	0x00004b3c
     510:	000039e1 	.word	0x000039e1
     514:	00004b50 	.word	0x00004b50
     518:	00003afd 	.word	0x00003afd
     51c:	00003a15 	.word	0x00003a15

00000520 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     520:	b530      	push	{r4, r5, lr}
     522:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     524:	ab01      	add	r3, sp, #4
     526:	2200      	movs	r2, #0
     528:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
     52a:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     52c:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
     52e:	4d13      	ldr	r5, [pc, #76]	; (57c <nm_bus_deinit+0x5c>)
     530:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     532:	0020      	movs	r0, r4
     534:	4b12      	ldr	r3, [pc, #72]	; (580 <nm_bus_deinit+0x60>)
     536:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     538:	231f      	movs	r3, #31
     53a:	4018      	ands	r0, r3
     53c:	3b1e      	subs	r3, #30
     53e:	4083      	lsls	r3, r0
     540:	2280      	movs	r2, #128	; 0x80
     542:	4910      	ldr	r1, [pc, #64]	; (584 <nm_bus_deinit+0x64>)
     544:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     546:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     548:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     54a:	2b00      	cmp	r3, #0
     54c:	d1fc      	bne.n	548 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     54e:	338f      	adds	r3, #143	; 0x8f
     550:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     552:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     554:	6823      	ldr	r3, [r4, #0]
     556:	2202      	movs	r2, #2
     558:	4393      	bics	r3, r2
     55a:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
     55c:	a901      	add	r1, sp, #4
     55e:	200c      	movs	r0, #12
     560:	4c09      	ldr	r4, [pc, #36]	; (588 <nm_bus_deinit+0x68>)
     562:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
     564:	a901      	add	r1, sp, #4
     566:	200f      	movs	r0, #15
     568:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
     56a:	a901      	add	r1, sp, #4
     56c:	200d      	movs	r0, #13
     56e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
     570:	a901      	add	r1, sp, #4
     572:	200e      	movs	r0, #14
     574:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
     576:	2000      	movs	r0, #0
     578:	b003      	add	sp, #12
     57a:	bd30      	pop	{r4, r5, pc}
     57c:	20000120 	.word	0x20000120
     580:	00002279 	.word	0x00002279
     584:	e000e100 	.word	0xe000e100
     588:	00001ea1 	.word	0x00001ea1

0000058c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     58c:	2a00      	cmp	r2, #0
     58e:	d004      	beq.n	59a <m2m_memset+0xe>
     590:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
     592:	7001      	strb	r1, [r0, #0]
		pBuf++;
     594:	3001      	adds	r0, #1
	}while(--sz);
     596:	4290      	cmp	r0, r2
     598:	d1fb      	bne.n	592 <m2m_memset+0x6>
}
     59a:	4770      	bx	lr

0000059c <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
     59c:	4a02      	ldr	r2, [pc, #8]	; (5a8 <isr+0xc>)
     59e:	78d3      	ldrb	r3, [r2, #3]
     5a0:	3301      	adds	r3, #1
     5a2:	b2db      	uxtb	r3, r3
     5a4:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     5a6:	4770      	bx	lr
     5a8:	2000015c 	.word	0x2000015c

000005ac <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
     5ac:	4770      	bx	lr
	...

000005b0 <hif_set_rx_done>:
{
     5b0:	b500      	push	{lr}
     5b2:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
     5b4:	2200      	movs	r2, #0
     5b6:	4b0a      	ldr	r3, [pc, #40]	; (5e0 <hif_set_rx_done+0x30>)
     5b8:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
     5ba:	2001      	movs	r0, #1
     5bc:	4b09      	ldr	r3, [pc, #36]	; (5e4 <hif_set_rx_done+0x34>)
     5be:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     5c0:	a901      	add	r1, sp, #4
     5c2:	4809      	ldr	r0, [pc, #36]	; (5e8 <hif_set_rx_done+0x38>)
     5c4:	4b09      	ldr	r3, [pc, #36]	; (5ec <hif_set_rx_done+0x3c>)
     5c6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     5c8:	2800      	cmp	r0, #0
     5ca:	d001      	beq.n	5d0 <hif_set_rx_done+0x20>
}
     5cc:	b003      	add	sp, #12
     5ce:	bd00      	pop	{pc}
	reg |= NBIT1;
     5d0:	2102      	movs	r1, #2
     5d2:	9b01      	ldr	r3, [sp, #4]
     5d4:	4319      	orrs	r1, r3
     5d6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     5d8:	4803      	ldr	r0, [pc, #12]	; (5e8 <hif_set_rx_done+0x38>)
     5da:	4b05      	ldr	r3, [pc, #20]	; (5f0 <hif_set_rx_done+0x40>)
     5dc:	4798      	blx	r3
     5de:	e7f5      	b.n	5cc <hif_set_rx_done+0x1c>
     5e0:	2000015c 	.word	0x2000015c
     5e4:	000002ad 	.word	0x000002ad
     5e8:	00001070 	.word	0x00001070
     5ec:	00000f35 	.word	0x00000f35
     5f0:	00000f41 	.word	0x00000f41

000005f4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
     5f4:	b570      	push	{r4, r5, r6, lr}
     5f6:	0014      	movs	r4, r2
     5f8:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
     5fa:	2800      	cmp	r0, #0
     5fc:	d003      	beq.n	606 <hif_receive+0x12>
     5fe:	2900      	cmp	r1, #0
     600:	d001      	beq.n	606 <hif_receive+0x12>
     602:	2a00      	cmp	r2, #0
     604:	d112      	bne.n	62c <hif_receive+0x38>
	{
		if(isDone)
     606:	2d00      	cmp	r5, #0
     608:	d002      	beq.n	610 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
     60a:	4b27      	ldr	r3, [pc, #156]	; (6a8 <hif_receive+0xb4>)
     60c:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
     60e:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
     610:	4a26      	ldr	r2, [pc, #152]	; (6ac <hif_receive+0xb8>)
     612:	4927      	ldr	r1, [pc, #156]	; (6b0 <hif_receive+0xbc>)
     614:	4827      	ldr	r0, [pc, #156]	; (6b4 <hif_receive+0xc0>)
     616:	4b28      	ldr	r3, [pc, #160]	; (6b8 <hif_receive+0xc4>)
     618:	4798      	blx	r3
     61a:	4828      	ldr	r0, [pc, #160]	; (6bc <hif_receive+0xc8>)
     61c:	4b28      	ldr	r3, [pc, #160]	; (6c0 <hif_receive+0xcc>)
     61e:	4798      	blx	r3
     620:	200d      	movs	r0, #13
     622:	4b28      	ldr	r3, [pc, #160]	; (6c4 <hif_receive+0xd0>)
     624:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     626:	200c      	movs	r0, #12
     628:	4240      	negs	r0, r0
     62a:	e7f0      	b.n	60e <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
     62c:	4b26      	ldr	r3, [pc, #152]	; (6c8 <hif_receive+0xd4>)
     62e:	689b      	ldr	r3, [r3, #8]
     630:	429a      	cmp	r2, r3
     632:	d81a      	bhi.n	66a <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
     634:	4b24      	ldr	r3, [pc, #144]	; (6c8 <hif_receive+0xd4>)
     636:	685b      	ldr	r3, [r3, #4]
     638:	4298      	cmp	r0, r3
     63a:	d326      	bcc.n	68a <hif_receive+0x96>
     63c:	1886      	adds	r6, r0, r2
     63e:	4a22      	ldr	r2, [pc, #136]	; (6c8 <hif_receive+0xd4>)
     640:	6853      	ldr	r3, [r2, #4]
     642:	6892      	ldr	r2, [r2, #8]
     644:	189b      	adds	r3, r3, r2
     646:	429e      	cmp	r6, r3
     648:	d81f      	bhi.n	68a <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
     64a:	0022      	movs	r2, r4
     64c:	4b1f      	ldr	r3, [pc, #124]	; (6cc <hif_receive+0xd8>)
     64e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     650:	2800      	cmp	r0, #0
     652:	d1dc      	bne.n	60e <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
     654:	4a1c      	ldr	r2, [pc, #112]	; (6c8 <hif_receive+0xd4>)
     656:	6853      	ldr	r3, [r2, #4]
     658:	6892      	ldr	r2, [r2, #8]
     65a:	189b      	adds	r3, r3, r2
     65c:	429e      	cmp	r6, r3
     65e:	d001      	beq.n	664 <hif_receive+0x70>
     660:	2d00      	cmp	r5, #0
     662:	d0d4      	beq.n	60e <hif_receive+0x1a>
		ret = hif_set_rx_done();
     664:	4b10      	ldr	r3, [pc, #64]	; (6a8 <hif_receive+0xb4>)
     666:	4798      	blx	r3
     668:	e7d1      	b.n	60e <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
     66a:	4a19      	ldr	r2, [pc, #100]	; (6d0 <hif_receive+0xdc>)
     66c:	4910      	ldr	r1, [pc, #64]	; (6b0 <hif_receive+0xbc>)
     66e:	4811      	ldr	r0, [pc, #68]	; (6b4 <hif_receive+0xc0>)
     670:	4d11      	ldr	r5, [pc, #68]	; (6b8 <hif_receive+0xc4>)
     672:	47a8      	blx	r5
     674:	4b14      	ldr	r3, [pc, #80]	; (6c8 <hif_receive+0xd4>)
     676:	689a      	ldr	r2, [r3, #8]
     678:	0021      	movs	r1, r4
     67a:	4816      	ldr	r0, [pc, #88]	; (6d4 <hif_receive+0xe0>)
     67c:	47a8      	blx	r5
     67e:	200d      	movs	r0, #13
     680:	4b10      	ldr	r3, [pc, #64]	; (6c4 <hif_receive+0xd0>)
     682:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     684:	200c      	movs	r0, #12
     686:	4240      	negs	r0, r0
		goto ERR1;
     688:	e7c1      	b.n	60e <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
     68a:	4a13      	ldr	r2, [pc, #76]	; (6d8 <hif_receive+0xe4>)
     68c:	4908      	ldr	r1, [pc, #32]	; (6b0 <hif_receive+0xbc>)
     68e:	4809      	ldr	r0, [pc, #36]	; (6b4 <hif_receive+0xc0>)
     690:	4b09      	ldr	r3, [pc, #36]	; (6b8 <hif_receive+0xc4>)
     692:	4798      	blx	r3
     694:	4811      	ldr	r0, [pc, #68]	; (6dc <hif_receive+0xe8>)
     696:	4b0a      	ldr	r3, [pc, #40]	; (6c0 <hif_receive+0xcc>)
     698:	4798      	blx	r3
     69a:	200d      	movs	r0, #13
     69c:	4b09      	ldr	r3, [pc, #36]	; (6c4 <hif_receive+0xd0>)
     69e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     6a0:	200c      	movs	r0, #12
     6a2:	4240      	negs	r0, r0
		goto ERR1;
     6a4:	e7b3      	b.n	60e <hif_receive+0x1a>
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	000005b1 	.word	0x000005b1
     6ac:	0000026b 	.word	0x0000026b
     6b0:	00004b84 	.word	0x00004b84
     6b4:	00004b3c 	.word	0x00004b3c
     6b8:	000039e1 	.word	0x000039e1
     6bc:	00004ba0 	.word	0x00004ba0
     6c0:	00003afd 	.word	0x00003afd
     6c4:	00003a15 	.word	0x00003a15
     6c8:	2000015c 	.word	0x2000015c
     6cc:	00000f4d 	.word	0x00000f4d
     6d0:	00000273 	.word	0x00000273
     6d4:	00004bc0 	.word	0x00004bc0
     6d8:	00000279 	.word	0x00000279
     6dc:	00004c08 	.word	0x00004c08

000006e0 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
     6e0:	b570      	push	{r4, r5, r6, lr}
     6e2:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
     6e4:	2807      	cmp	r0, #7
     6e6:	d81f      	bhi.n	728 <hif_register_cb+0x48>
     6e8:	0083      	lsls	r3, r0, #2
     6ea:	4a16      	ldr	r2, [pc, #88]	; (744 <hif_register_cb+0x64>)
     6ec:	58d3      	ldr	r3, [r2, r3]
     6ee:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
     6f0:	4b15      	ldr	r3, [pc, #84]	; (748 <hif_register_cb+0x68>)
     6f2:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
     6f4:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
     6f6:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
     6f8:	4b13      	ldr	r3, [pc, #76]	; (748 <hif_register_cb+0x68>)
     6fa:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
     6fc:	2000      	movs	r0, #0
			break;
     6fe:	e7fa      	b.n	6f6 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
     700:	4b11      	ldr	r3, [pc, #68]	; (748 <hif_register_cb+0x68>)
     702:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
     704:	2000      	movs	r0, #0
			break;
     706:	e7f6      	b.n	6f6 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
     708:	4b0f      	ldr	r3, [pc, #60]	; (748 <hif_register_cb+0x68>)
     70a:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
     70c:	2000      	movs	r0, #0
			break;
     70e:	e7f2      	b.n	6f6 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
     710:	4b0d      	ldr	r3, [pc, #52]	; (748 <hif_register_cb+0x68>)
     712:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
     714:	2000      	movs	r0, #0
			break;
     716:	e7ee      	b.n	6f6 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
     718:	4b0b      	ldr	r3, [pc, #44]	; (748 <hif_register_cb+0x68>)
     71a:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
     71c:	2000      	movs	r0, #0
			break;
     71e:	e7ea      	b.n	6f6 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
     720:	4b09      	ldr	r3, [pc, #36]	; (748 <hif_register_cb+0x68>)
     722:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
     724:	2000      	movs	r0, #0
			break;
     726:	e7e6      	b.n	6f6 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
     728:	4a08      	ldr	r2, [pc, #32]	; (74c <hif_register_cb+0x6c>)
     72a:	4909      	ldr	r1, [pc, #36]	; (750 <hif_register_cb+0x70>)
     72c:	4809      	ldr	r0, [pc, #36]	; (754 <hif_register_cb+0x74>)
     72e:	4d0a      	ldr	r5, [pc, #40]	; (758 <hif_register_cb+0x78>)
     730:	47a8      	blx	r5
     732:	0021      	movs	r1, r4
     734:	4809      	ldr	r0, [pc, #36]	; (75c <hif_register_cb+0x7c>)
     736:	47a8      	blx	r5
     738:	200d      	movs	r0, #13
     73a:	4b09      	ldr	r3, [pc, #36]	; (760 <hif_register_cb+0x80>)
     73c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     73e:	200c      	movs	r0, #12
     740:	4240      	negs	r0, r0
			break;
     742:	e7d8      	b.n	6f6 <hif_register_cb+0x16>
     744:	00004b64 	.word	0x00004b64
     748:	2000015c 	.word	0x2000015c
     74c:	000002b1 	.word	0x000002b1
     750:	00004b90 	.word	0x00004b90
     754:	00004b3c 	.word	0x00004b3c
     758:	000039e1 	.word	0x000039e1
     75c:	00004c4c 	.word	0x00004c4c
     760:	00003a15 	.word	0x00003a15

00000764 <hif_init>:
{
     764:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     766:	2228      	movs	r2, #40	; 0x28
     768:	2100      	movs	r1, #0
     76a:	4806      	ldr	r0, [pc, #24]	; (784 <hif_init+0x20>)
     76c:	4b06      	ldr	r3, [pc, #24]	; (788 <hif_init+0x24>)
     76e:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     770:	4806      	ldr	r0, [pc, #24]	; (78c <hif_init+0x28>)
     772:	4b07      	ldr	r3, [pc, #28]	; (790 <hif_init+0x2c>)
     774:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     776:	4907      	ldr	r1, [pc, #28]	; (794 <hif_init+0x30>)
     778:	2003      	movs	r0, #3
     77a:	4b07      	ldr	r3, [pc, #28]	; (798 <hif_init+0x34>)
     77c:	4798      	blx	r3
}
     77e:	2000      	movs	r0, #0
     780:	bd10      	pop	{r4, pc}
     782:	46c0      	nop			; (mov r8, r8)
     784:	2000015c 	.word	0x2000015c
     788:	0000058d 	.word	0x0000058d
     78c:	0000059d 	.word	0x0000059d
     790:	00000255 	.word	0x00000255
     794:	000005ad 	.word	0x000005ad
     798:	000006e1 	.word	0x000006e1

0000079c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     79c:	b530      	push	{r4, r5, lr}
     79e:	b09f      	sub	sp, #124	; 0x7c
     7a0:	0004      	movs	r4, r0
     7a2:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
     7a4:	282c      	cmp	r0, #44	; 0x2c
     7a6:	d02f      	beq.n	808 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
     7a8:	281b      	cmp	r0, #27
     7aa:	d03d      	beq.n	828 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
     7ac:	2806      	cmp	r0, #6
     7ae:	d04b      	beq.n	848 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
     7b0:	280e      	cmp	r0, #14
     7b2:	d027      	beq.n	804 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
     7b4:	2832      	cmp	r0, #50	; 0x32
     7b6:	d057      	beq.n	868 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
     7b8:	282f      	cmp	r0, #47	; 0x2f
     7ba:	d065      	beq.n	888 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
     7bc:	2834      	cmp	r0, #52	; 0x34
     7be:	d100      	bne.n	7c2 <m2m_wifi_cb+0x26>
     7c0:	e077      	b.n	8b2 <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
     7c2:	2811      	cmp	r0, #17
     7c4:	d100      	bne.n	7c8 <m2m_wifi_cb+0x2c>
     7c6:	e096      	b.n	8f6 <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
     7c8:	2813      	cmp	r0, #19
     7ca:	d100      	bne.n	7ce <m2m_wifi_cb+0x32>
     7cc:	e0ac      	b.n	928 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
     7ce:	2804      	cmp	r0, #4
     7d0:	d100      	bne.n	7d4 <m2m_wifi_cb+0x38>
     7d2:	e0bb      	b.n	94c <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
     7d4:	2865      	cmp	r0, #101	; 0x65
     7d6:	d100      	bne.n	7da <m2m_wifi_cb+0x3e>
     7d8:	e0ca      	b.n	970 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
     7da:	2809      	cmp	r0, #9
     7dc:	d100      	bne.n	7e0 <m2m_wifi_cb+0x44>
     7de:	e0d9      	b.n	994 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
     7e0:	282a      	cmp	r0, #42	; 0x2a
     7e2:	d100      	bne.n	7e6 <m2m_wifi_cb+0x4a>
     7e4:	e0e8      	b.n	9b8 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
     7e6:	2820      	cmp	r0, #32
     7e8:	d100      	bne.n	7ec <m2m_wifi_cb+0x50>
     7ea:	e0f7      	b.n	9dc <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
     7ec:	2292      	movs	r2, #146	; 0x92
     7ee:	0052      	lsls	r2, r2, #1
     7f0:	4989      	ldr	r1, [pc, #548]	; (a18 <m2m_wifi_cb+0x27c>)
     7f2:	488a      	ldr	r0, [pc, #552]	; (a1c <m2m_wifi_cb+0x280>)
     7f4:	4d8a      	ldr	r5, [pc, #552]	; (a20 <m2m_wifi_cb+0x284>)
     7f6:	47a8      	blx	r5
     7f8:	0021      	movs	r1, r4
     7fa:	488a      	ldr	r0, [pc, #552]	; (a24 <m2m_wifi_cb+0x288>)
     7fc:	47a8      	blx	r5
     7fe:	200d      	movs	r0, #13
     800:	4b89      	ldr	r3, [pc, #548]	; (a28 <m2m_wifi_cb+0x28c>)
     802:	4798      	blx	r3
	}
}
     804:	b01f      	add	sp, #124	; 0x7c
     806:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
     808:	2300      	movs	r3, #0
     80a:	2204      	movs	r2, #4
     80c:	a903      	add	r1, sp, #12
     80e:	0028      	movs	r0, r5
     810:	4c86      	ldr	r4, [pc, #536]	; (a2c <m2m_wifi_cb+0x290>)
     812:	47a0      	blx	r4
     814:	2800      	cmp	r0, #0
     816:	d1f5      	bne.n	804 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     818:	4b85      	ldr	r3, [pc, #532]	; (a30 <m2m_wifi_cb+0x294>)
     81a:	681b      	ldr	r3, [r3, #0]
     81c:	2b00      	cmp	r3, #0
     81e:	d0f1      	beq.n	804 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
     820:	a903      	add	r1, sp, #12
     822:	302c      	adds	r0, #44	; 0x2c
     824:	4798      	blx	r3
     826:	e7ed      	b.n	804 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
     828:	2300      	movs	r3, #0
     82a:	2208      	movs	r2, #8
     82c:	a903      	add	r1, sp, #12
     82e:	0028      	movs	r0, r5
     830:	4c7e      	ldr	r4, [pc, #504]	; (a2c <m2m_wifi_cb+0x290>)
     832:	47a0      	blx	r4
     834:	2800      	cmp	r0, #0
     836:	d1e5      	bne.n	804 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     838:	4b7d      	ldr	r3, [pc, #500]	; (a30 <m2m_wifi_cb+0x294>)
     83a:	681b      	ldr	r3, [r3, #0]
     83c:	2b00      	cmp	r3, #0
     83e:	d0e1      	beq.n	804 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
     840:	a903      	add	r1, sp, #12
     842:	301b      	adds	r0, #27
     844:	4798      	blx	r3
     846:	e7dd      	b.n	804 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
     848:	2301      	movs	r3, #1
     84a:	2230      	movs	r2, #48	; 0x30
     84c:	a903      	add	r1, sp, #12
     84e:	0028      	movs	r0, r5
     850:	4c76      	ldr	r4, [pc, #472]	; (a2c <m2m_wifi_cb+0x290>)
     852:	47a0      	blx	r4
     854:	2800      	cmp	r0, #0
     856:	d1d5      	bne.n	804 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
     858:	4b75      	ldr	r3, [pc, #468]	; (a30 <m2m_wifi_cb+0x294>)
     85a:	681b      	ldr	r3, [r3, #0]
     85c:	2b00      	cmp	r3, #0
     85e:	d0d1      	beq.n	804 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
     860:	a903      	add	r1, sp, #12
     862:	3006      	adds	r0, #6
     864:	4798      	blx	r3
     866:	e7cd      	b.n	804 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
     868:	2300      	movs	r3, #0
     86a:	2214      	movs	r2, #20
     86c:	a903      	add	r1, sp, #12
     86e:	0028      	movs	r0, r5
     870:	4c6e      	ldr	r4, [pc, #440]	; (a2c <m2m_wifi_cb+0x290>)
     872:	47a0      	blx	r4
     874:	2800      	cmp	r0, #0
     876:	d1c5      	bne.n	804 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     878:	4b6d      	ldr	r3, [pc, #436]	; (a30 <m2m_wifi_cb+0x294>)
     87a:	681b      	ldr	r3, [r3, #0]
     87c:	2b00      	cmp	r3, #0
     87e:	d0c1      	beq.n	804 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
     880:	a903      	add	r1, sp, #12
     882:	3032      	adds	r0, #50	; 0x32
     884:	4798      	blx	r3
     886:	e7bd      	b.n	804 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
     888:	2264      	movs	r2, #100	; 0x64
     88a:	2100      	movs	r1, #0
     88c:	a803      	add	r0, sp, #12
     88e:	4b69      	ldr	r3, [pc, #420]	; (a34 <m2m_wifi_cb+0x298>)
     890:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
     892:	2300      	movs	r3, #0
     894:	2264      	movs	r2, #100	; 0x64
     896:	a903      	add	r1, sp, #12
     898:	0028      	movs	r0, r5
     89a:	4c64      	ldr	r4, [pc, #400]	; (a2c <m2m_wifi_cb+0x290>)
     89c:	47a0      	blx	r4
     89e:	2800      	cmp	r0, #0
     8a0:	d1b0      	bne.n	804 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     8a2:	4b63      	ldr	r3, [pc, #396]	; (a30 <m2m_wifi_cb+0x294>)
     8a4:	681b      	ldr	r3, [r3, #0]
     8a6:	2b00      	cmp	r3, #0
     8a8:	d0ac      	beq.n	804 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
     8aa:	a903      	add	r1, sp, #12
     8ac:	302f      	adds	r0, #47	; 0x2f
     8ae:	4798      	blx	r3
     8b0:	e7a8      	b.n	804 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
     8b2:	2300      	movs	r3, #0
     8b4:	2204      	movs	r2, #4
     8b6:	a903      	add	r1, sp, #12
     8b8:	0028      	movs	r0, r5
     8ba:	4c5c      	ldr	r4, [pc, #368]	; (a2c <m2m_wifi_cb+0x290>)
     8bc:	47a0      	blx	r4
     8be:	2800      	cmp	r0, #0
     8c0:	d1a0      	bne.n	804 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
     8c2:	485d      	ldr	r0, [pc, #372]	; (a38 <m2m_wifi_cb+0x29c>)
     8c4:	4d56      	ldr	r5, [pc, #344]	; (a20 <m2m_wifi_cb+0x284>)
     8c6:	47a8      	blx	r5
     8c8:	9c03      	ldr	r4, [sp, #12]
     8ca:	0a23      	lsrs	r3, r4, #8
     8cc:	20ff      	movs	r0, #255	; 0xff
     8ce:	4003      	ands	r3, r0
     8d0:	0c22      	lsrs	r2, r4, #16
     8d2:	4002      	ands	r2, r0
     8d4:	0e21      	lsrs	r1, r4, #24
     8d6:	4020      	ands	r0, r4
     8d8:	9000      	str	r0, [sp, #0]
     8da:	4858      	ldr	r0, [pc, #352]	; (a3c <m2m_wifi_cb+0x2a0>)
     8dc:	47a8      	blx	r5
     8de:	200d      	movs	r0, #13
     8e0:	4b51      	ldr	r3, [pc, #324]	; (a28 <m2m_wifi_cb+0x28c>)
     8e2:	4798      	blx	r3
			if (gpfAppWifiCb)
     8e4:	4b52      	ldr	r3, [pc, #328]	; (a30 <m2m_wifi_cb+0x294>)
     8e6:	681b      	ldr	r3, [r3, #0]
     8e8:	2b00      	cmp	r3, #0
     8ea:	d100      	bne.n	8ee <m2m_wifi_cb+0x152>
     8ec:	e78a      	b.n	804 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
     8ee:	2100      	movs	r1, #0
     8f0:	2034      	movs	r0, #52	; 0x34
     8f2:	4798      	blx	r3
     8f4:	e786      	b.n	804 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
     8f6:	2200      	movs	r2, #0
     8f8:	4b51      	ldr	r3, [pc, #324]	; (a40 <m2m_wifi_cb+0x2a4>)
     8fa:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
     8fc:	2300      	movs	r3, #0
     8fe:	3204      	adds	r2, #4
     900:	a903      	add	r1, sp, #12
     902:	0028      	movs	r0, r5
     904:	4c49      	ldr	r4, [pc, #292]	; (a2c <m2m_wifi_cb+0x290>)
     906:	47a0      	blx	r4
     908:	2800      	cmp	r0, #0
     90a:	d000      	beq.n	90e <m2m_wifi_cb+0x172>
     90c:	e77a      	b.n	804 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
     90e:	ab03      	add	r3, sp, #12
     910:	781a      	ldrb	r2, [r3, #0]
     912:	4b4c      	ldr	r3, [pc, #304]	; (a44 <m2m_wifi_cb+0x2a8>)
     914:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
     916:	4b46      	ldr	r3, [pc, #280]	; (a30 <m2m_wifi_cb+0x294>)
     918:	681b      	ldr	r3, [r3, #0]
     91a:	2b00      	cmp	r3, #0
     91c:	d100      	bne.n	920 <m2m_wifi_cb+0x184>
     91e:	e771      	b.n	804 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
     920:	a903      	add	r1, sp, #12
     922:	3011      	adds	r0, #17
     924:	4798      	blx	r3
     926:	e76d      	b.n	804 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
     928:	2300      	movs	r3, #0
     92a:	222c      	movs	r2, #44	; 0x2c
     92c:	a903      	add	r1, sp, #12
     92e:	0028      	movs	r0, r5
     930:	4c3e      	ldr	r4, [pc, #248]	; (a2c <m2m_wifi_cb+0x290>)
     932:	47a0      	blx	r4
     934:	2800      	cmp	r0, #0
     936:	d000      	beq.n	93a <m2m_wifi_cb+0x19e>
     938:	e764      	b.n	804 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     93a:	4b3d      	ldr	r3, [pc, #244]	; (a30 <m2m_wifi_cb+0x294>)
     93c:	681b      	ldr	r3, [r3, #0]
     93e:	2b00      	cmp	r3, #0
     940:	d100      	bne.n	944 <m2m_wifi_cb+0x1a8>
     942:	e75f      	b.n	804 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
     944:	a903      	add	r1, sp, #12
     946:	3013      	adds	r0, #19
     948:	4798      	blx	r3
     94a:	e75b      	b.n	804 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
     94c:	2300      	movs	r3, #0
     94e:	2204      	movs	r2, #4
     950:	a91c      	add	r1, sp, #112	; 0x70
     952:	0028      	movs	r0, r5
     954:	4c35      	ldr	r4, [pc, #212]	; (a2c <m2m_wifi_cb+0x290>)
     956:	47a0      	blx	r4
     958:	2800      	cmp	r0, #0
     95a:	d000      	beq.n	95e <m2m_wifi_cb+0x1c2>
     95c:	e752      	b.n	804 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     95e:	4b34      	ldr	r3, [pc, #208]	; (a30 <m2m_wifi_cb+0x294>)
     960:	681b      	ldr	r3, [r3, #0]
     962:	2b00      	cmp	r3, #0
     964:	d100      	bne.n	968 <m2m_wifi_cb+0x1cc>
     966:	e74d      	b.n	804 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
     968:	a91c      	add	r1, sp, #112	; 0x70
     96a:	3004      	adds	r0, #4
     96c:	4798      	blx	r3
     96e:	e749      	b.n	804 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
     970:	2300      	movs	r3, #0
     972:	2204      	movs	r2, #4
     974:	a91c      	add	r1, sp, #112	; 0x70
     976:	0028      	movs	r0, r5
     978:	4c2c      	ldr	r4, [pc, #176]	; (a2c <m2m_wifi_cb+0x290>)
     97a:	47a0      	blx	r4
     97c:	2800      	cmp	r0, #0
     97e:	d000      	beq.n	982 <m2m_wifi_cb+0x1e6>
     980:	e740      	b.n	804 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     982:	4b2b      	ldr	r3, [pc, #172]	; (a30 <m2m_wifi_cb+0x294>)
     984:	681b      	ldr	r3, [r3, #0]
     986:	2b00      	cmp	r3, #0
     988:	d100      	bne.n	98c <m2m_wifi_cb+0x1f0>
     98a:	e73b      	b.n	804 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
     98c:	a91c      	add	r1, sp, #112	; 0x70
     98e:	3065      	adds	r0, #101	; 0x65
     990:	4798      	blx	r3
     992:	e737      	b.n	804 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
     994:	2301      	movs	r3, #1
     996:	2264      	movs	r2, #100	; 0x64
     998:	a903      	add	r1, sp, #12
     99a:	0028      	movs	r0, r5
     99c:	4c23      	ldr	r4, [pc, #140]	; (a2c <m2m_wifi_cb+0x290>)
     99e:	47a0      	blx	r4
     9a0:	2800      	cmp	r0, #0
     9a2:	d000      	beq.n	9a6 <m2m_wifi_cb+0x20a>
     9a4:	e72e      	b.n	804 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
     9a6:	4b22      	ldr	r3, [pc, #136]	; (a30 <m2m_wifi_cb+0x294>)
     9a8:	681b      	ldr	r3, [r3, #0]
     9aa:	2b00      	cmp	r3, #0
     9ac:	d100      	bne.n	9b0 <m2m_wifi_cb+0x214>
     9ae:	e729      	b.n	804 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
     9b0:	a903      	add	r1, sp, #12
     9b2:	3009      	adds	r0, #9
     9b4:	4798      	blx	r3
     9b6:	e725      	b.n	804 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
     9b8:	2301      	movs	r3, #1
     9ba:	2204      	movs	r2, #4
     9bc:	a903      	add	r1, sp, #12
     9be:	0028      	movs	r0, r5
     9c0:	4c1a      	ldr	r4, [pc, #104]	; (a2c <m2m_wifi_cb+0x290>)
     9c2:	47a0      	blx	r4
     9c4:	2800      	cmp	r0, #0
     9c6:	d000      	beq.n	9ca <m2m_wifi_cb+0x22e>
     9c8:	e71c      	b.n	804 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
     9ca:	4b19      	ldr	r3, [pc, #100]	; (a30 <m2m_wifi_cb+0x294>)
     9cc:	681b      	ldr	r3, [r3, #0]
     9ce:	2b00      	cmp	r3, #0
     9d0:	d100      	bne.n	9d4 <m2m_wifi_cb+0x238>
     9d2:	e717      	b.n	804 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
     9d4:	a903      	add	r1, sp, #12
     9d6:	302a      	adds	r0, #42	; 0x2a
     9d8:	4798      	blx	r3
     9da:	e713      	b.n	804 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
     9dc:	2300      	movs	r3, #0
     9de:	2208      	movs	r2, #8
     9e0:	a903      	add	r1, sp, #12
     9e2:	0028      	movs	r0, r5
     9e4:	4c11      	ldr	r4, [pc, #68]	; (a2c <m2m_wifi_cb+0x290>)
     9e6:	47a0      	blx	r4
     9e8:	2800      	cmp	r0, #0
     9ea:	d000      	beq.n	9ee <m2m_wifi_cb+0x252>
     9ec:	e70a      	b.n	804 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
     9ee:	ab03      	add	r3, sp, #12
     9f0:	889a      	ldrh	r2, [r3, #4]
     9f2:	0028      	movs	r0, r5
     9f4:	3008      	adds	r0, #8
     9f6:	2301      	movs	r3, #1
     9f8:	9903      	ldr	r1, [sp, #12]
     9fa:	4c0c      	ldr	r4, [pc, #48]	; (a2c <m2m_wifi_cb+0x290>)
     9fc:	47a0      	blx	r4
     9fe:	2800      	cmp	r0, #0
     a00:	d000      	beq.n	a04 <m2m_wifi_cb+0x268>
     a02:	e6ff      	b.n	804 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
     a04:	4b0a      	ldr	r3, [pc, #40]	; (a30 <m2m_wifi_cb+0x294>)
     a06:	681b      	ldr	r3, [r3, #0]
     a08:	2b00      	cmp	r3, #0
     a0a:	d100      	bne.n	a0e <m2m_wifi_cb+0x272>
     a0c:	e6fa      	b.n	804 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
     a0e:	a903      	add	r1, sp, #12
     a10:	3020      	adds	r0, #32
     a12:	4798      	blx	r3
     a14:	e6f6      	b.n	804 <m2m_wifi_cb+0x68>
     a16:	46c0      	nop			; (mov r8, r8)
     a18:	00004c90 	.word	0x00004c90
     a1c:	00004b3c 	.word	0x00004b3c
     a20:	000039e1 	.word	0x000039e1
     a24:	00004ccc 	.word	0x00004ccc
     a28:	00003a15 	.word	0x00003a15
     a2c:	000005f5 	.word	0x000005f5
     a30:	20000090 	.word	0x20000090
     a34:	0000058d 	.word	0x0000058d
     a38:	00004c58 	.word	0x00004c58
     a3c:	00004cac 	.word	0x00004cac
     a40:	20000095 	.word	0x20000095
     a44:	20000094 	.word	0x20000094

00000a48 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
     a48:	b5f0      	push	{r4, r5, r6, r7, lr}
     a4a:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
     a4c:	2201      	movs	r2, #1
     a4e:	230f      	movs	r3, #15
     a50:	446b      	add	r3, sp
     a52:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
     a54:	2800      	cmp	r0, #0
     a56:	d061      	beq.n	b1c <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
     a58:	6802      	ldr	r2, [r0, #0]
     a5a:	4b32      	ldr	r3, [pc, #200]	; (b24 <m2m_wifi_init+0xdc>)
     a5c:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
     a5e:	2200      	movs	r2, #0
     a60:	4b31      	ldr	r3, [pc, #196]	; (b28 <m2m_wifi_init+0xe0>)
     a62:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
     a64:	200f      	movs	r0, #15
     a66:	4468      	add	r0, sp
     a68:	4b30      	ldr	r3, [pc, #192]	; (b2c <m2m_wifi_init+0xe4>)
     a6a:	4798      	blx	r3
     a6c:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
     a6e:	d002      	beq.n	a76 <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
     a70:	0020      	movs	r0, r4
     a72:	b00f      	add	sp, #60	; 0x3c
     a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
     a76:	2000      	movs	r0, #0
     a78:	4b2d      	ldr	r3, [pc, #180]	; (b30 <m2m_wifi_init+0xe8>)
     a7a:	4798      	blx	r3
     a7c:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
     a7e:	d149      	bne.n	b14 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
     a80:	492c      	ldr	r1, [pc, #176]	; (b34 <m2m_wifi_init+0xec>)
     a82:	2001      	movs	r0, #1
     a84:	4b2c      	ldr	r3, [pc, #176]	; (b38 <m2m_wifi_init+0xf0>)
     a86:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
     a88:	ae04      	add	r6, sp, #16
     a8a:	0030      	movs	r0, r6
     a8c:	4b2b      	ldr	r3, [pc, #172]	; (b3c <m2m_wifi_init+0xf4>)
     a8e:	4798      	blx	r3
     a90:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
     a92:	482b      	ldr	r0, [pc, #172]	; (b40 <m2m_wifi_init+0xf8>)
     a94:	4d2b      	ldr	r5, [pc, #172]	; (b44 <m2m_wifi_init+0xfc>)
     a96:	47a8      	blx	r5
     a98:	79b3      	ldrb	r3, [r6, #6]
     a9a:	7972      	ldrb	r2, [r6, #5]
     a9c:	7931      	ldrb	r1, [r6, #4]
     a9e:	8c30      	ldrh	r0, [r6, #32]
     aa0:	9000      	str	r0, [sp, #0]
     aa2:	4829      	ldr	r0, [pc, #164]	; (b48 <m2m_wifi_init+0x100>)
     aa4:	47a8      	blx	r5
     aa6:	200d      	movs	r0, #13
     aa8:	4f28      	ldr	r7, [pc, #160]	; (b4c <m2m_wifi_init+0x104>)
     aaa:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
     aac:	4824      	ldr	r0, [pc, #144]	; (b40 <m2m_wifi_init+0xf8>)
     aae:	47a8      	blx	r5
     ab0:	2226      	movs	r2, #38	; 0x26
     ab2:	446a      	add	r2, sp
     ab4:	211a      	movs	r1, #26
     ab6:	4469      	add	r1, sp
     ab8:	4825      	ldr	r0, [pc, #148]	; (b50 <m2m_wifi_init+0x108>)
     aba:	47a8      	blx	r5
     abc:	200d      	movs	r0, #13
     abe:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
     ac0:	481f      	ldr	r0, [pc, #124]	; (b40 <m2m_wifi_init+0xf8>)
     ac2:	47a8      	blx	r5
     ac4:	7a73      	ldrb	r3, [r6, #9]
     ac6:	7a32      	ldrb	r2, [r6, #8]
     ac8:	79f1      	ldrb	r1, [r6, #7]
     aca:	4822      	ldr	r0, [pc, #136]	; (b54 <m2m_wifi_init+0x10c>)
     acc:	47a8      	blx	r5
     ace:	200d      	movs	r0, #13
     ad0:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
     ad2:	481b      	ldr	r0, [pc, #108]	; (b40 <m2m_wifi_init+0xf8>)
     ad4:	47a8      	blx	r5
     ad6:	2302      	movs	r3, #2
     ad8:	2205      	movs	r2, #5
     ada:	2113      	movs	r1, #19
     adc:	481e      	ldr	r0, [pc, #120]	; (b58 <m2m_wifi_init+0x110>)
     ade:	47a8      	blx	r5
     ae0:	200d      	movs	r0, #13
     ae2:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
     ae4:	4816      	ldr	r0, [pc, #88]	; (b40 <m2m_wifi_init+0xf8>)
     ae6:	47a8      	blx	r5
     ae8:	4a1c      	ldr	r2, [pc, #112]	; (b5c <m2m_wifi_init+0x114>)
     aea:	491d      	ldr	r1, [pc, #116]	; (b60 <m2m_wifi_init+0x118>)
     aec:	481d      	ldr	r0, [pc, #116]	; (b64 <m2m_wifi_init+0x11c>)
     aee:	47a8      	blx	r5
     af0:	200d      	movs	r0, #13
     af2:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
     af4:	0023      	movs	r3, r4
     af6:	330d      	adds	r3, #13
     af8:	d1ba      	bne.n	a70 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
     afa:	22e8      	movs	r2, #232	; 0xe8
     afc:	32ff      	adds	r2, #255	; 0xff
     afe:	491a      	ldr	r1, [pc, #104]	; (b68 <m2m_wifi_init+0x120>)
     b00:	481a      	ldr	r0, [pc, #104]	; (b6c <m2m_wifi_init+0x124>)
     b02:	4b10      	ldr	r3, [pc, #64]	; (b44 <m2m_wifi_init+0xfc>)
     b04:	4798      	blx	r3
     b06:	481a      	ldr	r0, [pc, #104]	; (b70 <m2m_wifi_init+0x128>)
     b08:	4b1a      	ldr	r3, [pc, #104]	; (b74 <m2m_wifi_init+0x12c>)
     b0a:	4798      	blx	r3
     b0c:	200d      	movs	r0, #13
     b0e:	4b0f      	ldr	r3, [pc, #60]	; (b4c <m2m_wifi_init+0x104>)
     b10:	4798      	blx	r3
     b12:	e7ad      	b.n	a70 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
     b14:	2000      	movs	r0, #0
     b16:	4b18      	ldr	r3, [pc, #96]	; (b78 <m2m_wifi_init+0x130>)
     b18:	4798      	blx	r3
     b1a:	e7a9      	b.n	a70 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
     b1c:	240c      	movs	r4, #12
     b1e:	4264      	negs	r4, r4
     b20:	e7a6      	b.n	a70 <m2m_wifi_init+0x28>
     b22:	46c0      	nop			; (mov r8, r8)
     b24:	20000090 	.word	0x20000090
     b28:	20000095 	.word	0x20000095
     b2c:	00001099 	.word	0x00001099
     b30:	00000765 	.word	0x00000765
     b34:	0000079d 	.word	0x0000079d
     b38:	000006e1 	.word	0x000006e1
     b3c:	00000fb5 	.word	0x00000fb5
     b40:	00004c58 	.word	0x00004c58
     b44:	000039e1 	.word	0x000039e1
     b48:	00004ce0 	.word	0x00004ce0
     b4c:	00003a15 	.word	0x00003a15
     b50:	00004d08 	.word	0x00004d08
     b54:	00004d24 	.word	0x00004d24
     b58:	00004d48 	.word	0x00004d48
     b5c:	00004d60 	.word	0x00004d60
     b60:	00004d6c 	.word	0x00004d6c
     b64:	00004d78 	.word	0x00004d78
     b68:	00004c9c 	.word	0x00004c9c
     b6c:	00004b3c 	.word	0x00004b3c
     b70:	00004d90 	.word	0x00004d90
     b74:	00003afd 	.word	0x00003afd
     b78:	0000116d 	.word	0x0000116d

00000b7c <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
     b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b7e:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
     b80:	2580      	movs	r5, #128	; 0x80
     b82:	006d      	lsls	r5, r5, #1
     b84:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
     b86:	24a5      	movs	r4, #165	; 0xa5
     b88:	0164      	lsls	r4, r4, #5
     b8a:	4f08      	ldr	r7, [pc, #32]	; (bac <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
     b8c:	4e08      	ldr	r6, [pc, #32]	; (bb0 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
     b8e:	0029      	movs	r1, r5
     b90:	0020      	movs	r0, r4
     b92:	47b8      	blx	r7
			uint32 reg = 0;
     b94:	2300      	movs	r3, #0
     b96:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
     b98:	a901      	add	r1, sp, #4
     b9a:	0020      	movs	r0, r4
     b9c:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
     b9e:	2800      	cmp	r0, #0
     ba0:	d1f5      	bne.n	b8e <chip_apply_conf+0x12>
				if(reg == val32)
     ba2:	9b01      	ldr	r3, [sp, #4]
     ba4:	429d      	cmp	r5, r3
     ba6:	d1f2      	bne.n	b8e <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
     ba8:	b003      	add	sp, #12
     baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bac:	00000f41 	.word	0x00000f41
     bb0:	00000f35 	.word	0x00000f35

00000bb4 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
     bb4:	b500      	push	{lr}
     bb6:	b083      	sub	sp, #12
	uint32 reg = 0;
     bb8:	2300      	movs	r3, #0
     bba:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
     bbc:	a901      	add	r1, sp, #4
     bbe:	4811      	ldr	r0, [pc, #68]	; (c04 <enable_interrupts+0x50>)
     bc0:	4b11      	ldr	r3, [pc, #68]	; (c08 <enable_interrupts+0x54>)
     bc2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
     bc4:	2800      	cmp	r0, #0
     bc6:	d001      	beq.n	bcc <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
     bc8:	b003      	add	sp, #12
     bca:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
     bcc:	2180      	movs	r1, #128	; 0x80
     bce:	0049      	lsls	r1, r1, #1
     bd0:	9b01      	ldr	r3, [sp, #4]
     bd2:	4319      	orrs	r1, r3
     bd4:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
     bd6:	480b      	ldr	r0, [pc, #44]	; (c04 <enable_interrupts+0x50>)
     bd8:	4b0c      	ldr	r3, [pc, #48]	; (c0c <enable_interrupts+0x58>)
     bda:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
     bdc:	2800      	cmp	r0, #0
     bde:	d1f3      	bne.n	bc8 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
     be0:	a901      	add	r1, sp, #4
     be2:	20d0      	movs	r0, #208	; 0xd0
     be4:	0140      	lsls	r0, r0, #5
     be6:	4b08      	ldr	r3, [pc, #32]	; (c08 <enable_interrupts+0x54>)
     be8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
     bea:	2800      	cmp	r0, #0
     bec:	d1ec      	bne.n	bc8 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
     bee:	2180      	movs	r1, #128	; 0x80
     bf0:	0249      	lsls	r1, r1, #9
     bf2:	9b01      	ldr	r3, [sp, #4]
     bf4:	4319      	orrs	r1, r3
     bf6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
     bf8:	20d0      	movs	r0, #208	; 0xd0
     bfa:	0140      	lsls	r0, r0, #5
     bfc:	4b03      	ldr	r3, [pc, #12]	; (c0c <enable_interrupts+0x58>)
     bfe:	4798      	blx	r3
     c00:	e7e2      	b.n	bc8 <enable_interrupts+0x14>
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	00001408 	.word	0x00001408
     c08:	00000f35 	.word	0x00000f35
     c0c:	00000f41 	.word	0x00000f41

00000c10 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
     c10:	b510      	push	{r4, lr}
     c12:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
     c14:	4b28      	ldr	r3, [pc, #160]	; (cb8 <nmi_get_chipid+0xa8>)
     c16:	681c      	ldr	r4, [r3, #0]
     c18:	2c00      	cmp	r4, #0
     c1a:	d004      	beq.n	c26 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
     c1c:	4b26      	ldr	r3, [pc, #152]	; (cb8 <nmi_get_chipid+0xa8>)
     c1e:	681c      	ldr	r4, [r3, #0]
}
     c20:	0020      	movs	r0, r4
     c22:	b002      	add	sp, #8
     c24:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
     c26:	0019      	movs	r1, r3
     c28:	2080      	movs	r0, #128	; 0x80
     c2a:	0140      	lsls	r0, r0, #5
     c2c:	4b23      	ldr	r3, [pc, #140]	; (cbc <nmi_get_chipid+0xac>)
     c2e:	4798      	blx	r3
     c30:	2800      	cmp	r0, #0
     c32:	d003      	beq.n	c3c <nmi_get_chipid+0x2c>
			chipid = 0;
     c34:	2200      	movs	r2, #0
     c36:	4b20      	ldr	r3, [pc, #128]	; (cb8 <nmi_get_chipid+0xa8>)
     c38:	601a      	str	r2, [r3, #0]
			return 0;
     c3a:	e7f1      	b.n	c20 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
     c3c:	a901      	add	r1, sp, #4
     c3e:	4820      	ldr	r0, [pc, #128]	; (cc0 <nmi_get_chipid+0xb0>)
     c40:	4b1e      	ldr	r3, [pc, #120]	; (cbc <nmi_get_chipid+0xac>)
     c42:	4798      	blx	r3
     c44:	2800      	cmp	r0, #0
     c46:	d003      	beq.n	c50 <nmi_get_chipid+0x40>
			chipid = 0;
     c48:	2200      	movs	r2, #0
     c4a:	4b1b      	ldr	r3, [pc, #108]	; (cb8 <nmi_get_chipid+0xa8>)
     c4c:	601a      	str	r2, [r3, #0]
			return 0;
     c4e:	e7e7      	b.n	c20 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
     c50:	4b19      	ldr	r3, [pc, #100]	; (cb8 <nmi_get_chipid+0xa8>)
     c52:	681b      	ldr	r3, [r3, #0]
     c54:	4a1b      	ldr	r2, [pc, #108]	; (cc4 <nmi_get_chipid+0xb4>)
     c56:	4293      	cmp	r3, r2
     c58:	d00e      	beq.n	c78 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
     c5a:	4a1b      	ldr	r2, [pc, #108]	; (cc8 <nmi_get_chipid+0xb8>)
     c5c:	4293      	cmp	r3, r2
     c5e:	d012      	beq.n	c86 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
     c60:	4a1a      	ldr	r2, [pc, #104]	; (ccc <nmi_get_chipid+0xbc>)
     c62:	4293      	cmp	r3, r2
     c64:	d01c      	beq.n	ca0 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
     c66:	4914      	ldr	r1, [pc, #80]	; (cb8 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
     c68:	4a19      	ldr	r2, [pc, #100]	; (cd0 <nmi_get_chipid+0xc0>)
     c6a:	680b      	ldr	r3, [r1, #0]
     c6c:	401a      	ands	r2, r3
		chipid |= 0x050000;
     c6e:	23a0      	movs	r3, #160	; 0xa0
     c70:	02db      	lsls	r3, r3, #11
     c72:	4313      	orrs	r3, r2
     c74:	600b      	str	r3, [r1, #0]
     c76:	e7d1      	b.n	c1c <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
     c78:	9b01      	ldr	r3, [sp, #4]
     c7a:	2b01      	cmp	r3, #1
     c7c:	d0f3      	beq.n	c66 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
     c7e:	4a15      	ldr	r2, [pc, #84]	; (cd4 <nmi_get_chipid+0xc4>)
     c80:	4b0d      	ldr	r3, [pc, #52]	; (cb8 <nmi_get_chipid+0xa8>)
     c82:	601a      	str	r2, [r3, #0]
     c84:	e7ef      	b.n	c66 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
     c86:	9b01      	ldr	r3, [sp, #4]
     c88:	2b03      	cmp	r3, #3
     c8a:	d0ec      	beq.n	c66 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
     c8c:	2b04      	cmp	r3, #4
     c8e:	d003      	beq.n	c98 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
     c90:	4a11      	ldr	r2, [pc, #68]	; (cd8 <nmi_get_chipid+0xc8>)
     c92:	4b09      	ldr	r3, [pc, #36]	; (cb8 <nmi_get_chipid+0xa8>)
     c94:	601a      	str	r2, [r3, #0]
     c96:	e7e6      	b.n	c66 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
     c98:	4a10      	ldr	r2, [pc, #64]	; (cdc <nmi_get_chipid+0xcc>)
     c9a:	4b07      	ldr	r3, [pc, #28]	; (cb8 <nmi_get_chipid+0xa8>)
     c9c:	601a      	str	r2, [r3, #0]
     c9e:	e7e2      	b.n	c66 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
     ca0:	4905      	ldr	r1, [pc, #20]	; (cb8 <nmi_get_chipid+0xa8>)
     ca2:	20ec      	movs	r0, #236	; 0xec
     ca4:	0380      	lsls	r0, r0, #14
     ca6:	4b05      	ldr	r3, [pc, #20]	; (cbc <nmi_get_chipid+0xac>)
     ca8:	4798      	blx	r3
     caa:	2800      	cmp	r0, #0
     cac:	d0db      	beq.n	c66 <nmi_get_chipid+0x56>
			chipid = 0;
     cae:	2200      	movs	r2, #0
     cb0:	4b01      	ldr	r3, [pc, #4]	; (cb8 <nmi_get_chipid+0xa8>)
     cb2:	601a      	str	r2, [r3, #0]
			return 0;
     cb4:	e7b4      	b.n	c20 <nmi_get_chipid+0x10>
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	20000098 	.word	0x20000098
     cbc:	00000f35 	.word	0x00000f35
     cc0:	000013f4 	.word	0x000013f4
     cc4:	001002a0 	.word	0x001002a0
     cc8:	001002b0 	.word	0x001002b0
     ccc:	001000f0 	.word	0x001000f0
     cd0:	fff0ffff 	.word	0xfff0ffff
     cd4:	001002a1 	.word	0x001002a1
     cd8:	001002b2 	.word	0x001002b2
     cdc:	001002b1 	.word	0x001002b1

00000ce0 <nmi_get_rfrevid>:

uint32 nmi_get_rfrevid(void)
{
     ce0:	b500      	push	{lr}
     ce2:	b083      	sub	sp, #12
    uint32 rfrevid;
    if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
     ce4:	a901      	add	r1, sp, #4
     ce6:	4805      	ldr	r0, [pc, #20]	; (cfc <nmi_get_rfrevid+0x1c>)
     ce8:	4b05      	ldr	r3, [pc, #20]	; (d00 <nmi_get_rfrevid+0x20>)
     cea:	4798      	blx	r3
        rfrevid = 0;
        return 0;
     cec:	2300      	movs	r3, #0
    if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
     cee:	2800      	cmp	r0, #0
     cf0:	d100      	bne.n	cf4 <nmi_get_rfrevid+0x14>
    }
    return rfrevid;
     cf2:	9b01      	ldr	r3, [sp, #4]
}
     cf4:	0018      	movs	r0, r3
     cf6:	b003      	add	sp, #12
     cf8:	bd00      	pop	{pc}
     cfa:	46c0      	nop			; (mov r8, r8)
     cfc:	000013f4 	.word	0x000013f4
     d00:	00000f35 	.word	0x00000f35

00000d04 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
     d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d06:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
     d08:	4d2d      	ldr	r5, [pc, #180]	; (dc0 <wait_for_bootrom+0xbc>)
     d0a:	4c2e      	ldr	r4, [pc, #184]	; (dc4 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
     d0c:	4e2e      	ldr	r6, [pc, #184]	; (dc8 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
     d0e:	0028      	movs	r0, r5
     d10:	47a0      	blx	r4
		if (reg & 0x80000000) {
     d12:	2800      	cmp	r0, #0
     d14:	db02      	blt.n	d1c <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
     d16:	2001      	movs	r0, #1
     d18:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
     d1a:	e7f8      	b.n	d0e <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
     d1c:	482b      	ldr	r0, [pc, #172]	; (dcc <wait_for_bootrom+0xc8>)
     d1e:	4b29      	ldr	r3, [pc, #164]	; (dc4 <wait_for_bootrom+0xc0>)
     d20:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
     d22:	07c3      	lsls	r3, r0, #31
     d24:	d409      	bmi.n	d3a <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
     d26:	4e28      	ldr	r6, [pc, #160]	; (dc8 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
     d28:	4c29      	ldr	r4, [pc, #164]	; (dd0 <wait_for_bootrom+0xcc>)
     d2a:	4d26      	ldr	r5, [pc, #152]	; (dc4 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
     d2c:	2001      	movs	r0, #1
     d2e:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
     d30:	0020      	movs	r0, r4
     d32:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
     d34:	4b27      	ldr	r3, [pc, #156]	; (dd4 <wait_for_bootrom+0xd0>)
     d36:	4298      	cmp	r0, r3
     d38:	d1f8      	bne.n	d2c <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
     d3a:	2f02      	cmp	r7, #2
     d3c:	d021      	beq.n	d82 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
     d3e:	2f03      	cmp	r7, #3
     d40:	d029      	beq.n	d96 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
     d42:	2f04      	cmp	r7, #4
     d44:	d030      	beq.n	da8 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
     d46:	4924      	ldr	r1, [pc, #144]	; (dd8 <wait_for_bootrom+0xd4>)
     d48:	4824      	ldr	r0, [pc, #144]	; (ddc <wait_for_bootrom+0xd8>)
     d4a:	4b25      	ldr	r3, [pc, #148]	; (de0 <wait_for_bootrom+0xdc>)
     d4c:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
     d4e:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
     d50:	4b24      	ldr	r3, [pc, #144]	; (de4 <wait_for_bootrom+0xe0>)
     d52:	4798      	blx	r3
     d54:	0500      	lsls	r0, r0, #20
     d56:	0d00      	lsrs	r0, r0, #20
     d58:	4b23      	ldr	r3, [pc, #140]	; (de8 <wait_for_bootrom+0xe4>)
     d5a:	4298      	cmp	r0, r3
     d5c:	d82a      	bhi.n	db4 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
     d5e:	0020      	movs	r0, r4
     d60:	4b22      	ldr	r3, [pc, #136]	; (dec <wait_for_bootrom+0xe8>)
     d62:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
     d64:	4822      	ldr	r0, [pc, #136]	; (df0 <wait_for_bootrom+0xec>)
     d66:	4c23      	ldr	r4, [pc, #140]	; (df4 <wait_for_bootrom+0xf0>)
     d68:	47a0      	blx	r4
     d6a:	491b      	ldr	r1, [pc, #108]	; (dd8 <wait_for_bootrom+0xd4>)
     d6c:	4822      	ldr	r0, [pc, #136]	; (df8 <wait_for_bootrom+0xf4>)
     d6e:	47a0      	blx	r4
     d70:	200d      	movs	r0, #13
     d72:	4b22      	ldr	r3, [pc, #136]	; (dfc <wait_for_bootrom+0xf8>)
     d74:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
     d76:	4922      	ldr	r1, [pc, #136]	; (e00 <wait_for_bootrom+0xfc>)
     d78:	4815      	ldr	r0, [pc, #84]	; (dd0 <wait_for_bootrom+0xcc>)
     d7a:	4b19      	ldr	r3, [pc, #100]	; (de0 <wait_for_bootrom+0xdc>)
     d7c:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
     d7e:	2000      	movs	r0, #0
     d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
     d82:	4920      	ldr	r1, [pc, #128]	; (e04 <wait_for_bootrom+0x100>)
     d84:	4820      	ldr	r0, [pc, #128]	; (e08 <wait_for_bootrom+0x104>)
     d86:	4c16      	ldr	r4, [pc, #88]	; (de0 <wait_for_bootrom+0xdc>)
     d88:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
     d8a:	2180      	movs	r1, #128	; 0x80
     d8c:	0349      	lsls	r1, r1, #13
     d8e:	4813      	ldr	r0, [pc, #76]	; (ddc <wait_for_bootrom+0xd8>)
     d90:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
     d92:	2400      	movs	r4, #0
     d94:	e7dc      	b.n	d50 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
     d96:	491b      	ldr	r1, [pc, #108]	; (e04 <wait_for_bootrom+0x100>)
     d98:	481b      	ldr	r0, [pc, #108]	; (e08 <wait_for_bootrom+0x104>)
     d9a:	4c11      	ldr	r4, [pc, #68]	; (de0 <wait_for_bootrom+0xdc>)
     d9c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
     d9e:	2100      	movs	r1, #0
     da0:	480e      	ldr	r0, [pc, #56]	; (ddc <wait_for_bootrom+0xd8>)
     da2:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
     da4:	2400      	movs	r4, #0
     da6:	e7d3      	b.n	d50 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
     da8:	490b      	ldr	r1, [pc, #44]	; (dd8 <wait_for_bootrom+0xd4>)
     daa:	480c      	ldr	r0, [pc, #48]	; (ddc <wait_for_bootrom+0xd8>)
     dac:	4b0c      	ldr	r3, [pc, #48]	; (de0 <wait_for_bootrom+0xdc>)
     dae:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
     db0:	2480      	movs	r4, #128	; 0x80
     db2:	e7cd      	b.n	d50 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
     db4:	2002      	movs	r0, #2
     db6:	4320      	orrs	r0, r4
     db8:	4b0c      	ldr	r3, [pc, #48]	; (dec <wait_for_bootrom+0xe8>)
     dba:	4798      	blx	r3
     dbc:	e7d2      	b.n	d64 <wait_for_bootrom+0x60>
     dbe:	46c0      	nop			; (mov r8, r8)
     dc0:	00001014 	.word	0x00001014
     dc4:	00000f29 	.word	0x00000f29
     dc8:	00000195 	.word	0x00000195
     dcc:	000207bc 	.word	0x000207bc
     dd0:	000c000c 	.word	0x000c000c
     dd4:	10add09e 	.word	0x10add09e
     dd8:	13521352 	.word	0x13521352
     ddc:	0000108c 	.word	0x0000108c
     de0:	00000f41 	.word	0x00000f41
     de4:	00000c11 	.word	0x00000c11
     de8:	0000039f 	.word	0x0000039f
     dec:	00000b7d 	.word	0x00000b7d
     df0:	00004c58 	.word	0x00004c58
     df4:	000039e1 	.word	0x000039e1
     df8:	00004e04 	.word	0x00004e04
     dfc:	00003a15 	.word	0x00003a15
     e00:	ef522f61 	.word	0xef522f61
     e04:	3c1cd57d 	.word	0x3c1cd57d
     e08:	000207ac 	.word	0x000207ac

00000e0c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
     e0c:	b570      	push	{r4, r5, r6, lr}
     e0e:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
     e10:	4b15      	ldr	r3, [pc, #84]	; (e68 <wait_for_firmware_start+0x5c>)
     e12:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
     e14:	4b15      	ldr	r3, [pc, #84]	; (e6c <wait_for_firmware_start+0x60>)
     e16:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
     e18:	3802      	subs	r0, #2
     e1a:	2801      	cmp	r0, #1
     e1c:	d911      	bls.n	e42 <wait_for_firmware_start+0x36>
{
     e1e:	2401      	movs	r4, #1
     e20:	4264      	negs	r4, r4
     e22:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
     e24:	4e12      	ldr	r6, [pc, #72]	; (e70 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
     e26:	4d13      	ldr	r5, [pc, #76]	; (e74 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
     e28:	9b00      	ldr	r3, [sp, #0]
     e2a:	4298      	cmp	r0, r3
     e2c:	d00e      	beq.n	e4c <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
     e2e:	2002      	movs	r0, #2
     e30:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
     e32:	9801      	ldr	r0, [sp, #4]
     e34:	47a8      	blx	r5
     e36:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
     e38:	2c00      	cmp	r4, #0
     e3a:	d1f5      	bne.n	e28 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
     e3c:	2005      	movs	r0, #5
     e3e:	4240      	negs	r0, r0
     e40:	e009      	b.n	e56 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
     e42:	4b0d      	ldr	r3, [pc, #52]	; (e78 <wait_for_firmware_start+0x6c>)
     e44:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
     e46:	4b0d      	ldr	r3, [pc, #52]	; (e7c <wait_for_firmware_start+0x70>)
     e48:	9300      	str	r3, [sp, #0]
     e4a:	e7e8      	b.n	e1e <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
     e4c:	9a00      	ldr	r2, [sp, #0]
     e4e:	4b07      	ldr	r3, [pc, #28]	; (e6c <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
     e50:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
     e52:	429a      	cmp	r2, r3
     e54:	d001      	beq.n	e5a <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
     e56:	b002      	add	sp, #8
     e58:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
     e5a:	2100      	movs	r1, #0
     e5c:	4802      	ldr	r0, [pc, #8]	; (e68 <wait_for_firmware_start+0x5c>)
     e5e:	4b08      	ldr	r3, [pc, #32]	; (e80 <wait_for_firmware_start+0x74>)
     e60:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
     e62:	2000      	movs	r0, #0
     e64:	e7f7      	b.n	e56 <wait_for_firmware_start+0x4a>
     e66:	46c0      	nop			; (mov r8, r8)
     e68:	0000108c 	.word	0x0000108c
     e6c:	02532636 	.word	0x02532636
     e70:	00000195 	.word	0x00000195
     e74:	00000f29 	.word	0x00000f29
     e78:	000207ac 	.word	0x000207ac
     e7c:	d75dc1c3 	.word	0xd75dc1c3
     e80:	00000f41 	.word	0x00000f41

00000e84 <chip_deinit>:

sint8 chip_deinit(void)
{
     e84:	b510      	push	{r4, lr}
     e86:	b082      	sub	sp, #8
	uint32 reg = 0;
     e88:	2300      	movs	r3, #0
     e8a:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
     e8c:	a901      	add	r1, sp, #4
     e8e:	20a0      	movs	r0, #160	; 0xa0
     e90:	0140      	lsls	r0, r0, #5
     e92:	4b14      	ldr	r3, [pc, #80]	; (ee4 <chip_deinit+0x60>)
     e94:	4798      	blx	r3
     e96:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
     e98:	d115      	bne.n	ec6 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
     e9a:	4913      	ldr	r1, [pc, #76]	; (ee8 <chip_deinit+0x64>)
     e9c:	9b01      	ldr	r3, [sp, #4]
     e9e:	4019      	ands	r1, r3
     ea0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
     ea2:	20a0      	movs	r0, #160	; 0xa0
     ea4:	0140      	lsls	r0, r0, #5
     ea6:	4b11      	ldr	r3, [pc, #68]	; (eec <chip_deinit+0x68>)
     ea8:	4798      	blx	r3
     eaa:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
     eac:	d016      	beq.n	edc <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
     eae:	4a10      	ldr	r2, [pc, #64]	; (ef0 <chip_deinit+0x6c>)
     eb0:	4910      	ldr	r1, [pc, #64]	; (ef4 <chip_deinit+0x70>)
     eb2:	4811      	ldr	r0, [pc, #68]	; (ef8 <chip_deinit+0x74>)
     eb4:	4b11      	ldr	r3, [pc, #68]	; (efc <chip_deinit+0x78>)
     eb6:	4798      	blx	r3
     eb8:	4811      	ldr	r0, [pc, #68]	; (f00 <chip_deinit+0x7c>)
     eba:	4b12      	ldr	r3, [pc, #72]	; (f04 <chip_deinit+0x80>)
     ebc:	4798      	blx	r3
     ebe:	200d      	movs	r0, #13
     ec0:	4b11      	ldr	r3, [pc, #68]	; (f08 <chip_deinit+0x84>)
     ec2:	4798      	blx	r3
		goto ERR1;
     ec4:	e00a      	b.n	edc <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
     ec6:	4a11      	ldr	r2, [pc, #68]	; (f0c <chip_deinit+0x88>)
     ec8:	490a      	ldr	r1, [pc, #40]	; (ef4 <chip_deinit+0x70>)
     eca:	480b      	ldr	r0, [pc, #44]	; (ef8 <chip_deinit+0x74>)
     ecc:	4b0b      	ldr	r3, [pc, #44]	; (efc <chip_deinit+0x78>)
     ece:	4798      	blx	r3
     ed0:	480b      	ldr	r0, [pc, #44]	; (f00 <chip_deinit+0x7c>)
     ed2:	4b0c      	ldr	r3, [pc, #48]	; (f04 <chip_deinit+0x80>)
     ed4:	4798      	blx	r3
     ed6:	200d      	movs	r0, #13
     ed8:	4b0b      	ldr	r3, [pc, #44]	; (f08 <chip_deinit+0x84>)
     eda:	4798      	blx	r3
	}

ERR1:
	return ret;
}
     edc:	0020      	movs	r0, r4
     ede:	b002      	add	sp, #8
     ee0:	bd10      	pop	{r4, pc}
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	00000f35 	.word	0x00000f35
     ee8:	fffffbff 	.word	0xfffffbff
     eec:	00000f41 	.word	0x00000f41
     ef0:	0000020b 	.word	0x0000020b
     ef4:	00004dac 	.word	0x00004dac
     ef8:	00004b3c 	.word	0x00004b3c
     efc:	000039e1 	.word	0x000039e1
     f00:	00004db8 	.word	0x00004db8
     f04:	00003afd 	.word	0x00003afd
     f08:	00003a15 	.word	0x00003a15
     f0c:	00000205 	.word	0x00000205

00000f10 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
     f10:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
     f12:	4b01      	ldr	r3, [pc, #4]	; (f18 <nm_bus_iface_init+0x8>)
     f14:	4798      	blx	r3
	return ret;
}
     f16:	bd10      	pop	{r4, pc}
     f18:	000002d1 	.word	0x000002d1

00000f1c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
     f1c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
     f1e:	4b01      	ldr	r3, [pc, #4]	; (f24 <nm_bus_iface_deinit+0x8>)
     f20:	4798      	blx	r3

	return ret;
}
     f22:	bd10      	pop	{r4, pc}
     f24:	00000521 	.word	0x00000521

00000f28 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
     f28:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
     f2a:	4b01      	ldr	r3, [pc, #4]	; (f30 <nm_read_reg+0x8>)
     f2c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
     f2e:	bd10      	pop	{r4, pc}
     f30:	00001875 	.word	0x00001875

00000f34 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
     f34:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
     f36:	4b01      	ldr	r3, [pc, #4]	; (f3c <nm_read_reg_with_ret+0x8>)
     f38:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
     f3a:	bd10      	pop	{r4, pc}
     f3c:	00001889 	.word	0x00001889

00000f40 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
     f40:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
     f42:	4b01      	ldr	r3, [pc, #4]	; (f48 <nm_write_reg+0x8>)
     f44:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
     f46:	bd10      	pop	{r4, pc}
     f48:	000018a1 	.word	0x000018a1

00000f4c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
     f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f4e:	46d6      	mov	lr, sl
     f50:	464f      	mov	r7, r9
     f52:	4646      	mov	r6, r8
     f54:	b5c0      	push	{r6, r7, lr}
     f56:	b082      	sub	sp, #8
     f58:	4680      	mov	r8, r0
     f5a:	4689      	mov	r9, r1
     f5c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
     f5e:	4b13      	ldr	r3, [pc, #76]	; (fac <nm_read_block+0x60>)
     f60:	881f      	ldrh	r7, [r3, #0]
     f62:	3f08      	subs	r7, #8
     f64:	b2bb      	uxth	r3, r7
     f66:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
     f68:	001e      	movs	r6, r3
     f6a:	0004      	movs	r4, r0
     f6c:	429a      	cmp	r2, r3
     f6e:	d91a      	bls.n	fa6 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
     f70:	4b0f      	ldr	r3, [pc, #60]	; (fb0 <nm_read_block+0x64>)
     f72:	469a      	mov	sl, r3
     f74:	1a37      	subs	r7, r6, r0
     f76:	4643      	mov	r3, r8
     f78:	1ae1      	subs	r1, r4, r3
     f7a:	4449      	add	r1, r9
     f7c:	9a01      	ldr	r2, [sp, #4]
     f7e:	0020      	movs	r0, r4
     f80:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
     f82:	2800      	cmp	r0, #0
     f84:	d109      	bne.n	f9a <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
     f86:	1bad      	subs	r5, r5, r6
     f88:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
     f8a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
     f8c:	42b5      	cmp	r5, r6
     f8e:	d8f2      	bhi.n	f76 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
     f90:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
     f92:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
     f94:	0020      	movs	r0, r4
     f96:	4b06      	ldr	r3, [pc, #24]	; (fb0 <nm_read_block+0x64>)
     f98:	4798      	blx	r3
		}
	}

	return s8Ret;
}
     f9a:	b002      	add	sp, #8
     f9c:	bc1c      	pop	{r2, r3, r4}
     f9e:	4690      	mov	r8, r2
     fa0:	4699      	mov	r9, r3
     fa2:	46a2      	mov	sl, r4
     fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
     fa6:	2100      	movs	r1, #0
     fa8:	e7f2      	b.n	f90 <nm_read_block+0x44>
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	20000008 	.word	0x20000008
     fb0:	000019e5 	.word	0x000019e5

00000fb4 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
     fb4:	b570      	push	{r4, r5, r6, lr}
     fb6:	b084      	sub	sp, #16
     fb8:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
     fba:	2300      	movs	r3, #0
     fbc:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
     fbe:	2208      	movs	r2, #8
     fc0:	2100      	movs	r1, #0
     fc2:	a801      	add	r0, sp, #4
     fc4:	4b2d      	ldr	r3, [pc, #180]	; (107c <nm_get_firmware_full_info+0xc8>)
     fc6:	4798      	blx	r3
	if (pstrRev != NULL)
     fc8:	2c00      	cmp	r4, #0
     fca:	d044      	beq.n	1056 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
     fcc:	2228      	movs	r2, #40	; 0x28
     fce:	2100      	movs	r1, #0
     fd0:	0020      	movs	r0, r4
     fd2:	4b2b      	ldr	r3, [pc, #172]	; (1080 <nm_get_firmware_full_info+0xcc>)
     fd4:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
     fd6:	a903      	add	r1, sp, #12
     fd8:	482a      	ldr	r0, [pc, #168]	; (1084 <nm_get_firmware_full_info+0xd0>)
     fda:	4b2b      	ldr	r3, [pc, #172]	; (1088 <nm_get_firmware_full_info+0xd4>)
     fdc:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
     fde:	2800      	cmp	r0, #0
     fe0:	d13a      	bne.n	1058 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
     fe2:	9b03      	ldr	r3, [sp, #12]
     fe4:	2b00      	cmp	r3, #0
     fe6:	d039      	beq.n	105c <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
     fe8:	20c0      	movs	r0, #192	; 0xc0
     fea:	0280      	lsls	r0, r0, #10
     fec:	4318      	orrs	r0, r3
     fee:	2208      	movs	r2, #8
     ff0:	a901      	add	r1, sp, #4
     ff2:	4b26      	ldr	r3, [pc, #152]	; (108c <nm_get_firmware_full_info+0xd8>)
     ff4:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
     ff6:	2800      	cmp	r0, #0
     ff8:	d12e      	bne.n	1058 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
     ffa:	9b02      	ldr	r3, [sp, #8]
     ffc:	0418      	lsls	r0, r3, #16
     ffe:	0c00      	lsrs	r0, r0, #16
    1000:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    1002:	d02e      	beq.n	1062 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    1004:	23c0      	movs	r3, #192	; 0xc0
    1006:	029b      	lsls	r3, r3, #10
    1008:	4318      	orrs	r0, r3
    100a:	2228      	movs	r2, #40	; 0x28
    100c:	0021      	movs	r1, r4
    100e:	4b1f      	ldr	r3, [pc, #124]	; (108c <nm_get_firmware_full_info+0xd8>)
    1010:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    1012:	2800      	cmp	r0, #0
    1014:	d120      	bne.n	1058 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    1016:	7921      	ldrb	r1, [r4, #4]
    1018:	0209      	lsls	r1, r1, #8
    101a:	79a2      	ldrb	r2, [r4, #6]
    101c:	230f      	movs	r3, #15
    101e:	401a      	ands	r2, r3
    1020:	430a      	orrs	r2, r1
    1022:	7961      	ldrb	r1, [r4, #5]
    1024:	0109      	lsls	r1, r1, #4
    1026:	25ff      	movs	r5, #255	; 0xff
    1028:	4029      	ands	r1, r5
    102a:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    102c:	79e1      	ldrb	r1, [r4, #7]
    102e:	0209      	lsls	r1, r1, #8
    1030:	7a66      	ldrb	r6, [r4, #9]
    1032:	4033      	ands	r3, r6
    1034:	430b      	orrs	r3, r1
    1036:	7a21      	ldrb	r1, [r4, #8]
    1038:	0109      	lsls	r1, r1, #4
    103a:	400d      	ands	r5, r1
    103c:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    103e:	2a00      	cmp	r2, #0
    1040:	d012      	beq.n	1068 <nm_get_firmware_full_info+0xb4>
    1042:	2b00      	cmp	r3, #0
    1044:	d013      	beq.n	106e <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    1046:	4912      	ldr	r1, [pc, #72]	; (1090 <nm_get_firmware_full_info+0xdc>)
    1048:	428b      	cmp	r3, r1
    104a:	d813      	bhi.n	1074 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    104c:	4b11      	ldr	r3, [pc, #68]	; (1094 <nm_get_firmware_full_info+0xe0>)
    104e:	429a      	cmp	r2, r3
    1050:	d802      	bhi.n	1058 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    1052:	380d      	subs	r0, #13
    1054:	e000      	b.n	1058 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    1056:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    1058:	b004      	add	sp, #16
    105a:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    105c:	200c      	movs	r0, #12
    105e:	4240      	negs	r0, r0
    1060:	e7fa      	b.n	1058 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    1062:	200c      	movs	r0, #12
    1064:	4240      	negs	r0, r0
    1066:	e7f7      	b.n	1058 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    1068:	200c      	movs	r0, #12
    106a:	4240      	negs	r0, r0
    106c:	e7f4      	b.n	1058 <nm_get_firmware_full_info+0xa4>
    106e:	200c      	movs	r0, #12
    1070:	4240      	negs	r0, r0
    1072:	e7f1      	b.n	1058 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    1074:	200d      	movs	r0, #13
    1076:	4240      	negs	r0, r0
    1078:	e7ee      	b.n	1058 <nm_get_firmware_full_info+0xa4>
    107a:	46c0      	nop			; (mov r8, r8)
    107c:	000039d1 	.word	0x000039d1
    1080:	0000058d 	.word	0x0000058d
    1084:	000c0008 	.word	0x000c0008
    1088:	00000f35 	.word	0x00000f35
    108c:	00000f4d 	.word	0x00000f4d
    1090:	00001352 	.word	0x00001352
    1094:	00001351 	.word	0x00001351

00001098 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    1098:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    109a:	2800      	cmp	r0, #0
    109c:	d037      	beq.n	110e <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    109e:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    10a0:	1e6b      	subs	r3, r5, #1
    10a2:	2b03      	cmp	r3, #3
    10a4:	d900      	bls.n	10a8 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    10a6:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    10a8:	2000      	movs	r0, #0
    10aa:	4b20      	ldr	r3, [pc, #128]	; (112c <nm_drv_init+0x94>)
    10ac:	4798      	blx	r3
    10ae:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    10b0:	d12f      	bne.n	1112 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    10b2:	481f      	ldr	r0, [pc, #124]	; (1130 <nm_drv_init+0x98>)
    10b4:	4c1f      	ldr	r4, [pc, #124]	; (1134 <nm_drv_init+0x9c>)
    10b6:	47a0      	blx	r4
    10b8:	4b1f      	ldr	r3, [pc, #124]	; (1138 <nm_drv_init+0xa0>)
    10ba:	4798      	blx	r3
    10bc:	0001      	movs	r1, r0
    10be:	481f      	ldr	r0, [pc, #124]	; (113c <nm_drv_init+0xa4>)
    10c0:	47a0      	blx	r4
    10c2:	200d      	movs	r0, #13
    10c4:	4b1e      	ldr	r3, [pc, #120]	; (1140 <nm_drv_init+0xa8>)
    10c6:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    10c8:	4b1e      	ldr	r3, [pc, #120]	; (1144 <nm_drv_init+0xac>)
    10ca:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    10cc:	0028      	movs	r0, r5
    10ce:	4b1e      	ldr	r3, [pc, #120]	; (1148 <nm_drv_init+0xb0>)
    10d0:	4798      	blx	r3
    10d2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    10d4:	d117      	bne.n	1106 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    10d6:	0028      	movs	r0, r5
    10d8:	4b1c      	ldr	r3, [pc, #112]	; (114c <nm_drv_init+0xb4>)
    10da:	4798      	blx	r3
    10dc:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    10de:	d112      	bne.n	1106 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    10e0:	3d02      	subs	r5, #2
    10e2:	2d01      	cmp	r5, #1
    10e4:	d911      	bls.n	110a <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    10e6:	4b1a      	ldr	r3, [pc, #104]	; (1150 <nm_drv_init+0xb8>)
    10e8:	4798      	blx	r3
    10ea:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    10ec:	d00d      	beq.n	110a <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    10ee:	2256      	movs	r2, #86	; 0x56
    10f0:	32ff      	adds	r2, #255	; 0xff
    10f2:	4918      	ldr	r1, [pc, #96]	; (1154 <nm_drv_init+0xbc>)
    10f4:	4818      	ldr	r0, [pc, #96]	; (1158 <nm_drv_init+0xc0>)
    10f6:	4b0f      	ldr	r3, [pc, #60]	; (1134 <nm_drv_init+0x9c>)
    10f8:	4798      	blx	r3
    10fa:	4818      	ldr	r0, [pc, #96]	; (115c <nm_drv_init+0xc4>)
    10fc:	4b18      	ldr	r3, [pc, #96]	; (1160 <nm_drv_init+0xc8>)
    10fe:	4798      	blx	r3
    1100:	200d      	movs	r0, #13
    1102:	4b0f      	ldr	r3, [pc, #60]	; (1140 <nm_drv_init+0xa8>)
    1104:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    1106:	4b17      	ldr	r3, [pc, #92]	; (1164 <nm_drv_init+0xcc>)
    1108:	4798      	blx	r3
ERR1:
	return ret;
}
    110a:	0020      	movs	r0, r4
    110c:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    110e:	2501      	movs	r5, #1
    1110:	e7ca      	b.n	10a8 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    1112:	2228      	movs	r2, #40	; 0x28
    1114:	32ff      	adds	r2, #255	; 0xff
    1116:	490f      	ldr	r1, [pc, #60]	; (1154 <nm_drv_init+0xbc>)
    1118:	480f      	ldr	r0, [pc, #60]	; (1158 <nm_drv_init+0xc0>)
    111a:	4b06      	ldr	r3, [pc, #24]	; (1134 <nm_drv_init+0x9c>)
    111c:	4798      	blx	r3
    111e:	4812      	ldr	r0, [pc, #72]	; (1168 <nm_drv_init+0xd0>)
    1120:	4b0f      	ldr	r3, [pc, #60]	; (1160 <nm_drv_init+0xc8>)
    1122:	4798      	blx	r3
    1124:	200d      	movs	r0, #13
    1126:	4b06      	ldr	r3, [pc, #24]	; (1140 <nm_drv_init+0xa8>)
    1128:	4798      	blx	r3
		goto ERR1;
    112a:	e7ee      	b.n	110a <nm_drv_init+0x72>
    112c:	00000f11 	.word	0x00000f11
    1130:	00004c58 	.word	0x00004c58
    1134:	000039e1 	.word	0x000039e1
    1138:	00000c11 	.word	0x00000c11
    113c:	00004ed4 	.word	0x00004ed4
    1140:	00003a15 	.word	0x00003a15
    1144:	000018b9 	.word	0x000018b9
    1148:	00000d05 	.word	0x00000d05
    114c:	00000e0d 	.word	0x00000e0d
    1150:	00000bb5 	.word	0x00000bb5
    1154:	00004e1c 	.word	0x00004e1c
    1158:	00004b3c 	.word	0x00004b3c
    115c:	00004e98 	.word	0x00004e98
    1160:	00003afd 	.word	0x00003afd
    1164:	00000f1d 	.word	0x00000f1d
    1168:	00004eb8 	.word	0x00004eb8

0000116c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    116c:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    116e:	4b1c      	ldr	r3, [pc, #112]	; (11e0 <nm_drv_deinit+0x74>)
    1170:	4798      	blx	r3
    1172:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1174:	d10b      	bne.n	118e <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    1176:	2000      	movs	r0, #0
    1178:	4b1a      	ldr	r3, [pc, #104]	; (11e4 <nm_drv_deinit+0x78>)
    117a:	4798      	blx	r3
    117c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    117e:	d114      	bne.n	11aa <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    1180:	4b19      	ldr	r3, [pc, #100]	; (11e8 <nm_drv_deinit+0x7c>)
    1182:	4798      	blx	r3
    1184:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1186:	d11d      	bne.n	11c4 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    1188:	4b18      	ldr	r3, [pc, #96]	; (11ec <nm_drv_deinit+0x80>)
    118a:	4798      	blx	r3
    118c:	e00b      	b.n	11a6 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    118e:	22b6      	movs	r2, #182	; 0xb6
    1190:	0052      	lsls	r2, r2, #1
    1192:	4917      	ldr	r1, [pc, #92]	; (11f0 <nm_drv_deinit+0x84>)
    1194:	4817      	ldr	r0, [pc, #92]	; (11f4 <nm_drv_deinit+0x88>)
    1196:	4b18      	ldr	r3, [pc, #96]	; (11f8 <nm_drv_deinit+0x8c>)
    1198:	4798      	blx	r3
    119a:	4818      	ldr	r0, [pc, #96]	; (11fc <nm_drv_deinit+0x90>)
    119c:	4b18      	ldr	r3, [pc, #96]	; (1200 <nm_drv_deinit+0x94>)
    119e:	4798      	blx	r3
    11a0:	200d      	movs	r0, #13
    11a2:	4b18      	ldr	r3, [pc, #96]	; (1204 <nm_drv_deinit+0x98>)
    11a4:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    11a6:	0020      	movs	r0, r4
    11a8:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    11aa:	2274      	movs	r2, #116	; 0x74
    11ac:	32ff      	adds	r2, #255	; 0xff
    11ae:	4910      	ldr	r1, [pc, #64]	; (11f0 <nm_drv_deinit+0x84>)
    11b0:	4810      	ldr	r0, [pc, #64]	; (11f4 <nm_drv_deinit+0x88>)
    11b2:	4b11      	ldr	r3, [pc, #68]	; (11f8 <nm_drv_deinit+0x8c>)
    11b4:	4798      	blx	r3
    11b6:	4814      	ldr	r0, [pc, #80]	; (1208 <nm_drv_deinit+0x9c>)
    11b8:	4b11      	ldr	r3, [pc, #68]	; (1200 <nm_drv_deinit+0x94>)
    11ba:	4798      	blx	r3
    11bc:	200d      	movs	r0, #13
    11be:	4b11      	ldr	r3, [pc, #68]	; (1204 <nm_drv_deinit+0x98>)
    11c0:	4798      	blx	r3
		goto ERR1;
    11c2:	e7f0      	b.n	11a6 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    11c4:	227a      	movs	r2, #122	; 0x7a
    11c6:	32ff      	adds	r2, #255	; 0xff
    11c8:	4909      	ldr	r1, [pc, #36]	; (11f0 <nm_drv_deinit+0x84>)
    11ca:	480a      	ldr	r0, [pc, #40]	; (11f4 <nm_drv_deinit+0x88>)
    11cc:	4b0a      	ldr	r3, [pc, #40]	; (11f8 <nm_drv_deinit+0x8c>)
    11ce:	4798      	blx	r3
    11d0:	480e      	ldr	r0, [pc, #56]	; (120c <nm_drv_deinit+0xa0>)
    11d2:	4b0b      	ldr	r3, [pc, #44]	; (1200 <nm_drv_deinit+0x94>)
    11d4:	4798      	blx	r3
    11d6:	200d      	movs	r0, #13
    11d8:	4b0a      	ldr	r3, [pc, #40]	; (1204 <nm_drv_deinit+0x98>)
    11da:	4798      	blx	r3
		goto ERR1;
    11dc:	e7e3      	b.n	11a6 <nm_drv_deinit+0x3a>
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	00000e85 	.word	0x00000e85
    11e4:	00001b41 	.word	0x00001b41
    11e8:	00000f1d 	.word	0x00000f1d
    11ec:	00001865 	.word	0x00001865
    11f0:	00004e28 	.word	0x00004e28
    11f4:	00004b3c 	.word	0x00004b3c
    11f8:	000039e1 	.word	0x000039e1
    11fc:	00004e38 	.word	0x00004e38
    1200:	00003afd 	.word	0x00003afd
    1204:	00003a15 	.word	0x00003a15
    1208:	00004e58 	.word	0x00004e58
    120c:	00004e7c 	.word	0x00004e7c

00001210 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    1210:	b500      	push	{lr}
    1212:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    1214:	ab01      	add	r3, sp, #4
    1216:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    1218:	2200      	movs	r2, #0
    121a:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    121c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    121e:	0019      	movs	r1, r3
    1220:	2003      	movs	r0, #3
    1222:	4b02      	ldr	r3, [pc, #8]	; (122c <nmi_spi_write+0x1c>)
    1224:	4798      	blx	r3
}
    1226:	b005      	add	sp, #20
    1228:	bd00      	pop	{pc}
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	000003d5 	.word	0x000003d5

00001230 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    1230:	b570      	push	{r4, r5, r6, lr}
    1232:	b084      	sub	sp, #16
    1234:	ac08      	add	r4, sp, #32
    1236:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    1238:	ac01      	add	r4, sp, #4
    123a:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    123c:	303f      	adds	r0, #63	; 0x3f
    123e:	b2c4      	uxtb	r4, r0
    1240:	2c0e      	cmp	r4, #14
    1242:	d900      	bls.n	1246 <spi_cmd+0x16>
    1244:	e084      	b.n	1350 <spi_cmd+0x120>
    1246:	00a0      	lsls	r0, r4, #2
    1248:	4c4f      	ldr	r4, [pc, #316]	; (1388 <spi_cmd+0x158>)
    124a:	5820      	ldr	r0, [r4, r0]
    124c:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    124e:	ab01      	add	r3, sp, #4
    1250:	0c0a      	lsrs	r2, r1, #16
    1252:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1254:	0a0a      	lsrs	r2, r1, #8
    1256:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1258:	70d9      	strb	r1, [r3, #3]
		len = 5;
    125a:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    125c:	4b4b      	ldr	r3, [pc, #300]	; (138c <spi_cmd+0x15c>)
    125e:	781b      	ldrb	r3, [r3, #0]
    1260:	2b00      	cmp	r3, #0
    1262:	d077      	beq.n	1354 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    1264:	3901      	subs	r1, #1
    1266:	b2c9      	uxtb	r1, r1
    1268:	e083      	b.n	1372 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    126a:	0a0b      	lsrs	r3, r1, #8
    126c:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    126e:	2d00      	cmp	r5, #0
    1270:	d107      	bne.n	1282 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    1272:	aa01      	add	r2, sp, #4
    1274:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    1276:	ab01      	add	r3, sp, #4
    1278:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    127a:	2200      	movs	r2, #0
    127c:	70da      	strb	r2, [r3, #3]
		len = 5;
    127e:	2105      	movs	r1, #5
		break;
    1280:	e7ec      	b.n	125c <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    1282:	2280      	movs	r2, #128	; 0x80
    1284:	4252      	negs	r2, r2
    1286:	4313      	orrs	r3, r2
    1288:	aa01      	add	r2, sp, #4
    128a:	7053      	strb	r3, [r2, #1]
    128c:	e7f3      	b.n	1276 <spi_cmd+0x46>
		bc[1] = 0x00;
    128e:	ab01      	add	r3, sp, #4
    1290:	2200      	movs	r2, #0
    1292:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1294:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1296:	70da      	strb	r2, [r3, #3]
		len = 5;
    1298:	2105      	movs	r1, #5
		break;
    129a:	e7df      	b.n	125c <spi_cmd+0x2c>
		bc[1] = 0x00;
    129c:	ab01      	add	r3, sp, #4
    129e:	2200      	movs	r2, #0
    12a0:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    12a2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    12a4:	70da      	strb	r2, [r3, #3]
		len = 5;
    12a6:	2105      	movs	r1, #5
		break;
    12a8:	e7d8      	b.n	125c <spi_cmd+0x2c>
		bc[1] = 0xff;
    12aa:	ab01      	add	r3, sp, #4
    12ac:	22ff      	movs	r2, #255	; 0xff
    12ae:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    12b0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    12b2:	70da      	strb	r2, [r3, #3]
		len = 5;
    12b4:	2105      	movs	r1, #5
		break;
    12b6:	e7d1      	b.n	125c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    12b8:	aa01      	add	r2, sp, #4
    12ba:	0c08      	lsrs	r0, r1, #16
    12bc:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    12be:	0a08      	lsrs	r0, r1, #8
    12c0:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    12c2:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    12c4:	0a19      	lsrs	r1, r3, #8
    12c6:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    12c8:	7153      	strb	r3, [r2, #5]
		len = 7;
    12ca:	2107      	movs	r1, #7
		break;
    12cc:	e7c6      	b.n	125c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    12ce:	aa01      	add	r2, sp, #4
    12d0:	0c08      	lsrs	r0, r1, #16
    12d2:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    12d4:	0a08      	lsrs	r0, r1, #8
    12d6:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    12d8:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    12da:	0c19      	lsrs	r1, r3, #16
    12dc:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    12de:	0a19      	lsrs	r1, r3, #8
    12e0:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    12e2:	7193      	strb	r3, [r2, #6]
		len = 8;
    12e4:	2108      	movs	r1, #8
		break;
    12e6:	e7b9      	b.n	125c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    12e8:	0a0b      	lsrs	r3, r1, #8
    12ea:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    12ec:	2d00      	cmp	r5, #0
    12ee:	d10c      	bne.n	130a <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    12f0:	a801      	add	r0, sp, #4
    12f2:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    12f4:	ab01      	add	r3, sp, #4
    12f6:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    12f8:	0e11      	lsrs	r1, r2, #24
    12fa:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    12fc:	0c11      	lsrs	r1, r2, #16
    12fe:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    1300:	0a11      	lsrs	r1, r2, #8
    1302:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    1304:	719a      	strb	r2, [r3, #6]
		len = 8;
    1306:	2108      	movs	r1, #8
		break;
    1308:	e7a8      	b.n	125c <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    130a:	2080      	movs	r0, #128	; 0x80
    130c:	4240      	negs	r0, r0
    130e:	4303      	orrs	r3, r0
    1310:	a801      	add	r0, sp, #4
    1312:	7043      	strb	r3, [r0, #1]
    1314:	e7ee      	b.n	12f4 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    1316:	ab01      	add	r3, sp, #4
    1318:	0c08      	lsrs	r0, r1, #16
    131a:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    131c:	0a08      	lsrs	r0, r1, #8
    131e:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    1320:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    1322:	0e11      	lsrs	r1, r2, #24
    1324:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    1326:	0c11      	lsrs	r1, r2, #16
    1328:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    132a:	0a11      	lsrs	r1, r2, #8
    132c:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    132e:	71da      	strb	r2, [r3, #7]
		len = 9;
    1330:	2109      	movs	r1, #9
		break;
    1332:	e793      	b.n	125c <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    1334:	2228      	movs	r2, #40	; 0x28
    1336:	32ff      	adds	r2, #255	; 0xff
    1338:	4915      	ldr	r1, [pc, #84]	; (1390 <spi_cmd+0x160>)
    133a:	4816      	ldr	r0, [pc, #88]	; (1394 <spi_cmd+0x164>)
    133c:	4b16      	ldr	r3, [pc, #88]	; (1398 <spi_cmd+0x168>)
    133e:	4798      	blx	r3
    1340:	4816      	ldr	r0, [pc, #88]	; (139c <spi_cmd+0x16c>)
    1342:	4b17      	ldr	r3, [pc, #92]	; (13a0 <spi_cmd+0x170>)
    1344:	4798      	blx	r3
    1346:	200d      	movs	r0, #13
    1348:	4b16      	ldr	r3, [pc, #88]	; (13a4 <spi_cmd+0x174>)
    134a:	4798      	blx	r3
			result = N_FAIL;
    134c:	2300      	movs	r3, #0
    134e:	e017      	b.n	1380 <spi_cmd+0x150>
	switch (cmd) {
    1350:	2300      	movs	r3, #0
    1352:	e015      	b.n	1380 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1354:	1e4e      	subs	r6, r1, #1
    1356:	aa01      	add	r2, sp, #4
    1358:	1995      	adds	r5, r2, r6
    135a:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    135c:	4c12      	ldr	r4, [pc, #72]	; (13a8 <spi_cmd+0x178>)
    135e:	005b      	lsls	r3, r3, #1
    1360:	7810      	ldrb	r0, [r2, #0]
    1362:	4043      	eors	r3, r0
    1364:	5ce3      	ldrb	r3, [r4, r3]
    1366:	3201      	adds	r2, #1
	while (len--)
    1368:	42aa      	cmp	r2, r5
    136a:	d1f8      	bne.n	135e <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    136c:	005b      	lsls	r3, r3, #1
    136e:	aa01      	add	r2, sp, #4
    1370:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    1372:	b289      	uxth	r1, r1
    1374:	a801      	add	r0, sp, #4
    1376:	4b0d      	ldr	r3, [pc, #52]	; (13ac <spi_cmd+0x17c>)
    1378:	4798      	blx	r3
    137a:	2301      	movs	r3, #1
    137c:	2800      	cmp	r0, #0
    137e:	d1d9      	bne.n	1334 <spi_cmd+0x104>
		}
	}

	return result;
}
    1380:	0018      	movs	r0, r3
    1382:	b004      	add	sp, #16
    1384:	bd70      	pop	{r4, r5, r6, pc}
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	00004ee4 	.word	0x00004ee4
    138c:	2000009c 	.word	0x2000009c
    1390:	00004f24 	.word	0x00004f24
    1394:	00004b3c 	.word	0x00004b3c
    1398:	000039e1 	.word	0x000039e1
    139c:	00005200 	.word	0x00005200
    13a0:	00003afd 	.word	0x00003afd
    13a4:	00003a15 	.word	0x00003a15
    13a8:	00004f80 	.word	0x00004f80
    13ac:	00001211 	.word	0x00001211

000013b0 <nmi_spi_read>:
{
    13b0:	b500      	push	{lr}
    13b2:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    13b4:	ab01      	add	r3, sp, #4
    13b6:	2200      	movs	r2, #0
    13b8:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    13ba:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    13bc:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    13be:	0019      	movs	r1, r3
    13c0:	2003      	movs	r0, #3
    13c2:	4b02      	ldr	r3, [pc, #8]	; (13cc <nmi_spi_read+0x1c>)
    13c4:	4798      	blx	r3
}
    13c6:	b005      	add	sp, #20
    13c8:	bd00      	pop	{pc}
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	000003d5 	.word	0x000003d5

000013d0 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    13d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13d2:	46c6      	mov	lr, r8
    13d4:	b500      	push	{lr}
    13d6:	b082      	sub	sp, #8
    13d8:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    13da:	28cf      	cmp	r0, #207	; 0xcf
    13dc:	d02b      	beq.n	1436 <spi_cmd_rsp+0x66>
    13de:	0003      	movs	r3, r0
    13e0:	333b      	adds	r3, #59	; 0x3b
    13e2:	b2db      	uxtb	r3, r3
    13e4:	2b01      	cmp	r3, #1
    13e6:	d926      	bls.n	1436 <spi_cmd_rsp+0x66>
{
    13e8:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    13ea:	466b      	mov	r3, sp
    13ec:	1dde      	adds	r6, r3, #7
    13ee:	4b26      	ldr	r3, [pc, #152]	; (1488 <spi_cmd_rsp+0xb8>)
    13f0:	4698      	mov	r8, r3
    13f2:	2101      	movs	r1, #1
    13f4:	0030      	movs	r0, r6
    13f6:	47c0      	blx	r8
    13f8:	1e05      	subs	r5, r0, #0
    13fa:	d125      	bne.n	1448 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    13fc:	7833      	ldrb	r3, [r6, #0]
    13fe:	42bb      	cmp	r3, r7
    1400:	d030      	beq.n	1464 <spi_cmd_rsp+0x94>
    1402:	3c01      	subs	r4, #1
    1404:	b2e4      	uxtb	r4, r4
    1406:	2c00      	cmp	r4, #0
    1408:	d1f3      	bne.n	13f2 <spi_cmd_rsp+0x22>
    140a:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    140c:	466b      	mov	r3, sp
    140e:	1dde      	adds	r6, r3, #7
    1410:	4f1d      	ldr	r7, [pc, #116]	; (1488 <spi_cmd_rsp+0xb8>)
    1412:	2101      	movs	r1, #1
    1414:	0030      	movs	r0, r6
    1416:	47b8      	blx	r7
    1418:	2800      	cmp	r0, #0
    141a:	d125      	bne.n	1468 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    141c:	7833      	ldrb	r3, [r6, #0]
    141e:	2b00      	cmp	r3, #0
    1420:	d02f      	beq.n	1482 <spi_cmd_rsp+0xb2>
    1422:	3c01      	subs	r4, #1
    1424:	b2e4      	uxtb	r4, r4
    1426:	2c00      	cmp	r4, #0
    1428:	d1f3      	bne.n	1412 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    142a:	2501      	movs	r5, #1

_fail_:

	return result;
}
    142c:	0028      	movs	r0, r5
    142e:	b002      	add	sp, #8
    1430:	bc04      	pop	{r2}
    1432:	4690      	mov	r8, r2
    1434:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1436:	2101      	movs	r1, #1
    1438:	466b      	mov	r3, sp
    143a:	1dd8      	adds	r0, r3, #7
    143c:	4b12      	ldr	r3, [pc, #72]	; (1488 <spi_cmd_rsp+0xb8>)
    143e:	4798      	blx	r3
			result = N_FAIL;
    1440:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1442:	2800      	cmp	r0, #0
    1444:	d0d0      	beq.n	13e8 <spi_cmd_rsp+0x18>
    1446:	e7f1      	b.n	142c <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1448:	22b1      	movs	r2, #177	; 0xb1
    144a:	0052      	lsls	r2, r2, #1
    144c:	490f      	ldr	r1, [pc, #60]	; (148c <spi_cmd_rsp+0xbc>)
    144e:	4810      	ldr	r0, [pc, #64]	; (1490 <spi_cmd_rsp+0xc0>)
    1450:	4b10      	ldr	r3, [pc, #64]	; (1494 <spi_cmd_rsp+0xc4>)
    1452:	4798      	blx	r3
    1454:	4810      	ldr	r0, [pc, #64]	; (1498 <spi_cmd_rsp+0xc8>)
    1456:	4b11      	ldr	r3, [pc, #68]	; (149c <spi_cmd_rsp+0xcc>)
    1458:	4798      	blx	r3
    145a:	200d      	movs	r0, #13
    145c:	4b10      	ldr	r3, [pc, #64]	; (14a0 <spi_cmd_rsp+0xd0>)
    145e:	4798      	blx	r3
			result = N_FAIL;
    1460:	2500      	movs	r5, #0
			goto _fail_;
    1462:	e7e3      	b.n	142c <spi_cmd_rsp+0x5c>
    1464:	240b      	movs	r4, #11
    1466:	e7d1      	b.n	140c <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1468:	22b8      	movs	r2, #184	; 0xb8
    146a:	0052      	lsls	r2, r2, #1
    146c:	4907      	ldr	r1, [pc, #28]	; (148c <spi_cmd_rsp+0xbc>)
    146e:	4808      	ldr	r0, [pc, #32]	; (1490 <spi_cmd_rsp+0xc0>)
    1470:	4b08      	ldr	r3, [pc, #32]	; (1494 <spi_cmd_rsp+0xc4>)
    1472:	4798      	blx	r3
    1474:	4808      	ldr	r0, [pc, #32]	; (1498 <spi_cmd_rsp+0xc8>)
    1476:	4b09      	ldr	r3, [pc, #36]	; (149c <spi_cmd_rsp+0xcc>)
    1478:	4798      	blx	r3
    147a:	200d      	movs	r0, #13
    147c:	4b08      	ldr	r3, [pc, #32]	; (14a0 <spi_cmd_rsp+0xd0>)
    147e:	4798      	blx	r3
			goto _fail_;
    1480:	e7d4      	b.n	142c <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    1482:	2501      	movs	r5, #1
    1484:	e7d2      	b.n	142c <spi_cmd_rsp+0x5c>
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	000013b1 	.word	0x000013b1
    148c:	00004f2c 	.word	0x00004f2c
    1490:	00004b3c 	.word	0x00004b3c
    1494:	000039e1 	.word	0x000039e1
    1498:	0000522c 	.word	0x0000522c
    149c:	00003afd 	.word	0x00003afd
    14a0:	00003a15 	.word	0x00003a15

000014a4 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    14a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14a6:	46de      	mov	lr, fp
    14a8:	4657      	mov	r7, sl
    14aa:	464e      	mov	r6, r9
    14ac:	4645      	mov	r5, r8
    14ae:	b5e0      	push	{r5, r6, r7, lr}
    14b0:	b087      	sub	sp, #28
    14b2:	9001      	str	r0, [sp, #4]
    14b4:	4689      	mov	r9, r1
    14b6:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    14b8:	2300      	movs	r3, #0
    14ba:	469a      	mov	sl, r3
    14bc:	2380      	movs	r3, #128	; 0x80
    14be:	019b      	lsls	r3, r3, #6
    14c0:	469b      	mov	fp, r3
    14c2:	466a      	mov	r2, sp
    14c4:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    14c6:	4b3b      	ldr	r3, [pc, #236]	; (15b4 <spi_data_read+0x110>)
    14c8:	4698      	mov	r8, r3
    14ca:	e02e      	b.n	152a <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    14cc:	4a3a      	ldr	r2, [pc, #232]	; (15b8 <spi_data_read+0x114>)
    14ce:	493b      	ldr	r1, [pc, #236]	; (15bc <spi_data_read+0x118>)
    14d0:	483b      	ldr	r0, [pc, #236]	; (15c0 <spi_data_read+0x11c>)
    14d2:	4b3c      	ldr	r3, [pc, #240]	; (15c4 <spi_data_read+0x120>)
    14d4:	4798      	blx	r3
    14d6:	483c      	ldr	r0, [pc, #240]	; (15c8 <spi_data_read+0x124>)
    14d8:	4b3c      	ldr	r3, [pc, #240]	; (15cc <spi_data_read+0x128>)
    14da:	4798      	blx	r3
    14dc:	200d      	movs	r0, #13
    14de:	4b3c      	ldr	r3, [pc, #240]	; (15d0 <spi_data_read+0x12c>)
    14e0:	4798      	blx	r3
    14e2:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    14e4:	0028      	movs	r0, r5
    14e6:	b007      	add	sp, #28
    14e8:	bc3c      	pop	{r2, r3, r4, r5}
    14ea:	4690      	mov	r8, r2
    14ec:	4699      	mov	r9, r3
    14ee:	46a2      	mov	sl, r4
    14f0:	46ab      	mov	fp, r5
    14f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    14f4:	2c00      	cmp	r4, #0
    14f6:	dd2e      	ble.n	1556 <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    14f8:	9b01      	ldr	r3, [sp, #4]
    14fa:	4453      	add	r3, sl
    14fc:	0018      	movs	r0, r3
    14fe:	0039      	movs	r1, r7
    1500:	4b2c      	ldr	r3, [pc, #176]	; (15b4 <spi_data_read+0x110>)
    1502:	4798      	blx	r3
    1504:	1e04      	subs	r4, r0, #0
    1506:	d133      	bne.n	1570 <spi_data_read+0xcc>
		if(!clockless)
    1508:	9b02      	ldr	r3, [sp, #8]
    150a:	2b00      	cmp	r3, #0
    150c:	d103      	bne.n	1516 <spi_data_read+0x72>
			if (!gu8Crc_off) {
    150e:	4b31      	ldr	r3, [pc, #196]	; (15d4 <spi_data_read+0x130>)
    1510:	781b      	ldrb	r3, [r3, #0]
    1512:	2b00      	cmp	r3, #0
    1514:	d039      	beq.n	158a <spi_data_read+0xe6>
		ix += nbytes;
    1516:	4653      	mov	r3, sl
    1518:	18fb      	adds	r3, r7, r3
    151a:	b21b      	sxth	r3, r3
    151c:	469a      	mov	sl, r3
		sz -= nbytes;
    151e:	464b      	mov	r3, r9
    1520:	1bdf      	subs	r7, r3, r7
    1522:	b2bb      	uxth	r3, r7
    1524:	4699      	mov	r9, r3
	} while (sz);
    1526:	2b00      	cmp	r3, #0
    1528:	d042      	beq.n	15b0 <spi_data_read+0x10c>
    152a:	464f      	mov	r7, r9
    152c:	45d9      	cmp	r9, fp
    152e:	d901      	bls.n	1534 <spi_data_read+0x90>
    1530:	466b      	mov	r3, sp
    1532:	89df      	ldrh	r7, [r3, #14]
    1534:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    1536:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1538:	ab04      	add	r3, sp, #16
    153a:	1cde      	adds	r6, r3, #3
    153c:	2101      	movs	r1, #1
    153e:	0030      	movs	r0, r6
    1540:	47c0      	blx	r8
    1542:	1e05      	subs	r5, r0, #0
    1544:	d1c2      	bne.n	14cc <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    1546:	7833      	ldrb	r3, [r6, #0]
    1548:	091b      	lsrs	r3, r3, #4
    154a:	2b0f      	cmp	r3, #15
    154c:	d0d2      	beq.n	14f4 <spi_data_read+0x50>
    154e:	3c01      	subs	r4, #1
    1550:	b224      	sxth	r4, r4
		} while (retry--);
    1552:	1c63      	adds	r3, r4, #1
    1554:	d1f2      	bne.n	153c <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    1556:	4a20      	ldr	r2, [pc, #128]	; (15d8 <spi_data_read+0x134>)
    1558:	4918      	ldr	r1, [pc, #96]	; (15bc <spi_data_read+0x118>)
    155a:	4819      	ldr	r0, [pc, #100]	; (15c0 <spi_data_read+0x11c>)
    155c:	4c19      	ldr	r4, [pc, #100]	; (15c4 <spi_data_read+0x120>)
    155e:	47a0      	blx	r4
    1560:	ab04      	add	r3, sp, #16
    1562:	78d9      	ldrb	r1, [r3, #3]
    1564:	481d      	ldr	r0, [pc, #116]	; (15dc <spi_data_read+0x138>)
    1566:	47a0      	blx	r4
    1568:	200d      	movs	r0, #13
    156a:	4b19      	ldr	r3, [pc, #100]	; (15d0 <spi_data_read+0x12c>)
    156c:	4798      	blx	r3
			break;
    156e:	e7b9      	b.n	14e4 <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    1570:	22c5      	movs	r2, #197	; 0xc5
    1572:	0092      	lsls	r2, r2, #2
    1574:	4911      	ldr	r1, [pc, #68]	; (15bc <spi_data_read+0x118>)
    1576:	4812      	ldr	r0, [pc, #72]	; (15c0 <spi_data_read+0x11c>)
    1578:	4b12      	ldr	r3, [pc, #72]	; (15c4 <spi_data_read+0x120>)
    157a:	4798      	blx	r3
    157c:	4818      	ldr	r0, [pc, #96]	; (15e0 <spi_data_read+0x13c>)
    157e:	4b13      	ldr	r3, [pc, #76]	; (15cc <spi_data_read+0x128>)
    1580:	4798      	blx	r3
    1582:	200d      	movs	r0, #13
    1584:	4b12      	ldr	r3, [pc, #72]	; (15d0 <spi_data_read+0x12c>)
    1586:	4798      	blx	r3
			break;
    1588:	e7ac      	b.n	14e4 <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    158a:	2102      	movs	r1, #2
    158c:	a805      	add	r0, sp, #20
    158e:	4b09      	ldr	r3, [pc, #36]	; (15b4 <spi_data_read+0x110>)
    1590:	4798      	blx	r3
    1592:	2800      	cmp	r0, #0
    1594:	d0bf      	beq.n	1516 <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    1596:	4a13      	ldr	r2, [pc, #76]	; (15e4 <spi_data_read+0x140>)
    1598:	4908      	ldr	r1, [pc, #32]	; (15bc <spi_data_read+0x118>)
    159a:	4809      	ldr	r0, [pc, #36]	; (15c0 <spi_data_read+0x11c>)
    159c:	4b09      	ldr	r3, [pc, #36]	; (15c4 <spi_data_read+0x120>)
    159e:	4798      	blx	r3
    15a0:	4811      	ldr	r0, [pc, #68]	; (15e8 <spi_data_read+0x144>)
    15a2:	4b0a      	ldr	r3, [pc, #40]	; (15cc <spi_data_read+0x128>)
    15a4:	4798      	blx	r3
    15a6:	200d      	movs	r0, #13
    15a8:	4b09      	ldr	r3, [pc, #36]	; (15d0 <spi_data_read+0x12c>)
    15aa:	4798      	blx	r3
					result = N_FAIL;
    15ac:	0025      	movs	r5, r4
					break;
    15ae:	e799      	b.n	14e4 <spi_data_read+0x40>
    15b0:	2501      	movs	r5, #1
    15b2:	e797      	b.n	14e4 <spi_data_read+0x40>
    15b4:	000013b1 	.word	0x000013b1
    15b8:	000002ff 	.word	0x000002ff
    15bc:	00004f38 	.word	0x00004f38
    15c0:	00004b3c 	.word	0x00004b3c
    15c4:	000039e1 	.word	0x000039e1
    15c8:	00005260 	.word	0x00005260
    15cc:	00003afd 	.word	0x00003afd
    15d0:	00003a15 	.word	0x00003a15
    15d4:	2000009c 	.word	0x2000009c
    15d8:	0000030b 	.word	0x0000030b
    15dc:	00005294 	.word	0x00005294
    15e0:	000052c4 	.word	0x000052c4
    15e4:	0000031f 	.word	0x0000031f
    15e8:	000052f4 	.word	0x000052f4

000015ec <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    15ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ee:	46d6      	mov	lr, sl
    15f0:	464f      	mov	r7, r9
    15f2:	4646      	mov	r6, r8
    15f4:	b5c0      	push	{r6, r7, lr}
    15f6:	b086      	sub	sp, #24
    15f8:	9003      	str	r0, [sp, #12]
    15fa:	9104      	str	r1, [sp, #16]
    15fc:	2830      	cmp	r0, #48	; 0x30
    15fe:	d80f      	bhi.n	1620 <spi_write_reg+0x34>
    1600:	4b30      	ldr	r3, [pc, #192]	; (16c4 <spi_write_reg+0xd8>)
    1602:	781f      	ldrb	r7, [r3, #0]
    1604:	b2fb      	uxtb	r3, r7
    1606:	9305      	str	r3, [sp, #20]
    1608:	2300      	movs	r3, #0
    160a:	2230      	movs	r2, #48	; 0x30
    160c:	9903      	ldr	r1, [sp, #12]
    160e:	428a      	cmp	r2, r1
    1610:	415b      	adcs	r3, r3
    1612:	b2db      	uxtb	r3, r3
    1614:	469a      	mov	sl, r3
    1616:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    1618:	4b2b      	ldr	r3, [pc, #172]	; (16c8 <spi_write_reg+0xdc>)
    161a:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    161c:	46d1      	mov	r9, sl
    161e:	e033      	b.n	1688 <spi_write_reg+0x9c>
    1620:	4b2a      	ldr	r3, [pc, #168]	; (16cc <spi_write_reg+0xe0>)
    1622:	781f      	ldrb	r7, [r3, #0]
    1624:	e7ee      	b.n	1604 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    1626:	9805      	ldr	r0, [sp, #20]
    1628:	4b29      	ldr	r3, [pc, #164]	; (16d0 <spi_write_reg+0xe4>)
    162a:	4798      	blx	r3
    162c:	0004      	movs	r4, r0
	if (result != N_OK) {
    162e:	2801      	cmp	r0, #1
    1630:	d041      	beq.n	16b6 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    1632:	22e7      	movs	r2, #231	; 0xe7
    1634:	0092      	lsls	r2, r2, #2
    1636:	4927      	ldr	r1, [pc, #156]	; (16d4 <spi_write_reg+0xe8>)
    1638:	4827      	ldr	r0, [pc, #156]	; (16d8 <spi_write_reg+0xec>)
    163a:	4e28      	ldr	r6, [pc, #160]	; (16dc <spi_write_reg+0xf0>)
    163c:	47b0      	blx	r6
    163e:	9903      	ldr	r1, [sp, #12]
    1640:	4827      	ldr	r0, [pc, #156]	; (16e0 <spi_write_reg+0xf4>)
    1642:	47b0      	blx	r6
    1644:	200d      	movs	r0, #13
    1646:	4b27      	ldr	r3, [pc, #156]	; (16e4 <spi_write_reg+0xf8>)
    1648:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    164a:	2001      	movs	r0, #1
    164c:	4e26      	ldr	r6, [pc, #152]	; (16e8 <spi_write_reg+0xfc>)
    164e:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    1650:	2300      	movs	r3, #0
    1652:	9300      	str	r3, [sp, #0]
    1654:	2200      	movs	r2, #0
    1656:	2100      	movs	r1, #0
    1658:	20cf      	movs	r0, #207	; 0xcf
    165a:	4f1b      	ldr	r7, [pc, #108]	; (16c8 <spi_write_reg+0xdc>)
    165c:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    165e:	20cf      	movs	r0, #207	; 0xcf
    1660:	4b1b      	ldr	r3, [pc, #108]	; (16d0 <spi_write_reg+0xe4>)
    1662:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    1664:	4a21      	ldr	r2, [pc, #132]	; (16ec <spi_write_reg+0x100>)
    1666:	491b      	ldr	r1, [pc, #108]	; (16d4 <spi_write_reg+0xe8>)
    1668:	481b      	ldr	r0, [pc, #108]	; (16d8 <spi_write_reg+0xec>)
    166a:	4f1c      	ldr	r7, [pc, #112]	; (16dc <spi_write_reg+0xf0>)
    166c:	47b8      	blx	r7
    166e:	9b04      	ldr	r3, [sp, #16]
    1670:	9a03      	ldr	r2, [sp, #12]
    1672:	0029      	movs	r1, r5
    1674:	481e      	ldr	r0, [pc, #120]	; (16f0 <spi_write_reg+0x104>)
    1676:	47b8      	blx	r7
    1678:	200d      	movs	r0, #13
    167a:	4b1a      	ldr	r3, [pc, #104]	; (16e4 <spi_write_reg+0xf8>)
    167c:	4798      	blx	r3
		nm_bsp_sleep(1);
    167e:	2001      	movs	r0, #1
    1680:	47b0      	blx	r6
    1682:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    1684:	2d00      	cmp	r5, #0
    1686:	d016      	beq.n	16b6 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    1688:	464b      	mov	r3, r9
    168a:	9300      	str	r3, [sp, #0]
    168c:	2304      	movs	r3, #4
    168e:	9a04      	ldr	r2, [sp, #16]
    1690:	9f03      	ldr	r7, [sp, #12]
    1692:	0039      	movs	r1, r7
    1694:	9805      	ldr	r0, [sp, #20]
    1696:	47c0      	blx	r8
    1698:	0004      	movs	r4, r0
	if (result != N_OK) {
    169a:	2801      	cmp	r0, #1
    169c:	d0c3      	beq.n	1626 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    169e:	4a15      	ldr	r2, [pc, #84]	; (16f4 <spi_write_reg+0x108>)
    16a0:	490c      	ldr	r1, [pc, #48]	; (16d4 <spi_write_reg+0xe8>)
    16a2:	480d      	ldr	r0, [pc, #52]	; (16d8 <spi_write_reg+0xec>)
    16a4:	4e0d      	ldr	r6, [pc, #52]	; (16dc <spi_write_reg+0xf0>)
    16a6:	47b0      	blx	r6
    16a8:	0039      	movs	r1, r7
    16aa:	4813      	ldr	r0, [pc, #76]	; (16f8 <spi_write_reg+0x10c>)
    16ac:	47b0      	blx	r6
    16ae:	200d      	movs	r0, #13
    16b0:	4b0c      	ldr	r3, [pc, #48]	; (16e4 <spi_write_reg+0xf8>)
    16b2:	4798      	blx	r3
		goto _FAIL_;
    16b4:	e7c9      	b.n	164a <spi_write_reg+0x5e>
	}

	return result;
}
    16b6:	0020      	movs	r0, r4
    16b8:	b006      	add	sp, #24
    16ba:	bc1c      	pop	{r2, r3, r4}
    16bc:	4690      	mov	r8, r2
    16be:	4699      	mov	r9, r3
    16c0:	46a2      	mov	sl, r4
    16c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16c4:	00004f20 	.word	0x00004f20
    16c8:	00001231 	.word	0x00001231
    16cc:	00004f21 	.word	0x00004f21
    16d0:	000013d1 	.word	0x000013d1
    16d4:	00004f48 	.word	0x00004f48
    16d8:	00004b3c 	.word	0x00004b3c
    16dc:	000039e1 	.word	0x000039e1
    16e0:	000053ec 	.word	0x000053ec
    16e4:	00003a15 	.word	0x00003a15
    16e8:	00000195 	.word	0x00000195
    16ec:	000003af 	.word	0x000003af
    16f0:	00005424 	.word	0x00005424
    16f4:	00000396 	.word	0x00000396
    16f8:	000053c0 	.word	0x000053c0

000016fc <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    16fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16fe:	46de      	mov	lr, fp
    1700:	4657      	mov	r7, sl
    1702:	464e      	mov	r6, r9
    1704:	4645      	mov	r5, r8
    1706:	b5e0      	push	{r5, r6, r7, lr}
    1708:	b087      	sub	sp, #28
    170a:	9002      	str	r0, [sp, #8]
    170c:	468b      	mov	fp, r1
    170e:	28ff      	cmp	r0, #255	; 0xff
    1710:	d80f      	bhi.n	1732 <spi_read_reg+0x36>
    1712:	4b41      	ldr	r3, [pc, #260]	; (1818 <spi_read_reg+0x11c>)
    1714:	781f      	ldrb	r7, [r3, #0]
    1716:	b2fb      	uxtb	r3, r7
    1718:	9303      	str	r3, [sp, #12]
    171a:	2300      	movs	r3, #0
    171c:	22ff      	movs	r2, #255	; 0xff
    171e:	9902      	ldr	r1, [sp, #8]
    1720:	428a      	cmp	r2, r1
    1722:	415b      	adcs	r3, r3
    1724:	b2db      	uxtb	r3, r3
    1726:	469a      	mov	sl, r3
    1728:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    172a:	4b3c      	ldr	r3, [pc, #240]	; (181c <spi_read_reg+0x120>)
    172c:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    172e:	46d1      	mov	r9, sl
    1730:	e031      	b.n	1796 <spi_read_reg+0x9a>
    1732:	4b3b      	ldr	r3, [pc, #236]	; (1820 <spi_read_reg+0x124>)
    1734:	781f      	ldrb	r7, [r3, #0]
    1736:	e7ee      	b.n	1716 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    1738:	9803      	ldr	r0, [sp, #12]
    173a:	4b3a      	ldr	r3, [pc, #232]	; (1824 <spi_read_reg+0x128>)
    173c:	4798      	blx	r3
    173e:	0004      	movs	r4, r0
	if (result != N_OK) {
    1740:	2801      	cmp	r0, #1
    1742:	d03f      	beq.n	17c4 <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    1744:	4a38      	ldr	r2, [pc, #224]	; (1828 <spi_read_reg+0x12c>)
    1746:	4939      	ldr	r1, [pc, #228]	; (182c <spi_read_reg+0x130>)
    1748:	4839      	ldr	r0, [pc, #228]	; (1830 <spi_read_reg+0x134>)
    174a:	4e3a      	ldr	r6, [pc, #232]	; (1834 <spi_read_reg+0x138>)
    174c:	47b0      	blx	r6
    174e:	9902      	ldr	r1, [sp, #8]
    1750:	4839      	ldr	r0, [pc, #228]	; (1838 <spi_read_reg+0x13c>)
    1752:	47b0      	blx	r6
    1754:	200d      	movs	r0, #13
    1756:	4b39      	ldr	r3, [pc, #228]	; (183c <spi_read_reg+0x140>)
    1758:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    175a:	2001      	movs	r0, #1
    175c:	4e38      	ldr	r6, [pc, #224]	; (1840 <spi_read_reg+0x144>)
    175e:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    1760:	2300      	movs	r3, #0
    1762:	9300      	str	r3, [sp, #0]
    1764:	2200      	movs	r2, #0
    1766:	2100      	movs	r1, #0
    1768:	20cf      	movs	r0, #207	; 0xcf
    176a:	4f2c      	ldr	r7, [pc, #176]	; (181c <spi_read_reg+0x120>)
    176c:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    176e:	20cf      	movs	r0, #207	; 0xcf
    1770:	4b2c      	ldr	r3, [pc, #176]	; (1824 <spi_read_reg+0x128>)
    1772:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    1774:	4a33      	ldr	r2, [pc, #204]	; (1844 <spi_read_reg+0x148>)
    1776:	492d      	ldr	r1, [pc, #180]	; (182c <spi_read_reg+0x130>)
    1778:	482d      	ldr	r0, [pc, #180]	; (1830 <spi_read_reg+0x134>)
    177a:	4f2e      	ldr	r7, [pc, #184]	; (1834 <spi_read_reg+0x138>)
    177c:	47b8      	blx	r7
    177e:	9a02      	ldr	r2, [sp, #8]
    1780:	0029      	movs	r1, r5
    1782:	4831      	ldr	r0, [pc, #196]	; (1848 <spi_read_reg+0x14c>)
    1784:	47b8      	blx	r7
    1786:	200d      	movs	r0, #13
    1788:	4b2c      	ldr	r3, [pc, #176]	; (183c <spi_read_reg+0x140>)
    178a:	4798      	blx	r3
		nm_bsp_sleep(1);
    178c:	2001      	movs	r0, #1
    178e:	47b0      	blx	r6
    1790:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    1792:	2d00      	cmp	r5, #0
    1794:	d037      	beq.n	1806 <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    1796:	464b      	mov	r3, r9
    1798:	9300      	str	r3, [sp, #0]
    179a:	2304      	movs	r3, #4
    179c:	2200      	movs	r2, #0
    179e:	9f02      	ldr	r7, [sp, #8]
    17a0:	0039      	movs	r1, r7
    17a2:	9803      	ldr	r0, [sp, #12]
    17a4:	47c0      	blx	r8
    17a6:	0004      	movs	r4, r0
	if (result != N_OK) {
    17a8:	2801      	cmp	r0, #1
    17aa:	d0c5      	beq.n	1738 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    17ac:	4a27      	ldr	r2, [pc, #156]	; (184c <spi_read_reg+0x150>)
    17ae:	491f      	ldr	r1, [pc, #124]	; (182c <spi_read_reg+0x130>)
    17b0:	481f      	ldr	r0, [pc, #124]	; (1830 <spi_read_reg+0x134>)
    17b2:	4e20      	ldr	r6, [pc, #128]	; (1834 <spi_read_reg+0x138>)
    17b4:	47b0      	blx	r6
    17b6:	0039      	movs	r1, r7
    17b8:	4825      	ldr	r0, [pc, #148]	; (1850 <spi_read_reg+0x154>)
    17ba:	47b0      	blx	r6
    17bc:	200d      	movs	r0, #13
    17be:	4b1f      	ldr	r3, [pc, #124]	; (183c <spi_read_reg+0x140>)
    17c0:	4798      	blx	r3
		goto _FAIL_;
    17c2:	e7ca      	b.n	175a <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    17c4:	464a      	mov	r2, r9
    17c6:	2104      	movs	r1, #4
    17c8:	a805      	add	r0, sp, #20
    17ca:	4b22      	ldr	r3, [pc, #136]	; (1854 <spi_read_reg+0x158>)
    17cc:	4798      	blx	r3
    17ce:	0004      	movs	r4, r0
	if (result != N_OK) {
    17d0:	2801      	cmp	r0, #1
    17d2:	d00b      	beq.n	17ec <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    17d4:	4a20      	ldr	r2, [pc, #128]	; (1858 <spi_read_reg+0x15c>)
    17d6:	4915      	ldr	r1, [pc, #84]	; (182c <spi_read_reg+0x130>)
    17d8:	4815      	ldr	r0, [pc, #84]	; (1830 <spi_read_reg+0x134>)
    17da:	4b16      	ldr	r3, [pc, #88]	; (1834 <spi_read_reg+0x138>)
    17dc:	4798      	blx	r3
    17de:	481f      	ldr	r0, [pc, #124]	; (185c <spi_read_reg+0x160>)
    17e0:	4b1f      	ldr	r3, [pc, #124]	; (1860 <spi_read_reg+0x164>)
    17e2:	4798      	blx	r3
    17e4:	200d      	movs	r0, #13
    17e6:	4b15      	ldr	r3, [pc, #84]	; (183c <spi_read_reg+0x140>)
    17e8:	4798      	blx	r3
		goto _FAIL_;
    17ea:	e7b6      	b.n	175a <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    17ec:	aa05      	add	r2, sp, #20
    17ee:	7853      	ldrb	r3, [r2, #1]
    17f0:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    17f2:	7891      	ldrb	r1, [r2, #2]
    17f4:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    17f6:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    17f8:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    17fa:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    17fc:	78d2      	ldrb	r2, [r2, #3]
    17fe:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    1800:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    1802:	465a      	mov	r2, fp
    1804:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    1806:	0020      	movs	r0, r4
    1808:	b007      	add	sp, #28
    180a:	bc3c      	pop	{r2, r3, r4, r5}
    180c:	4690      	mov	r8, r2
    180e:	4699      	mov	r9, r3
    1810:	46a2      	mov	sl, r4
    1812:	46ab      	mov	fp, r5
    1814:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1816:	46c0      	nop			; (mov r8, r8)
    1818:	00004f22 	.word	0x00004f22
    181c:	00001231 	.word	0x00001231
    1820:	00004f23 	.word	0x00004f23
    1824:	000013d1 	.word	0x000013d1
    1828:	0000041d 	.word	0x0000041d
    182c:	00004f58 	.word	0x00004f58
    1830:	00004b3c 	.word	0x00004b3c
    1834:	000039e1 	.word	0x000039e1
    1838:	00005354 	.word	0x00005354
    183c:	00003a15 	.word	0x00003a15
    1840:	00000195 	.word	0x00000195
    1844:	0000043c 	.word	0x0000043c
    1848:	000053a8 	.word	0x000053a8
    184c:	00000417 	.word	0x00000417
    1850:	00005328 	.word	0x00005328
    1854:	000014a5 	.word	0x000014a5
    1858:	00000424 	.word	0x00000424
    185c:	00005388 	.word	0x00005388
    1860:	00003afd 	.word	0x00003afd

00001864 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    1864:	2200      	movs	r2, #0
    1866:	4b02      	ldr	r3, [pc, #8]	; (1870 <nm_spi_deinit+0xc>)
    1868:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    186a:	2000      	movs	r0, #0
    186c:	4770      	bx	lr
    186e:	46c0      	nop			; (mov r8, r8)
    1870:	2000009c 	.word	0x2000009c

00001874 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    1874:	b500      	push	{lr}
    1876:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    1878:	a901      	add	r1, sp, #4
    187a:	4b02      	ldr	r3, [pc, #8]	; (1884 <nm_spi_read_reg+0x10>)
    187c:	4798      	blx	r3

	return u32Val;
}
    187e:	9801      	ldr	r0, [sp, #4]
    1880:	b003      	add	sp, #12
    1882:	bd00      	pop	{pc}
    1884:	000016fd 	.word	0x000016fd

00001888 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    1888:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    188a:	4b04      	ldr	r3, [pc, #16]	; (189c <nm_spi_read_reg_with_ret+0x14>)
    188c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    188e:	2300      	movs	r3, #0
    1890:	2801      	cmp	r0, #1
    1892:	d101      	bne.n	1898 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    1894:	0018      	movs	r0, r3
    1896:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    1898:	3b06      	subs	r3, #6
    189a:	e7fb      	b.n	1894 <nm_spi_read_reg_with_ret+0xc>
    189c:	000016fd 	.word	0x000016fd

000018a0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    18a0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    18a2:	4b04      	ldr	r3, [pc, #16]	; (18b4 <nm_spi_write_reg+0x14>)
    18a4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    18a6:	2300      	movs	r3, #0
    18a8:	2801      	cmp	r0, #1
    18aa:	d101      	bne.n	18b0 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    18ac:	0018      	movs	r0, r3
    18ae:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    18b0:	3b06      	subs	r3, #6
    18b2:	e7fb      	b.n	18ac <nm_spi_write_reg+0xc>
    18b4:	000015ed 	.word	0x000015ed

000018b8 <nm_spi_init>:
{
    18b8:	b510      	push	{r4, lr}
    18ba:	b082      	sub	sp, #8
	uint32 reg = 0;
    18bc:	2300      	movs	r3, #0
    18be:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    18c0:	4a35      	ldr	r2, [pc, #212]	; (1998 <nm_spi_init+0xe0>)
    18c2:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    18c4:	4669      	mov	r1, sp
    18c6:	4835      	ldr	r0, [pc, #212]	; (199c <nm_spi_init+0xe4>)
    18c8:	4b35      	ldr	r3, [pc, #212]	; (19a0 <nm_spi_init+0xe8>)
    18ca:	4798      	blx	r3
    18cc:	2800      	cmp	r0, #0
    18ce:	d028      	beq.n	1922 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    18d0:	4b31      	ldr	r3, [pc, #196]	; (1998 <nm_spi_init+0xe0>)
    18d2:	781b      	ldrb	r3, [r3, #0]
    18d4:	2b00      	cmp	r3, #0
    18d6:	d10d      	bne.n	18f4 <nm_spi_init+0x3c>
		reg &= ~0x70;
    18d8:	337c      	adds	r3, #124	; 0x7c
    18da:	9900      	ldr	r1, [sp, #0]
    18dc:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    18de:	3b2c      	subs	r3, #44	; 0x2c
    18e0:	4319      	orrs	r1, r3
    18e2:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    18e4:	482d      	ldr	r0, [pc, #180]	; (199c <nm_spi_init+0xe4>)
    18e6:	4b2f      	ldr	r3, [pc, #188]	; (19a4 <nm_spi_init+0xec>)
    18e8:	4798      	blx	r3
    18ea:	1e04      	subs	r4, r0, #0
    18ec:	d039      	beq.n	1962 <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    18ee:	2201      	movs	r2, #1
    18f0:	4b29      	ldr	r3, [pc, #164]	; (1998 <nm_spi_init+0xe0>)
    18f2:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    18f4:	a901      	add	r1, sp, #4
    18f6:	2080      	movs	r0, #128	; 0x80
    18f8:	0140      	lsls	r0, r0, #5
    18fa:	4b29      	ldr	r3, [pc, #164]	; (19a0 <nm_spi_init+0xe8>)
    18fc:	4798      	blx	r3
    18fe:	2800      	cmp	r0, #0
    1900:	d03b      	beq.n	197a <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    1902:	4c26      	ldr	r4, [pc, #152]	; (199c <nm_spi_init+0xe4>)
    1904:	0020      	movs	r0, r4
    1906:	4b28      	ldr	r3, [pc, #160]	; (19a8 <nm_spi_init+0xf0>)
    1908:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    190a:	2370      	movs	r3, #112	; 0x70
    190c:	0001      	movs	r1, r0
    190e:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    1910:	2050      	movs	r0, #80	; 0x50
    1912:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    1914:	0020      	movs	r0, r4
    1916:	4b25      	ldr	r3, [pc, #148]	; (19ac <nm_spi_init+0xf4>)
    1918:	4798      	blx	r3
	return M2M_SUCCESS;
    191a:	2400      	movs	r4, #0
}
    191c:	0020      	movs	r0, r4
    191e:	b002      	add	sp, #8
    1920:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    1922:	2201      	movs	r2, #1
    1924:	4b1c      	ldr	r3, [pc, #112]	; (1998 <nm_spi_init+0xe0>)
    1926:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    1928:	4a21      	ldr	r2, [pc, #132]	; (19b0 <nm_spi_init+0xf8>)
    192a:	4922      	ldr	r1, [pc, #136]	; (19b4 <nm_spi_init+0xfc>)
    192c:	4822      	ldr	r0, [pc, #136]	; (19b8 <nm_spi_init+0x100>)
    192e:	4b23      	ldr	r3, [pc, #140]	; (19bc <nm_spi_init+0x104>)
    1930:	4798      	blx	r3
    1932:	4823      	ldr	r0, [pc, #140]	; (19c0 <nm_spi_init+0x108>)
    1934:	4b23      	ldr	r3, [pc, #140]	; (19c4 <nm_spi_init+0x10c>)
    1936:	4798      	blx	r3
    1938:	200d      	movs	r0, #13
    193a:	4b23      	ldr	r3, [pc, #140]	; (19c8 <nm_spi_init+0x110>)
    193c:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    193e:	4669      	mov	r1, sp
    1940:	4816      	ldr	r0, [pc, #88]	; (199c <nm_spi_init+0xe4>)
    1942:	4b17      	ldr	r3, [pc, #92]	; (19a0 <nm_spi_init+0xe8>)
    1944:	4798      	blx	r3
    1946:	1e04      	subs	r4, r0, #0
    1948:	d1c2      	bne.n	18d0 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    194a:	4a20      	ldr	r2, [pc, #128]	; (19cc <nm_spi_init+0x114>)
    194c:	4919      	ldr	r1, [pc, #100]	; (19b4 <nm_spi_init+0xfc>)
    194e:	481a      	ldr	r0, [pc, #104]	; (19b8 <nm_spi_init+0x100>)
    1950:	4b1a      	ldr	r3, [pc, #104]	; (19bc <nm_spi_init+0x104>)
    1952:	4798      	blx	r3
    1954:	481e      	ldr	r0, [pc, #120]	; (19d0 <nm_spi_init+0x118>)
    1956:	4b1b      	ldr	r3, [pc, #108]	; (19c4 <nm_spi_init+0x10c>)
    1958:	4798      	blx	r3
    195a:	200d      	movs	r0, #13
    195c:	4b1a      	ldr	r3, [pc, #104]	; (19c8 <nm_spi_init+0x110>)
    195e:	4798      	blx	r3
			return 0;
    1960:	e7dc      	b.n	191c <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    1962:	4a1c      	ldr	r2, [pc, #112]	; (19d4 <nm_spi_init+0x11c>)
    1964:	4913      	ldr	r1, [pc, #76]	; (19b4 <nm_spi_init+0xfc>)
    1966:	4814      	ldr	r0, [pc, #80]	; (19b8 <nm_spi_init+0x100>)
    1968:	4b14      	ldr	r3, [pc, #80]	; (19bc <nm_spi_init+0x104>)
    196a:	4798      	blx	r3
    196c:	481a      	ldr	r0, [pc, #104]	; (19d8 <nm_spi_init+0x120>)
    196e:	4b15      	ldr	r3, [pc, #84]	; (19c4 <nm_spi_init+0x10c>)
    1970:	4798      	blx	r3
    1972:	200d      	movs	r0, #13
    1974:	4b14      	ldr	r3, [pc, #80]	; (19c8 <nm_spi_init+0x110>)
    1976:	4798      	blx	r3
			return 0;
    1978:	e7d0      	b.n	191c <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    197a:	4a18      	ldr	r2, [pc, #96]	; (19dc <nm_spi_init+0x124>)
    197c:	490d      	ldr	r1, [pc, #52]	; (19b4 <nm_spi_init+0xfc>)
    197e:	480e      	ldr	r0, [pc, #56]	; (19b8 <nm_spi_init+0x100>)
    1980:	4b0e      	ldr	r3, [pc, #56]	; (19bc <nm_spi_init+0x104>)
    1982:	4798      	blx	r3
    1984:	4816      	ldr	r0, [pc, #88]	; (19e0 <nm_spi_init+0x128>)
    1986:	4b0f      	ldr	r3, [pc, #60]	; (19c4 <nm_spi_init+0x10c>)
    1988:	4798      	blx	r3
    198a:	200d      	movs	r0, #13
    198c:	4b0e      	ldr	r3, [pc, #56]	; (19c8 <nm_spi_init+0x110>)
    198e:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    1990:	2406      	movs	r4, #6
    1992:	4264      	negs	r4, r4
    1994:	e7c2      	b.n	191c <nm_spi_init+0x64>
    1996:	46c0      	nop			; (mov r8, r8)
    1998:	2000009c 	.word	0x2000009c
    199c:	0000e824 	.word	0x0000e824
    19a0:	000016fd 	.word	0x000016fd
    19a4:	000015ed 	.word	0x000015ed
    19a8:	00001875 	.word	0x00001875
    19ac:	000018a1 	.word	0x000018a1
    19b0:	000004c7 	.word	0x000004c7
    19b4:	00004f74 	.word	0x00004f74
    19b8:	00004b3c 	.word	0x00004b3c
    19bc:	000039e1 	.word	0x000039e1
    19c0:	00005080 	.word	0x00005080
    19c4:	00003afd 	.word	0x00003afd
    19c8:	00003a15 	.word	0x00003a15
    19cc:	000004ca 	.word	0x000004ca
    19d0:	000050d0 	.word	0x000050d0
    19d4:	000004d4 	.word	0x000004d4
    19d8:	000050fc 	.word	0x000050fc
    19dc:	000004de 	.word	0x000004de
    19e0:	00005130 	.word	0x00005130

000019e4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    19e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19e6:	46de      	mov	lr, fp
    19e8:	4657      	mov	r7, sl
    19ea:	464e      	mov	r6, r9
    19ec:	4645      	mov	r5, r8
    19ee:	b5e0      	push	{r5, r6, r7, lr}
    19f0:	b087      	sub	sp, #28
    19f2:	9002      	str	r0, [sp, #8]
    19f4:	9103      	str	r1, [sp, #12]
    19f6:	0016      	movs	r6, r2
    19f8:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    19fa:	2300      	movs	r3, #0
    19fc:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    19fe:	2400      	movs	r4, #0
    1a00:	4b3e      	ldr	r3, [pc, #248]	; (1afc <nm_spi_read_block+0x118>)
    1a02:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    1a04:	46a9      	mov	r9, r5
    1a06:	e037      	b.n	1a78 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    1a08:	2301      	movs	r3, #1
    1a0a:	469b      	mov	fp, r3
		size = 2;
    1a0c:	3601      	adds	r6, #1
    1a0e:	e035      	b.n	1a7c <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    1a10:	20c8      	movs	r0, #200	; 0xc8
    1a12:	4b3b      	ldr	r3, [pc, #236]	; (1b00 <nm_spi_read_block+0x11c>)
    1a14:	4798      	blx	r3
	if (result != N_OK) {
    1a16:	2801      	cmp	r0, #1
    1a18:	d045      	beq.n	1aa6 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    1a1a:	4a3a      	ldr	r2, [pc, #232]	; (1b04 <nm_spi_read_block+0x120>)
    1a1c:	493a      	ldr	r1, [pc, #232]	; (1b08 <nm_spi_read_block+0x124>)
    1a1e:	483b      	ldr	r0, [pc, #236]	; (1b0c <nm_spi_read_block+0x128>)
    1a20:	4f3b      	ldr	r7, [pc, #236]	; (1b10 <nm_spi_read_block+0x12c>)
    1a22:	47b8      	blx	r7
    1a24:	9902      	ldr	r1, [sp, #8]
    1a26:	483b      	ldr	r0, [pc, #236]	; (1b14 <nm_spi_read_block+0x130>)
    1a28:	47b8      	blx	r7
    1a2a:	200d      	movs	r0, #13
    1a2c:	4b3a      	ldr	r3, [pc, #232]	; (1b18 <nm_spi_read_block+0x134>)
    1a2e:	4798      	blx	r3
		nm_bsp_sleep(1);
    1a30:	2001      	movs	r0, #1
    1a32:	4f3a      	ldr	r7, [pc, #232]	; (1b1c <nm_spi_read_block+0x138>)
    1a34:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    1a36:	9400      	str	r4, [sp, #0]
    1a38:	0023      	movs	r3, r4
    1a3a:	0022      	movs	r2, r4
    1a3c:	0021      	movs	r1, r4
    1a3e:	20cf      	movs	r0, #207	; 0xcf
    1a40:	4d2e      	ldr	r5, [pc, #184]	; (1afc <nm_spi_read_block+0x118>)
    1a42:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    1a44:	20cf      	movs	r0, #207	; 0xcf
    1a46:	4b2e      	ldr	r3, [pc, #184]	; (1b00 <nm_spi_read_block+0x11c>)
    1a48:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    1a4a:	4a35      	ldr	r2, [pc, #212]	; (1b20 <nm_spi_read_block+0x13c>)
    1a4c:	492e      	ldr	r1, [pc, #184]	; (1b08 <nm_spi_read_block+0x124>)
    1a4e:	482f      	ldr	r0, [pc, #188]	; (1b0c <nm_spi_read_block+0x128>)
    1a50:	4b2f      	ldr	r3, [pc, #188]	; (1b10 <nm_spi_read_block+0x12c>)
    1a52:	469a      	mov	sl, r3
    1a54:	4798      	blx	r3
    1a56:	0033      	movs	r3, r6
    1a58:	9a02      	ldr	r2, [sp, #8]
    1a5a:	4649      	mov	r1, r9
    1a5c:	4831      	ldr	r0, [pc, #196]	; (1b24 <nm_spi_read_block+0x140>)
    1a5e:	47d0      	blx	sl
    1a60:	200d      	movs	r0, #13
    1a62:	4b2d      	ldr	r3, [pc, #180]	; (1b18 <nm_spi_read_block+0x134>)
    1a64:	4798      	blx	r3
		nm_bsp_sleep(1);
    1a66:	2001      	movs	r0, #1
    1a68:	47b8      	blx	r7
    1a6a:	2301      	movs	r3, #1
    1a6c:	425b      	negs	r3, r3
    1a6e:	469c      	mov	ip, r3
    1a70:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    1a72:	464b      	mov	r3, r9
    1a74:	2b00      	cmp	r3, #0
    1a76:	d038      	beq.n	1aea <nm_spi_read_block+0x106>
	if (size == 1)
    1a78:	2e01      	cmp	r6, #1
    1a7a:	d0c5      	beq.n	1a08 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    1a7c:	9400      	str	r4, [sp, #0]
    1a7e:	0033      	movs	r3, r6
    1a80:	0022      	movs	r2, r4
    1a82:	9d02      	ldr	r5, [sp, #8]
    1a84:	0029      	movs	r1, r5
    1a86:	20c8      	movs	r0, #200	; 0xc8
    1a88:	47c0      	blx	r8
	if (result != N_OK) {
    1a8a:	2801      	cmp	r0, #1
    1a8c:	d0c0      	beq.n	1a10 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    1a8e:	4a26      	ldr	r2, [pc, #152]	; (1b28 <nm_spi_read_block+0x144>)
    1a90:	491d      	ldr	r1, [pc, #116]	; (1b08 <nm_spi_read_block+0x124>)
    1a92:	481e      	ldr	r0, [pc, #120]	; (1b0c <nm_spi_read_block+0x128>)
    1a94:	4f1e      	ldr	r7, [pc, #120]	; (1b10 <nm_spi_read_block+0x12c>)
    1a96:	47b8      	blx	r7
    1a98:	0029      	movs	r1, r5
    1a9a:	4824      	ldr	r0, [pc, #144]	; (1b2c <nm_spi_read_block+0x148>)
    1a9c:	47b8      	blx	r7
    1a9e:	200d      	movs	r0, #13
    1aa0:	4b1d      	ldr	r3, [pc, #116]	; (1b18 <nm_spi_read_block+0x134>)
    1aa2:	4798      	blx	r3
    1aa4:	e7c4      	b.n	1a30 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    1aa6:	465b      	mov	r3, fp
    1aa8:	2b00      	cmp	r3, #0
    1aaa:	d016      	beq.n	1ada <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    1aac:	af05      	add	r7, sp, #20
    1aae:	0022      	movs	r2, r4
    1ab0:	0031      	movs	r1, r6
    1ab2:	0038      	movs	r0, r7
    1ab4:	4b1e      	ldr	r3, [pc, #120]	; (1b30 <nm_spi_read_block+0x14c>)
    1ab6:	4798      	blx	r3
		buf[0] = tmp[0];
    1ab8:	783b      	ldrb	r3, [r7, #0]
    1aba:	9a03      	ldr	r2, [sp, #12]
    1abc:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    1abe:	2801      	cmp	r0, #1
    1ac0:	d011      	beq.n	1ae6 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    1ac2:	4a1c      	ldr	r2, [pc, #112]	; (1b34 <nm_spi_read_block+0x150>)
    1ac4:	4910      	ldr	r1, [pc, #64]	; (1b08 <nm_spi_read_block+0x124>)
    1ac6:	4811      	ldr	r0, [pc, #68]	; (1b0c <nm_spi_read_block+0x128>)
    1ac8:	4b11      	ldr	r3, [pc, #68]	; (1b10 <nm_spi_read_block+0x12c>)
    1aca:	4798      	blx	r3
    1acc:	481a      	ldr	r0, [pc, #104]	; (1b38 <nm_spi_read_block+0x154>)
    1ace:	4b1b      	ldr	r3, [pc, #108]	; (1b3c <nm_spi_read_block+0x158>)
    1ad0:	4798      	blx	r3
    1ad2:	200d      	movs	r0, #13
    1ad4:	4b10      	ldr	r3, [pc, #64]	; (1b18 <nm_spi_read_block+0x134>)
    1ad6:	4798      	blx	r3
    1ad8:	e7aa      	b.n	1a30 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    1ada:	0022      	movs	r2, r4
    1adc:	0031      	movs	r1, r6
    1ade:	9803      	ldr	r0, [sp, #12]
    1ae0:	4b13      	ldr	r3, [pc, #76]	; (1b30 <nm_spi_read_block+0x14c>)
    1ae2:	4798      	blx	r3
    1ae4:	e7eb      	b.n	1abe <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    1ae6:	2000      	movs	r0, #0
    1ae8:	e001      	b.n	1aee <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    1aea:	2006      	movs	r0, #6
    1aec:	4240      	negs	r0, r0

	return s8Ret;
}
    1aee:	b007      	add	sp, #28
    1af0:	bc3c      	pop	{r2, r3, r4, r5}
    1af2:	4690      	mov	r8, r2
    1af4:	4699      	mov	r9, r3
    1af6:	46a2      	mov	sl, r4
    1af8:	46ab      	mov	fp, r5
    1afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1afc:	00001231 	.word	0x00001231
    1b00:	000013d1 	.word	0x000013d1
    1b04:	00000463 	.word	0x00000463
    1b08:	00004f68 	.word	0x00004f68
    1b0c:	00004b3c 	.word	0x00004b3c
    1b10:	000039e1 	.word	0x000039e1
    1b14:	00005184 	.word	0x00005184
    1b18:	00003a15 	.word	0x00003a15
    1b1c:	00000195 	.word	0x00000195
    1b20:	00000484 	.word	0x00000484
    1b24:	000051e4 	.word	0x000051e4
    1b28:	0000045d 	.word	0x0000045d
    1b2c:	00005154 	.word	0x00005154
    1b30:	000014a5 	.word	0x000014a5
    1b34:	00000473 	.word	0x00000473
    1b38:	000051bc 	.word	0x000051bc
    1b3c:	00003afd 	.word	0x00003afd

00001b40 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    1b40:	b570      	push	{r4, r5, r6, lr}
    1b42:	b082      	sub	sp, #8
    1b44:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    1b46:	4b2a      	ldr	r3, [pc, #168]	; (1bf0 <spi_flash_enable+0xb0>)
    1b48:	4798      	blx	r3
    1b4a:	0500      	lsls	r0, r0, #20
    1b4c:	0d00      	lsrs	r0, r0, #20
    1b4e:	4b29      	ldr	r3, [pc, #164]	; (1bf4 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    1b50:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    1b52:	4298      	cmp	r0, r3
    1b54:	d802      	bhi.n	1b5c <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    1b56:	0028      	movs	r0, r5
    1b58:	b002      	add	sp, #8
    1b5a:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    1b5c:	a901      	add	r1, sp, #4
    1b5e:	4826      	ldr	r0, [pc, #152]	; (1bf8 <spi_flash_enable+0xb8>)
    1b60:	4b26      	ldr	r3, [pc, #152]	; (1bfc <spi_flash_enable+0xbc>)
    1b62:	4798      	blx	r3
    1b64:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    1b66:	d1f6      	bne.n	1b56 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    1b68:	4b25      	ldr	r3, [pc, #148]	; (1c00 <spi_flash_enable+0xc0>)
    1b6a:	9a01      	ldr	r2, [sp, #4]
    1b6c:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    1b6e:	4925      	ldr	r1, [pc, #148]	; (1c04 <spi_flash_enable+0xc4>)
    1b70:	4319      	orrs	r1, r3
    1b72:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    1b74:	4820      	ldr	r0, [pc, #128]	; (1bf8 <spi_flash_enable+0xb8>)
    1b76:	4b24      	ldr	r3, [pc, #144]	; (1c08 <spi_flash_enable+0xc8>)
    1b78:	4798      	blx	r3
		if(enable) {
    1b7a:	2c00      	cmp	r4, #0
    1b7c:	d020      	beq.n	1bc0 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    1b7e:	2100      	movs	r1, #0
    1b80:	4822      	ldr	r0, [pc, #136]	; (1c0c <spi_flash_enable+0xcc>)
    1b82:	4c21      	ldr	r4, [pc, #132]	; (1c08 <spi_flash_enable+0xc8>)
    1b84:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    1b86:	21ab      	movs	r1, #171	; 0xab
    1b88:	4821      	ldr	r0, [pc, #132]	; (1c10 <spi_flash_enable+0xd0>)
    1b8a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    1b8c:	2101      	movs	r1, #1
    1b8e:	4821      	ldr	r0, [pc, #132]	; (1c14 <spi_flash_enable+0xd4>)
    1b90:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    1b92:	2100      	movs	r1, #0
    1b94:	4820      	ldr	r0, [pc, #128]	; (1c18 <spi_flash_enable+0xd8>)
    1b96:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    1b98:	2181      	movs	r1, #129	; 0x81
    1b9a:	4820      	ldr	r0, [pc, #128]	; (1c1c <spi_flash_enable+0xdc>)
    1b9c:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    1b9e:	4e20      	ldr	r6, [pc, #128]	; (1c20 <spi_flash_enable+0xe0>)
    1ba0:	4c20      	ldr	r4, [pc, #128]	; (1c24 <spi_flash_enable+0xe4>)
    1ba2:	0030      	movs	r0, r6
    1ba4:	47a0      	blx	r4
    1ba6:	2801      	cmp	r0, #1
    1ba8:	d1fb      	bne.n	1ba2 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    1baa:	4b15      	ldr	r3, [pc, #84]	; (1c00 <spi_flash_enable+0xc0>)
    1bac:	9a01      	ldr	r2, [sp, #4]
    1bae:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    1bb0:	2180      	movs	r1, #128	; 0x80
    1bb2:	0249      	lsls	r1, r1, #9
    1bb4:	4319      	orrs	r1, r3
    1bb6:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    1bb8:	480f      	ldr	r0, [pc, #60]	; (1bf8 <spi_flash_enable+0xb8>)
    1bba:	4b13      	ldr	r3, [pc, #76]	; (1c08 <spi_flash_enable+0xc8>)
    1bbc:	4798      	blx	r3
    1bbe:	e7ca      	b.n	1b56 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    1bc0:	2100      	movs	r1, #0
    1bc2:	4812      	ldr	r0, [pc, #72]	; (1c0c <spi_flash_enable+0xcc>)
    1bc4:	4c10      	ldr	r4, [pc, #64]	; (1c08 <spi_flash_enable+0xc8>)
    1bc6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    1bc8:	21b9      	movs	r1, #185	; 0xb9
    1bca:	4811      	ldr	r0, [pc, #68]	; (1c10 <spi_flash_enable+0xd0>)
    1bcc:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    1bce:	2101      	movs	r1, #1
    1bd0:	4810      	ldr	r0, [pc, #64]	; (1c14 <spi_flash_enable+0xd4>)
    1bd2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    1bd4:	2100      	movs	r1, #0
    1bd6:	4810      	ldr	r0, [pc, #64]	; (1c18 <spi_flash_enable+0xd8>)
    1bd8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    1bda:	2181      	movs	r1, #129	; 0x81
    1bdc:	480f      	ldr	r0, [pc, #60]	; (1c1c <spi_flash_enable+0xdc>)
    1bde:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    1be0:	4e0f      	ldr	r6, [pc, #60]	; (1c20 <spi_flash_enable+0xe0>)
    1be2:	4c10      	ldr	r4, [pc, #64]	; (1c24 <spi_flash_enable+0xe4>)
    1be4:	0030      	movs	r0, r6
    1be6:	47a0      	blx	r4
    1be8:	2801      	cmp	r0, #1
    1bea:	d1fb      	bne.n	1be4 <spi_flash_enable+0xa4>
    1bec:	e7dd      	b.n	1baa <spi_flash_enable+0x6a>
    1bee:	46c0      	nop			; (mov r8, r8)
    1bf0:	00000c11 	.word	0x00000c11
    1bf4:	0000039f 	.word	0x0000039f
    1bf8:	00001410 	.word	0x00001410
    1bfc:	00000f35 	.word	0x00000f35
    1c00:	f8888fff 	.word	0xf8888fff
    1c04:	01111000 	.word	0x01111000
    1c08:	00000f41 	.word	0x00000f41
    1c0c:	00010208 	.word	0x00010208
    1c10:	0001020c 	.word	0x0001020c
    1c14:	00010214 	.word	0x00010214
    1c18:	0001021c 	.word	0x0001021c
    1c1c:	00010204 	.word	0x00010204
    1c20:	00010218 	.word	0x00010218
    1c24:	00000f29 	.word	0x00000f29

00001c28 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1c28:	4b0c      	ldr	r3, [pc, #48]	; (1c5c <cpu_irq_enter_critical+0x34>)
    1c2a:	681b      	ldr	r3, [r3, #0]
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	d106      	bne.n	1c3e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1c30:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1c34:	2b00      	cmp	r3, #0
    1c36:	d007      	beq.n	1c48 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1c38:	2200      	movs	r2, #0
    1c3a:	4b09      	ldr	r3, [pc, #36]	; (1c60 <cpu_irq_enter_critical+0x38>)
    1c3c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1c3e:	4a07      	ldr	r2, [pc, #28]	; (1c5c <cpu_irq_enter_critical+0x34>)
    1c40:	6813      	ldr	r3, [r2, #0]
    1c42:	3301      	adds	r3, #1
    1c44:	6013      	str	r3, [r2, #0]
}
    1c46:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1c48:	b672      	cpsid	i
    1c4a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1c4e:	2200      	movs	r2, #0
    1c50:	4b04      	ldr	r3, [pc, #16]	; (1c64 <cpu_irq_enter_critical+0x3c>)
    1c52:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1c54:	3201      	adds	r2, #1
    1c56:	4b02      	ldr	r3, [pc, #8]	; (1c60 <cpu_irq_enter_critical+0x38>)
    1c58:	701a      	strb	r2, [r3, #0]
    1c5a:	e7f0      	b.n	1c3e <cpu_irq_enter_critical+0x16>
    1c5c:	200000a0 	.word	0x200000a0
    1c60:	200000a4 	.word	0x200000a4
    1c64:	2000000a 	.word	0x2000000a

00001c68 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1c68:	4b08      	ldr	r3, [pc, #32]	; (1c8c <cpu_irq_leave_critical+0x24>)
    1c6a:	681a      	ldr	r2, [r3, #0]
    1c6c:	3a01      	subs	r2, #1
    1c6e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1c70:	681b      	ldr	r3, [r3, #0]
    1c72:	2b00      	cmp	r3, #0
    1c74:	d109      	bne.n	1c8a <cpu_irq_leave_critical+0x22>
    1c76:	4b06      	ldr	r3, [pc, #24]	; (1c90 <cpu_irq_leave_critical+0x28>)
    1c78:	781b      	ldrb	r3, [r3, #0]
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d005      	beq.n	1c8a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1c7e:	2201      	movs	r2, #1
    1c80:	4b04      	ldr	r3, [pc, #16]	; (1c94 <cpu_irq_leave_critical+0x2c>)
    1c82:	701a      	strb	r2, [r3, #0]
    1c84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1c88:	b662      	cpsie	i
	}
}
    1c8a:	4770      	bx	lr
    1c8c:	200000a0 	.word	0x200000a0
    1c90:	200000a4 	.word	0x200000a4
    1c94:	2000000a 	.word	0x2000000a

00001c98 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1c98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c9a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1c9c:	ac01      	add	r4, sp, #4
    1c9e:	2501      	movs	r5, #1
    1ca0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1ca2:	2700      	movs	r7, #0
    1ca4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1ca6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1ca8:	0021      	movs	r1, r4
    1caa:	2017      	movs	r0, #23
    1cac:	4e06      	ldr	r6, [pc, #24]	; (1cc8 <system_board_init+0x30>)
    1cae:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1cb0:	2280      	movs	r2, #128	; 0x80
    1cb2:	0412      	lsls	r2, r2, #16
    1cb4:	4b05      	ldr	r3, [pc, #20]	; (1ccc <system_board_init+0x34>)
    1cb6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1cb8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1cba:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1cbc:	0021      	movs	r1, r4
    1cbe:	2037      	movs	r0, #55	; 0x37
    1cc0:	47b0      	blx	r6
}
    1cc2:	b003      	add	sp, #12
    1cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cc6:	46c0      	nop			; (mov r8, r8)
    1cc8:	00001ea1 	.word	0x00001ea1
    1ccc:	41004400 	.word	0x41004400

00001cd0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1cd0:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    1cd2:	2a00      	cmp	r2, #0
    1cd4:	d001      	beq.n	1cda <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1cd6:	0018      	movs	r0, r3
    1cd8:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    1cda:	008b      	lsls	r3, r1, #2
    1cdc:	4a06      	ldr	r2, [pc, #24]	; (1cf8 <extint_register_callback+0x28>)
    1cde:	589b      	ldr	r3, [r3, r2]
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	d003      	beq.n	1cec <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    1ce4:	4283      	cmp	r3, r0
    1ce6:	d005      	beq.n	1cf4 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    1ce8:	231d      	movs	r3, #29
    1cea:	e7f4      	b.n	1cd6 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    1cec:	0089      	lsls	r1, r1, #2
    1cee:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    1cf0:	2300      	movs	r3, #0
    1cf2:	e7f0      	b.n	1cd6 <extint_register_callback+0x6>
		return STATUS_OK;
    1cf4:	2300      	movs	r3, #0
    1cf6:	e7ee      	b.n	1cd6 <extint_register_callback+0x6>
    1cf8:	20000188 	.word	0x20000188

00001cfc <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1cfc:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1cfe:	2900      	cmp	r1, #0
    1d00:	d001      	beq.n	1d06 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    1d02:	0018      	movs	r0, r3
    1d04:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1d06:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    1d08:	281f      	cmp	r0, #31
    1d0a:	d800      	bhi.n	1d0e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    1d0c:	4a02      	ldr	r2, [pc, #8]	; (1d18 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    1d0e:	2301      	movs	r3, #1
    1d10:	4083      	lsls	r3, r0
    1d12:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    1d14:	2300      	movs	r3, #0
    1d16:	e7f4      	b.n	1d02 <extint_chan_enable_callback+0x6>
    1d18:	40001800 	.word	0x40001800

00001d1c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d1c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1d1e:	2900      	cmp	r1, #0
    1d20:	d001      	beq.n	1d26 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    1d22:	0018      	movs	r0, r3
    1d24:	4770      	bx	lr
		return NULL;
    1d26:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    1d28:	281f      	cmp	r0, #31
    1d2a:	d800      	bhi.n	1d2e <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    1d2c:	4a02      	ldr	r2, [pc, #8]	; (1d38 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    1d2e:	2301      	movs	r3, #1
    1d30:	4083      	lsls	r3, r0
    1d32:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    1d34:	2300      	movs	r3, #0
    1d36:	e7f4      	b.n	1d22 <extint_chan_disable_callback+0x6>
    1d38:	40001800 	.word	0x40001800

00001d3c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1d3c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1d3e:	2200      	movs	r2, #0
    1d40:	4b10      	ldr	r3, [pc, #64]	; (1d84 <EIC_Handler+0x48>)
    1d42:	701a      	strb	r2, [r3, #0]
    1d44:	2300      	movs	r3, #0
    1d46:	4910      	ldr	r1, [pc, #64]	; (1d88 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1d48:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1d4a:	4e10      	ldr	r6, [pc, #64]	; (1d8c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1d4c:	4c0d      	ldr	r4, [pc, #52]	; (1d84 <EIC_Handler+0x48>)
    1d4e:	e00a      	b.n	1d66 <EIC_Handler+0x2a>
		return eics[eic_index];
    1d50:	490d      	ldr	r1, [pc, #52]	; (1d88 <EIC_Handler+0x4c>)
    1d52:	e008      	b.n	1d66 <EIC_Handler+0x2a>
    1d54:	7823      	ldrb	r3, [r4, #0]
    1d56:	3301      	adds	r3, #1
    1d58:	b2db      	uxtb	r3, r3
    1d5a:	7023      	strb	r3, [r4, #0]
    1d5c:	2b0f      	cmp	r3, #15
    1d5e:	d810      	bhi.n	1d82 <EIC_Handler+0x46>
		return NULL;
    1d60:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    1d62:	2b1f      	cmp	r3, #31
    1d64:	d9f4      	bls.n	1d50 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    1d66:	0028      	movs	r0, r5
    1d68:	4018      	ands	r0, r3
    1d6a:	2201      	movs	r2, #1
    1d6c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    1d6e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1d70:	4210      	tst	r0, r2
    1d72:	d0ef      	beq.n	1d54 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1d74:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1d76:	009b      	lsls	r3, r3, #2
    1d78:	599b      	ldr	r3, [r3, r6]
    1d7a:	2b00      	cmp	r3, #0
    1d7c:	d0ea      	beq.n	1d54 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1d7e:	4798      	blx	r3
    1d80:	e7e8      	b.n	1d54 <EIC_Handler+0x18>
			}
		}
	}
}
    1d82:	bd70      	pop	{r4, r5, r6, pc}
    1d84:	20000184 	.word	0x20000184
    1d88:	40001800 	.word	0x40001800
    1d8c:	20000188 	.word	0x20000188

00001d90 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1d90:	4a04      	ldr	r2, [pc, #16]	; (1da4 <_extint_enable+0x14>)
    1d92:	7813      	ldrb	r3, [r2, #0]
    1d94:	2102      	movs	r1, #2
    1d96:	430b      	orrs	r3, r1
    1d98:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1d9a:	7853      	ldrb	r3, [r2, #1]
    1d9c:	b25b      	sxtb	r3, r3
    1d9e:	2b00      	cmp	r3, #0
    1da0:	dbfb      	blt.n	1d9a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1da2:	4770      	bx	lr
    1da4:	40001800 	.word	0x40001800

00001da8 <_system_extint_init>:
{
    1da8:	b500      	push	{lr}
    1daa:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1dac:	4a12      	ldr	r2, [pc, #72]	; (1df8 <_system_extint_init+0x50>)
    1dae:	6993      	ldr	r3, [r2, #24]
    1db0:	2140      	movs	r1, #64	; 0x40
    1db2:	430b      	orrs	r3, r1
    1db4:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1db6:	a901      	add	r1, sp, #4
    1db8:	2300      	movs	r3, #0
    1dba:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1dbc:	2005      	movs	r0, #5
    1dbe:	4b0f      	ldr	r3, [pc, #60]	; (1dfc <_system_extint_init+0x54>)
    1dc0:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1dc2:	2005      	movs	r0, #5
    1dc4:	4b0e      	ldr	r3, [pc, #56]	; (1e00 <_system_extint_init+0x58>)
    1dc6:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1dc8:	4a0e      	ldr	r2, [pc, #56]	; (1e04 <_system_extint_init+0x5c>)
    1dca:	7813      	ldrb	r3, [r2, #0]
    1dcc:	2101      	movs	r1, #1
    1dce:	430b      	orrs	r3, r1
    1dd0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1dd2:	7853      	ldrb	r3, [r2, #1]
    1dd4:	b25b      	sxtb	r3, r3
    1dd6:	2b00      	cmp	r3, #0
    1dd8:	dbfb      	blt.n	1dd2 <_system_extint_init+0x2a>
    1dda:	4b0b      	ldr	r3, [pc, #44]	; (1e08 <_system_extint_init+0x60>)
    1ddc:	0019      	movs	r1, r3
    1dde:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1de0:	2200      	movs	r2, #0
    1de2:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1de4:	4299      	cmp	r1, r3
    1de6:	d1fc      	bne.n	1de2 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1de8:	2210      	movs	r2, #16
    1dea:	4b08      	ldr	r3, [pc, #32]	; (1e0c <_system_extint_init+0x64>)
    1dec:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1dee:	4b08      	ldr	r3, [pc, #32]	; (1e10 <_system_extint_init+0x68>)
    1df0:	4798      	blx	r3
}
    1df2:	b003      	add	sp, #12
    1df4:	bd00      	pop	{pc}
    1df6:	46c0      	nop			; (mov r8, r8)
    1df8:	40000400 	.word	0x40000400
    1dfc:	0000335d 	.word	0x0000335d
    1e00:	000032d1 	.word	0x000032d1
    1e04:	40001800 	.word	0x40001800
    1e08:	20000188 	.word	0x20000188
    1e0c:	e000e100 	.word	0xe000e100
    1e10:	00001d91 	.word	0x00001d91

00001e14 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    1e14:	2300      	movs	r3, #0
    1e16:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    1e18:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1e1a:	2201      	movs	r2, #1
    1e1c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    1e1e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    1e20:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1e22:	3302      	adds	r3, #2
    1e24:	72c3      	strb	r3, [r0, #11]
}
    1e26:	4770      	bx	lr

00001e28 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e2a:	b083      	sub	sp, #12
    1e2c:	0005      	movs	r5, r0
    1e2e:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1e30:	a901      	add	r1, sp, #4
    1e32:	2300      	movs	r3, #0
    1e34:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1e36:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    1e38:	7923      	ldrb	r3, [r4, #4]
    1e3a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1e3c:	7a23      	ldrb	r3, [r4, #8]
    1e3e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1e40:	7820      	ldrb	r0, [r4, #0]
    1e42:	4b15      	ldr	r3, [pc, #84]	; (1e98 <extint_chan_set_config+0x70>)
    1e44:	4798      	blx	r3
		return NULL;
    1e46:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    1e48:	2d1f      	cmp	r5, #31
    1e4a:	d800      	bhi.n	1e4e <extint_chan_set_config+0x26>
		return eics[eic_index];
    1e4c:	4813      	ldr	r0, [pc, #76]	; (1e9c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    1e4e:	2207      	movs	r2, #7
    1e50:	402a      	ands	r2, r5
    1e52:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    1e54:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    1e56:	7aa3      	ldrb	r3, [r4, #10]
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d001      	beq.n	1e60 <extint_chan_set_config+0x38>
    1e5c:	2308      	movs	r3, #8
    1e5e:	431f      	orrs	r7, r3
    1e60:	08eb      	lsrs	r3, r5, #3
    1e62:	009b      	lsls	r3, r3, #2
    1e64:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    1e66:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1e68:	260f      	movs	r6, #15
    1e6a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    1e6c:	43b1      	bics	r1, r6
			(new_config << config_pos);
    1e6e:	4097      	lsls	r7, r2
    1e70:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1e72:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    1e74:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    1e76:	7a63      	ldrb	r3, [r4, #9]
    1e78:	2b00      	cmp	r3, #0
    1e7a:	d106      	bne.n	1e8a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    1e7c:	6943      	ldr	r3, [r0, #20]
    1e7e:	2201      	movs	r2, #1
    1e80:	40aa      	lsls	r2, r5
    1e82:	4393      	bics	r3, r2
    1e84:	6143      	str	r3, [r0, #20]
	}
}
    1e86:	b003      	add	sp, #12
    1e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    1e8a:	6942      	ldr	r2, [r0, #20]
    1e8c:	2301      	movs	r3, #1
    1e8e:	40ab      	lsls	r3, r5
    1e90:	4313      	orrs	r3, r2
    1e92:	6143      	str	r3, [r0, #20]
    1e94:	e7f7      	b.n	1e86 <extint_chan_set_config+0x5e>
    1e96:	46c0      	nop			; (mov r8, r8)
    1e98:	00003455 	.word	0x00003455
    1e9c:	40001800 	.word	0x40001800

00001ea0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1ea0:	b500      	push	{lr}
    1ea2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1ea4:	ab01      	add	r3, sp, #4
    1ea6:	2280      	movs	r2, #128	; 0x80
    1ea8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1eaa:	780a      	ldrb	r2, [r1, #0]
    1eac:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1eae:	784a      	ldrb	r2, [r1, #1]
    1eb0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1eb2:	788a      	ldrb	r2, [r1, #2]
    1eb4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1eb6:	0019      	movs	r1, r3
    1eb8:	4b01      	ldr	r3, [pc, #4]	; (1ec0 <port_pin_set_config+0x20>)
    1eba:	4798      	blx	r3
}
    1ebc:	b003      	add	sp, #12
    1ebe:	bd00      	pop	{pc}
    1ec0:	00003455 	.word	0x00003455

00001ec4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ec6:	46de      	mov	lr, fp
    1ec8:	4657      	mov	r7, sl
    1eca:	464e      	mov	r6, r9
    1ecc:	4645      	mov	r5, r8
    1ece:	b5e0      	push	{r5, r6, r7, lr}
    1ed0:	b087      	sub	sp, #28
    1ed2:	4680      	mov	r8, r0
    1ed4:	9104      	str	r1, [sp, #16]
    1ed6:	0016      	movs	r6, r2
    1ed8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1eda:	2200      	movs	r2, #0
    1edc:	2300      	movs	r3, #0
    1ede:	2100      	movs	r1, #0
    1ee0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1ee2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1ee4:	2001      	movs	r0, #1
    1ee6:	0021      	movs	r1, r4
    1ee8:	9600      	str	r6, [sp, #0]
    1eea:	9701      	str	r7, [sp, #4]
    1eec:	465c      	mov	r4, fp
    1eee:	9403      	str	r4, [sp, #12]
    1ef0:	4644      	mov	r4, r8
    1ef2:	9405      	str	r4, [sp, #20]
    1ef4:	e013      	b.n	1f1e <long_division+0x5a>
    1ef6:	2420      	movs	r4, #32
    1ef8:	1a64      	subs	r4, r4, r1
    1efa:	0005      	movs	r5, r0
    1efc:	40e5      	lsrs	r5, r4
    1efe:	46a8      	mov	r8, r5
    1f00:	e014      	b.n	1f2c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1f02:	9c00      	ldr	r4, [sp, #0]
    1f04:	9d01      	ldr	r5, [sp, #4]
    1f06:	1b12      	subs	r2, r2, r4
    1f08:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1f0a:	465c      	mov	r4, fp
    1f0c:	464d      	mov	r5, r9
    1f0e:	432c      	orrs	r4, r5
    1f10:	46a3      	mov	fp, r4
    1f12:	9c03      	ldr	r4, [sp, #12]
    1f14:	4645      	mov	r5, r8
    1f16:	432c      	orrs	r4, r5
    1f18:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1f1a:	3901      	subs	r1, #1
    1f1c:	d325      	bcc.n	1f6a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1f1e:	2420      	movs	r4, #32
    1f20:	4264      	negs	r4, r4
    1f22:	190c      	adds	r4, r1, r4
    1f24:	d4e7      	bmi.n	1ef6 <long_division+0x32>
    1f26:	0005      	movs	r5, r0
    1f28:	40a5      	lsls	r5, r4
    1f2a:	46a8      	mov	r8, r5
    1f2c:	0004      	movs	r4, r0
    1f2e:	408c      	lsls	r4, r1
    1f30:	46a1      	mov	r9, r4
		r = r << 1;
    1f32:	1892      	adds	r2, r2, r2
    1f34:	415b      	adcs	r3, r3
    1f36:	0014      	movs	r4, r2
    1f38:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1f3a:	9e05      	ldr	r6, [sp, #20]
    1f3c:	464f      	mov	r7, r9
    1f3e:	403e      	ands	r6, r7
    1f40:	46b4      	mov	ip, r6
    1f42:	9e04      	ldr	r6, [sp, #16]
    1f44:	4647      	mov	r7, r8
    1f46:	403e      	ands	r6, r7
    1f48:	46b2      	mov	sl, r6
    1f4a:	4666      	mov	r6, ip
    1f4c:	4657      	mov	r7, sl
    1f4e:	433e      	orrs	r6, r7
    1f50:	d003      	beq.n	1f5a <long_division+0x96>
			r |= 0x01;
    1f52:	0006      	movs	r6, r0
    1f54:	4326      	orrs	r6, r4
    1f56:	0032      	movs	r2, r6
    1f58:	002b      	movs	r3, r5
		if (r >= d) {
    1f5a:	9c00      	ldr	r4, [sp, #0]
    1f5c:	9d01      	ldr	r5, [sp, #4]
    1f5e:	429d      	cmp	r5, r3
    1f60:	d8db      	bhi.n	1f1a <long_division+0x56>
    1f62:	d1ce      	bne.n	1f02 <long_division+0x3e>
    1f64:	4294      	cmp	r4, r2
    1f66:	d8d8      	bhi.n	1f1a <long_division+0x56>
    1f68:	e7cb      	b.n	1f02 <long_division+0x3e>
    1f6a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1f6c:	4658      	mov	r0, fp
    1f6e:	0019      	movs	r1, r3
    1f70:	b007      	add	sp, #28
    1f72:	bc3c      	pop	{r2, r3, r4, r5}
    1f74:	4690      	mov	r8, r2
    1f76:	4699      	mov	r9, r3
    1f78:	46a2      	mov	sl, r4
    1f7a:	46ab      	mov	fp, r5
    1f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001f7e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1f7e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1f80:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1f82:	2340      	movs	r3, #64	; 0x40
    1f84:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1f86:	4281      	cmp	r1, r0
    1f88:	d202      	bcs.n	1f90 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1f8a:	0018      	movs	r0, r3
    1f8c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1f8e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1f90:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1f92:	1c63      	adds	r3, r4, #1
    1f94:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1f96:	4288      	cmp	r0, r1
    1f98:	d9f9      	bls.n	1f8e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1f9a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1f9c:	2cff      	cmp	r4, #255	; 0xff
    1f9e:	d8f4      	bhi.n	1f8a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1fa0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1fa2:	2300      	movs	r3, #0
    1fa4:	e7f1      	b.n	1f8a <_sercom_get_sync_baud_val+0xc>
	...

00001fa8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1faa:	b083      	sub	sp, #12
    1fac:	000f      	movs	r7, r1
    1fae:	0016      	movs	r6, r2
    1fb0:	aa08      	add	r2, sp, #32
    1fb2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1fb4:	0004      	movs	r4, r0
    1fb6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1fb8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1fba:	42bc      	cmp	r4, r7
    1fbc:	d902      	bls.n	1fc4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1fbe:	0010      	movs	r0, r2
    1fc0:	b003      	add	sp, #12
    1fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d114      	bne.n	1ff2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1fc8:	0002      	movs	r2, r0
    1fca:	0008      	movs	r0, r1
    1fcc:	2100      	movs	r1, #0
    1fce:	4c19      	ldr	r4, [pc, #100]	; (2034 <STACK_SIZE+0x34>)
    1fd0:	47a0      	blx	r4
    1fd2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1fd4:	003a      	movs	r2, r7
    1fd6:	2300      	movs	r3, #0
    1fd8:	2000      	movs	r0, #0
    1fda:	4c17      	ldr	r4, [pc, #92]	; (2038 <STACK_SIZE+0x38>)
    1fdc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1fde:	2200      	movs	r2, #0
    1fe0:	2301      	movs	r3, #1
    1fe2:	1a12      	subs	r2, r2, r0
    1fe4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1fe6:	0c12      	lsrs	r2, r2, #16
    1fe8:	041b      	lsls	r3, r3, #16
    1fea:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1fec:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1fee:	2200      	movs	r2, #0
    1ff0:	e7e5      	b.n	1fbe <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1ff2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1ff4:	2b01      	cmp	r3, #1
    1ff6:	d1f9      	bne.n	1fec <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1ff8:	000a      	movs	r2, r1
    1ffa:	2300      	movs	r3, #0
    1ffc:	2100      	movs	r1, #0
    1ffe:	4c0d      	ldr	r4, [pc, #52]	; (2034 <STACK_SIZE+0x34>)
    2000:	47a0      	blx	r4
    2002:	0002      	movs	r2, r0
    2004:	000b      	movs	r3, r1
    2006:	9200      	str	r2, [sp, #0]
    2008:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    200a:	0038      	movs	r0, r7
    200c:	2100      	movs	r1, #0
    200e:	4c0a      	ldr	r4, [pc, #40]	; (2038 <STACK_SIZE+0x38>)
    2010:	47a0      	blx	r4
    2012:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    2014:	2380      	movs	r3, #128	; 0x80
    2016:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2018:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    201a:	4298      	cmp	r0, r3
    201c:	d8cf      	bhi.n	1fbe <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    201e:	0f79      	lsrs	r1, r7, #29
    2020:	00f8      	lsls	r0, r7, #3
    2022:	9a00      	ldr	r2, [sp, #0]
    2024:	9b01      	ldr	r3, [sp, #4]
    2026:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    2028:	00ea      	lsls	r2, r5, #3
    202a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    202c:	b2d2      	uxtb	r2, r2
    202e:	0352      	lsls	r2, r2, #13
    2030:	432a      	orrs	r2, r5
    2032:	e7db      	b.n	1fec <_sercom_get_async_baud_val+0x44>
    2034:	00003935 	.word	0x00003935
    2038:	00001ec5 	.word	0x00001ec5

0000203c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    203c:	b510      	push	{r4, lr}
    203e:	b082      	sub	sp, #8
    2040:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2042:	4b0e      	ldr	r3, [pc, #56]	; (207c <sercom_set_gclk_generator+0x40>)
    2044:	781b      	ldrb	r3, [r3, #0]
    2046:	2b00      	cmp	r3, #0
    2048:	d007      	beq.n	205a <sercom_set_gclk_generator+0x1e>
    204a:	2900      	cmp	r1, #0
    204c:	d105      	bne.n	205a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    204e:	4b0b      	ldr	r3, [pc, #44]	; (207c <sercom_set_gclk_generator+0x40>)
    2050:	785b      	ldrb	r3, [r3, #1]
    2052:	4283      	cmp	r3, r0
    2054:	d010      	beq.n	2078 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2056:	201d      	movs	r0, #29
    2058:	e00c      	b.n	2074 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    205a:	a901      	add	r1, sp, #4
    205c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    205e:	2013      	movs	r0, #19
    2060:	4b07      	ldr	r3, [pc, #28]	; (2080 <sercom_set_gclk_generator+0x44>)
    2062:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2064:	2013      	movs	r0, #19
    2066:	4b07      	ldr	r3, [pc, #28]	; (2084 <sercom_set_gclk_generator+0x48>)
    2068:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    206a:	4b04      	ldr	r3, [pc, #16]	; (207c <sercom_set_gclk_generator+0x40>)
    206c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    206e:	2201      	movs	r2, #1
    2070:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    2072:	2000      	movs	r0, #0
}
    2074:	b002      	add	sp, #8
    2076:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    2078:	2000      	movs	r0, #0
    207a:	e7fb      	b.n	2074 <sercom_set_gclk_generator+0x38>
    207c:	200000a8 	.word	0x200000a8
    2080:	0000335d 	.word	0x0000335d
    2084:	000032d1 	.word	0x000032d1

00002088 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2088:	4b40      	ldr	r3, [pc, #256]	; (218c <_sercom_get_default_pad+0x104>)
    208a:	4298      	cmp	r0, r3
    208c:	d031      	beq.n	20f2 <_sercom_get_default_pad+0x6a>
    208e:	d90a      	bls.n	20a6 <_sercom_get_default_pad+0x1e>
    2090:	4b3f      	ldr	r3, [pc, #252]	; (2190 <_sercom_get_default_pad+0x108>)
    2092:	4298      	cmp	r0, r3
    2094:	d04d      	beq.n	2132 <_sercom_get_default_pad+0xaa>
    2096:	4b3f      	ldr	r3, [pc, #252]	; (2194 <_sercom_get_default_pad+0x10c>)
    2098:	4298      	cmp	r0, r3
    209a:	d05a      	beq.n	2152 <_sercom_get_default_pad+0xca>
    209c:	4b3e      	ldr	r3, [pc, #248]	; (2198 <_sercom_get_default_pad+0x110>)
    209e:	4298      	cmp	r0, r3
    20a0:	d037      	beq.n	2112 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    20a2:	2000      	movs	r0, #0
}
    20a4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    20a6:	4b3d      	ldr	r3, [pc, #244]	; (219c <_sercom_get_default_pad+0x114>)
    20a8:	4298      	cmp	r0, r3
    20aa:	d00c      	beq.n	20c6 <_sercom_get_default_pad+0x3e>
    20ac:	4b3c      	ldr	r3, [pc, #240]	; (21a0 <_sercom_get_default_pad+0x118>)
    20ae:	4298      	cmp	r0, r3
    20b0:	d1f7      	bne.n	20a2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    20b2:	2901      	cmp	r1, #1
    20b4:	d017      	beq.n	20e6 <_sercom_get_default_pad+0x5e>
    20b6:	2900      	cmp	r1, #0
    20b8:	d05d      	beq.n	2176 <_sercom_get_default_pad+0xee>
    20ba:	2902      	cmp	r1, #2
    20bc:	d015      	beq.n	20ea <_sercom_get_default_pad+0x62>
    20be:	2903      	cmp	r1, #3
    20c0:	d015      	beq.n	20ee <_sercom_get_default_pad+0x66>
	return 0;
    20c2:	2000      	movs	r0, #0
    20c4:	e7ee      	b.n	20a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    20c6:	2901      	cmp	r1, #1
    20c8:	d007      	beq.n	20da <_sercom_get_default_pad+0x52>
    20ca:	2900      	cmp	r1, #0
    20cc:	d051      	beq.n	2172 <_sercom_get_default_pad+0xea>
    20ce:	2902      	cmp	r1, #2
    20d0:	d005      	beq.n	20de <_sercom_get_default_pad+0x56>
    20d2:	2903      	cmp	r1, #3
    20d4:	d005      	beq.n	20e2 <_sercom_get_default_pad+0x5a>
	return 0;
    20d6:	2000      	movs	r0, #0
    20d8:	e7e4      	b.n	20a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    20da:	4832      	ldr	r0, [pc, #200]	; (21a4 <_sercom_get_default_pad+0x11c>)
    20dc:	e7e2      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    20de:	4832      	ldr	r0, [pc, #200]	; (21a8 <_sercom_get_default_pad+0x120>)
    20e0:	e7e0      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    20e2:	4832      	ldr	r0, [pc, #200]	; (21ac <_sercom_get_default_pad+0x124>)
    20e4:	e7de      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    20e6:	4832      	ldr	r0, [pc, #200]	; (21b0 <_sercom_get_default_pad+0x128>)
    20e8:	e7dc      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    20ea:	4832      	ldr	r0, [pc, #200]	; (21b4 <_sercom_get_default_pad+0x12c>)
    20ec:	e7da      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    20ee:	4832      	ldr	r0, [pc, #200]	; (21b8 <_sercom_get_default_pad+0x130>)
    20f0:	e7d8      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    20f2:	2901      	cmp	r1, #1
    20f4:	d007      	beq.n	2106 <_sercom_get_default_pad+0x7e>
    20f6:	2900      	cmp	r1, #0
    20f8:	d03f      	beq.n	217a <_sercom_get_default_pad+0xf2>
    20fa:	2902      	cmp	r1, #2
    20fc:	d005      	beq.n	210a <_sercom_get_default_pad+0x82>
    20fe:	2903      	cmp	r1, #3
    2100:	d005      	beq.n	210e <_sercom_get_default_pad+0x86>
	return 0;
    2102:	2000      	movs	r0, #0
    2104:	e7ce      	b.n	20a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2106:	482d      	ldr	r0, [pc, #180]	; (21bc <_sercom_get_default_pad+0x134>)
    2108:	e7cc      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    210a:	482d      	ldr	r0, [pc, #180]	; (21c0 <_sercom_get_default_pad+0x138>)
    210c:	e7ca      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    210e:	482d      	ldr	r0, [pc, #180]	; (21c4 <_sercom_get_default_pad+0x13c>)
    2110:	e7c8      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    2112:	2901      	cmp	r1, #1
    2114:	d007      	beq.n	2126 <_sercom_get_default_pad+0x9e>
    2116:	2900      	cmp	r1, #0
    2118:	d031      	beq.n	217e <_sercom_get_default_pad+0xf6>
    211a:	2902      	cmp	r1, #2
    211c:	d005      	beq.n	212a <_sercom_get_default_pad+0xa2>
    211e:	2903      	cmp	r1, #3
    2120:	d005      	beq.n	212e <_sercom_get_default_pad+0xa6>
	return 0;
    2122:	2000      	movs	r0, #0
    2124:	e7be      	b.n	20a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2126:	4828      	ldr	r0, [pc, #160]	; (21c8 <_sercom_get_default_pad+0x140>)
    2128:	e7bc      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    212a:	4828      	ldr	r0, [pc, #160]	; (21cc <_sercom_get_default_pad+0x144>)
    212c:	e7ba      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    212e:	4828      	ldr	r0, [pc, #160]	; (21d0 <_sercom_get_default_pad+0x148>)
    2130:	e7b8      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    2132:	2901      	cmp	r1, #1
    2134:	d007      	beq.n	2146 <_sercom_get_default_pad+0xbe>
    2136:	2900      	cmp	r1, #0
    2138:	d023      	beq.n	2182 <_sercom_get_default_pad+0xfa>
    213a:	2902      	cmp	r1, #2
    213c:	d005      	beq.n	214a <_sercom_get_default_pad+0xc2>
    213e:	2903      	cmp	r1, #3
    2140:	d005      	beq.n	214e <_sercom_get_default_pad+0xc6>
	return 0;
    2142:	2000      	movs	r0, #0
    2144:	e7ae      	b.n	20a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2146:	4823      	ldr	r0, [pc, #140]	; (21d4 <_sercom_get_default_pad+0x14c>)
    2148:	e7ac      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    214a:	4823      	ldr	r0, [pc, #140]	; (21d8 <_sercom_get_default_pad+0x150>)
    214c:	e7aa      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    214e:	4823      	ldr	r0, [pc, #140]	; (21dc <_sercom_get_default_pad+0x154>)
    2150:	e7a8      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    2152:	2901      	cmp	r1, #1
    2154:	d007      	beq.n	2166 <_sercom_get_default_pad+0xde>
    2156:	2900      	cmp	r1, #0
    2158:	d015      	beq.n	2186 <_sercom_get_default_pad+0xfe>
    215a:	2902      	cmp	r1, #2
    215c:	d005      	beq.n	216a <_sercom_get_default_pad+0xe2>
    215e:	2903      	cmp	r1, #3
    2160:	d005      	beq.n	216e <_sercom_get_default_pad+0xe6>
	return 0;
    2162:	2000      	movs	r0, #0
    2164:	e79e      	b.n	20a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2166:	481e      	ldr	r0, [pc, #120]	; (21e0 <_sercom_get_default_pad+0x158>)
    2168:	e79c      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    216a:	481e      	ldr	r0, [pc, #120]	; (21e4 <_sercom_get_default_pad+0x15c>)
    216c:	e79a      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    216e:	481e      	ldr	r0, [pc, #120]	; (21e8 <_sercom_get_default_pad+0x160>)
    2170:	e798      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    2172:	481e      	ldr	r0, [pc, #120]	; (21ec <_sercom_get_default_pad+0x164>)
    2174:	e796      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    2176:	2003      	movs	r0, #3
    2178:	e794      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    217a:	481d      	ldr	r0, [pc, #116]	; (21f0 <_sercom_get_default_pad+0x168>)
    217c:	e792      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    217e:	481d      	ldr	r0, [pc, #116]	; (21f4 <_sercom_get_default_pad+0x16c>)
    2180:	e790      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    2182:	481d      	ldr	r0, [pc, #116]	; (21f8 <_sercom_get_default_pad+0x170>)
    2184:	e78e      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    2186:	481d      	ldr	r0, [pc, #116]	; (21fc <_sercom_get_default_pad+0x174>)
    2188:	e78c      	b.n	20a4 <_sercom_get_default_pad+0x1c>
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	42001000 	.word	0x42001000
    2190:	42001800 	.word	0x42001800
    2194:	42001c00 	.word	0x42001c00
    2198:	42001400 	.word	0x42001400
    219c:	42000800 	.word	0x42000800
    21a0:	42000c00 	.word	0x42000c00
    21a4:	00050003 	.word	0x00050003
    21a8:	00060003 	.word	0x00060003
    21ac:	00070003 	.word	0x00070003
    21b0:	00010003 	.word	0x00010003
    21b4:	001e0003 	.word	0x001e0003
    21b8:	001f0003 	.word	0x001f0003
    21bc:	00090003 	.word	0x00090003
    21c0:	000a0003 	.word	0x000a0003
    21c4:	000b0003 	.word	0x000b0003
    21c8:	00110003 	.word	0x00110003
    21cc:	00120003 	.word	0x00120003
    21d0:	00130003 	.word	0x00130003
    21d4:	000d0003 	.word	0x000d0003
    21d8:	000e0003 	.word	0x000e0003
    21dc:	000f0003 	.word	0x000f0003
    21e0:	00170003 	.word	0x00170003
    21e4:	00180003 	.word	0x00180003
    21e8:	00190003 	.word	0x00190003
    21ec:	00040003 	.word	0x00040003
    21f0:	00080003 	.word	0x00080003
    21f4:	00100003 	.word	0x00100003
    21f8:	000c0003 	.word	0x000c0003
    21fc:	00160003 	.word	0x00160003

00002200 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2200:	b530      	push	{r4, r5, lr}
    2202:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2204:	4b0b      	ldr	r3, [pc, #44]	; (2234 <_sercom_get_sercom_inst_index+0x34>)
    2206:	466a      	mov	r2, sp
    2208:	cb32      	ldmia	r3!, {r1, r4, r5}
    220a:	c232      	stmia	r2!, {r1, r4, r5}
    220c:	cb32      	ldmia	r3!, {r1, r4, r5}
    220e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2210:	9b00      	ldr	r3, [sp, #0]
    2212:	4283      	cmp	r3, r0
    2214:	d00b      	beq.n	222e <_sercom_get_sercom_inst_index+0x2e>
    2216:	2301      	movs	r3, #1
    2218:	009a      	lsls	r2, r3, #2
    221a:	4669      	mov	r1, sp
    221c:	5852      	ldr	r2, [r2, r1]
    221e:	4282      	cmp	r2, r0
    2220:	d006      	beq.n	2230 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2222:	3301      	adds	r3, #1
    2224:	2b06      	cmp	r3, #6
    2226:	d1f7      	bne.n	2218 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2228:	2000      	movs	r0, #0
}
    222a:	b007      	add	sp, #28
    222c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    222e:	2300      	movs	r3, #0
			return i;
    2230:	b2d8      	uxtb	r0, r3
    2232:	e7fa      	b.n	222a <_sercom_get_sercom_inst_index+0x2a>
    2234:	00005440 	.word	0x00005440

00002238 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2238:	4770      	bx	lr
	...

0000223c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    223c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    223e:	4b0a      	ldr	r3, [pc, #40]	; (2268 <_sercom_set_handler+0x2c>)
    2240:	781b      	ldrb	r3, [r3, #0]
    2242:	2b00      	cmp	r3, #0
    2244:	d10c      	bne.n	2260 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2246:	4f09      	ldr	r7, [pc, #36]	; (226c <_sercom_set_handler+0x30>)
    2248:	4e09      	ldr	r6, [pc, #36]	; (2270 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    224a:	4d0a      	ldr	r5, [pc, #40]	; (2274 <_sercom_set_handler+0x38>)
    224c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    224e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2250:	195a      	adds	r2, r3, r5
    2252:	6014      	str	r4, [r2, #0]
    2254:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2256:	2b18      	cmp	r3, #24
    2258:	d1f9      	bne.n	224e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    225a:	2201      	movs	r2, #1
    225c:	4b02      	ldr	r3, [pc, #8]	; (2268 <_sercom_set_handler+0x2c>)
    225e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2260:	0080      	lsls	r0, r0, #2
    2262:	4b02      	ldr	r3, [pc, #8]	; (226c <_sercom_set_handler+0x30>)
    2264:	50c1      	str	r1, [r0, r3]
}
    2266:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2268:	200000aa 	.word	0x200000aa
    226c:	200000ac 	.word	0x200000ac
    2270:	00002239 	.word	0x00002239
    2274:	200001c8 	.word	0x200001c8

00002278 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2278:	b500      	push	{lr}
    227a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    227c:	2309      	movs	r3, #9
    227e:	466a      	mov	r2, sp
    2280:	7013      	strb	r3, [r2, #0]
    2282:	3301      	adds	r3, #1
    2284:	7053      	strb	r3, [r2, #1]
    2286:	3301      	adds	r3, #1
    2288:	7093      	strb	r3, [r2, #2]
    228a:	3301      	adds	r3, #1
    228c:	70d3      	strb	r3, [r2, #3]
    228e:	3301      	adds	r3, #1
    2290:	7113      	strb	r3, [r2, #4]
    2292:	3301      	adds	r3, #1
    2294:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2296:	4b03      	ldr	r3, [pc, #12]	; (22a4 <_sercom_get_interrupt_vector+0x2c>)
    2298:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    229a:	466b      	mov	r3, sp
    229c:	5618      	ldrsb	r0, [r3, r0]
}
    229e:	b003      	add	sp, #12
    22a0:	bd00      	pop	{pc}
    22a2:	46c0      	nop			; (mov r8, r8)
    22a4:	00002201 	.word	0x00002201

000022a8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    22a8:	b510      	push	{r4, lr}
    22aa:	4b02      	ldr	r3, [pc, #8]	; (22b4 <SERCOM0_Handler+0xc>)
    22ac:	681b      	ldr	r3, [r3, #0]
    22ae:	2000      	movs	r0, #0
    22b0:	4798      	blx	r3
    22b2:	bd10      	pop	{r4, pc}
    22b4:	200000ac 	.word	0x200000ac

000022b8 <SERCOM1_Handler>:
    22b8:	b510      	push	{r4, lr}
    22ba:	4b02      	ldr	r3, [pc, #8]	; (22c4 <SERCOM1_Handler+0xc>)
    22bc:	685b      	ldr	r3, [r3, #4]
    22be:	2001      	movs	r0, #1
    22c0:	4798      	blx	r3
    22c2:	bd10      	pop	{r4, pc}
    22c4:	200000ac 	.word	0x200000ac

000022c8 <SERCOM2_Handler>:
    22c8:	b510      	push	{r4, lr}
    22ca:	4b02      	ldr	r3, [pc, #8]	; (22d4 <SERCOM2_Handler+0xc>)
    22cc:	689b      	ldr	r3, [r3, #8]
    22ce:	2002      	movs	r0, #2
    22d0:	4798      	blx	r3
    22d2:	bd10      	pop	{r4, pc}
    22d4:	200000ac 	.word	0x200000ac

000022d8 <SERCOM3_Handler>:
    22d8:	b510      	push	{r4, lr}
    22da:	4b02      	ldr	r3, [pc, #8]	; (22e4 <SERCOM3_Handler+0xc>)
    22dc:	68db      	ldr	r3, [r3, #12]
    22de:	2003      	movs	r0, #3
    22e0:	4798      	blx	r3
    22e2:	bd10      	pop	{r4, pc}
    22e4:	200000ac 	.word	0x200000ac

000022e8 <SERCOM4_Handler>:
    22e8:	b510      	push	{r4, lr}
    22ea:	4b02      	ldr	r3, [pc, #8]	; (22f4 <SERCOM4_Handler+0xc>)
    22ec:	691b      	ldr	r3, [r3, #16]
    22ee:	2004      	movs	r0, #4
    22f0:	4798      	blx	r3
    22f2:	bd10      	pop	{r4, pc}
    22f4:	200000ac 	.word	0x200000ac

000022f8 <SERCOM5_Handler>:
    22f8:	b510      	push	{r4, lr}
    22fa:	4b02      	ldr	r3, [pc, #8]	; (2304 <SERCOM5_Handler+0xc>)
    22fc:	695b      	ldr	r3, [r3, #20]
    22fe:	2005      	movs	r0, #5
    2300:	4798      	blx	r3
    2302:	bd10      	pop	{r4, pc}
    2304:	200000ac 	.word	0x200000ac

00002308 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    2308:	b5f0      	push	{r4, r5, r6, r7, lr}
    230a:	b08b      	sub	sp, #44	; 0x2c
    230c:	0005      	movs	r5, r0
    230e:	000c      	movs	r4, r1
    2310:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    2312:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2314:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    2316:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2318:	079b      	lsls	r3, r3, #30
    231a:	d501      	bpl.n	2320 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    231c:	b00b      	add	sp, #44	; 0x2c
    231e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2320:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    2322:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2324:	07db      	lsls	r3, r3, #31
    2326:	d4f9      	bmi.n	231c <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2328:	0008      	movs	r0, r1
    232a:	4b60      	ldr	r3, [pc, #384]	; (24ac <spi_init+0x1a4>)
    232c:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    232e:	4a60      	ldr	r2, [pc, #384]	; (24b0 <spi_init+0x1a8>)
    2330:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2332:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2334:	2301      	movs	r3, #1
    2336:	40bb      	lsls	r3, r7
    2338:	430b      	orrs	r3, r1
    233a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    233c:	a909      	add	r1, sp, #36	; 0x24
    233e:	2724      	movs	r7, #36	; 0x24
    2340:	5df3      	ldrb	r3, [r6, r7]
    2342:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2344:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2346:	b2c3      	uxtb	r3, r0
    2348:	9301      	str	r3, [sp, #4]
    234a:	0018      	movs	r0, r3
    234c:	4b59      	ldr	r3, [pc, #356]	; (24b4 <spi_init+0x1ac>)
    234e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2350:	9801      	ldr	r0, [sp, #4]
    2352:	4b59      	ldr	r3, [pc, #356]	; (24b8 <spi_init+0x1b0>)
    2354:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2356:	5df0      	ldrb	r0, [r6, r7]
    2358:	2100      	movs	r1, #0
    235a:	4b58      	ldr	r3, [pc, #352]	; (24bc <spi_init+0x1b4>)
    235c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    235e:	7833      	ldrb	r3, [r6, #0]
    2360:	2b01      	cmp	r3, #1
    2362:	d038      	beq.n	23d6 <spi_init+0xce>
    2364:	002b      	movs	r3, r5
    2366:	330c      	adds	r3, #12
    2368:	0029      	movs	r1, r5
    236a:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    236c:	2200      	movs	r2, #0
    236e:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    2370:	428b      	cmp	r3, r1
    2372:	d1fc      	bne.n	236e <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    2374:	2300      	movs	r3, #0
    2376:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    2378:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    237a:	2400      	movs	r4, #0
    237c:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    237e:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    2380:	3336      	adds	r3, #54	; 0x36
    2382:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    2384:	3301      	adds	r3, #1
    2386:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    2388:	3301      	adds	r3, #1
    238a:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    238c:	3b35      	subs	r3, #53	; 0x35
    238e:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    2390:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    2392:	6828      	ldr	r0, [r5, #0]
    2394:	4b45      	ldr	r3, [pc, #276]	; (24ac <spi_init+0x1a4>)
    2396:	4798      	blx	r3
    2398:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    239a:	4949      	ldr	r1, [pc, #292]	; (24c0 <spi_init+0x1b8>)
    239c:	4b49      	ldr	r3, [pc, #292]	; (24c4 <spi_init+0x1bc>)
    239e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    23a0:	00bf      	lsls	r7, r7, #2
    23a2:	4b49      	ldr	r3, [pc, #292]	; (24c8 <spi_init+0x1c0>)
    23a4:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    23a6:	682f      	ldr	r7, [r5, #0]
    23a8:	ab04      	add	r3, sp, #16
    23aa:	2280      	movs	r2, #128	; 0x80
    23ac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    23ae:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    23b0:	3a7f      	subs	r2, #127	; 0x7f
    23b2:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    23b4:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    23b6:	7833      	ldrb	r3, [r6, #0]
    23b8:	2b00      	cmp	r3, #0
    23ba:	d102      	bne.n	23c2 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    23bc:	2200      	movs	r2, #0
    23be:	ab04      	add	r3, sp, #16
    23c0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    23c2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    23c4:	9305      	str	r3, [sp, #20]
    23c6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    23c8:	9306      	str	r3, [sp, #24]
    23ca:	6b33      	ldr	r3, [r6, #48]	; 0x30
    23cc:	9307      	str	r3, [sp, #28]
    23ce:	6b73      	ldr	r3, [r6, #52]	; 0x34
    23d0:	9308      	str	r3, [sp, #32]
    23d2:	2400      	movs	r4, #0
    23d4:	e00b      	b.n	23ee <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    23d6:	6823      	ldr	r3, [r4, #0]
    23d8:	220c      	movs	r2, #12
    23da:	4313      	orrs	r3, r2
    23dc:	6023      	str	r3, [r4, #0]
    23de:	e7c1      	b.n	2364 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    23e0:	0038      	movs	r0, r7
    23e2:	4b3a      	ldr	r3, [pc, #232]	; (24cc <spi_init+0x1c4>)
    23e4:	4798      	blx	r3
    23e6:	e00a      	b.n	23fe <spi_init+0xf6>
    23e8:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    23ea:	2c04      	cmp	r4, #4
    23ec:	d010      	beq.n	2410 <spi_init+0x108>
    23ee:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    23f0:	00a3      	lsls	r3, r4, #2
    23f2:	aa02      	add	r2, sp, #8
    23f4:	200c      	movs	r0, #12
    23f6:	1812      	adds	r2, r2, r0
    23f8:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    23fa:	2800      	cmp	r0, #0
    23fc:	d0f0      	beq.n	23e0 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    23fe:	1c43      	adds	r3, r0, #1
    2400:	d0f2      	beq.n	23e8 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2402:	a904      	add	r1, sp, #16
    2404:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2406:	0c00      	lsrs	r0, r0, #16
    2408:	b2c0      	uxtb	r0, r0
    240a:	4b31      	ldr	r3, [pc, #196]	; (24d0 <spi_init+0x1c8>)
    240c:	4798      	blx	r3
    240e:	e7eb      	b.n	23e8 <spi_init+0xe0>
	module->mode             = config->mode;
    2410:	7833      	ldrb	r3, [r6, #0]
    2412:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    2414:	7c33      	ldrb	r3, [r6, #16]
    2416:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    2418:	7cb3      	ldrb	r3, [r6, #18]
    241a:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    241c:	7d33      	ldrb	r3, [r6, #20]
    241e:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    2420:	2200      	movs	r2, #0
    2422:	ab02      	add	r3, sp, #8
    2424:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    2426:	7833      	ldrb	r3, [r6, #0]
    2428:	2b01      	cmp	r3, #1
    242a:	d028      	beq.n	247e <spi_init+0x176>
	ctrla |= config->transfer_mode;
    242c:	6873      	ldr	r3, [r6, #4]
    242e:	68b2      	ldr	r2, [r6, #8]
    2430:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    2432:	68f2      	ldr	r2, [r6, #12]
    2434:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    2436:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    2438:	7c72      	ldrb	r2, [r6, #17]
    243a:	2a00      	cmp	r2, #0
    243c:	d103      	bne.n	2446 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    243e:	4a25      	ldr	r2, [pc, #148]	; (24d4 <spi_init+0x1cc>)
    2440:	7892      	ldrb	r2, [r2, #2]
    2442:	0792      	lsls	r2, r2, #30
    2444:	d501      	bpl.n	244a <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2446:	2280      	movs	r2, #128	; 0x80
    2448:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    244a:	7cb2      	ldrb	r2, [r6, #18]
    244c:	2a00      	cmp	r2, #0
    244e:	d002      	beq.n	2456 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    2450:	2280      	movs	r2, #128	; 0x80
    2452:	0292      	lsls	r2, r2, #10
    2454:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    2456:	7cf2      	ldrb	r2, [r6, #19]
    2458:	2a00      	cmp	r2, #0
    245a:	d002      	beq.n	2462 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    245c:	2280      	movs	r2, #128	; 0x80
    245e:	0092      	lsls	r2, r2, #2
    2460:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    2462:	7d32      	ldrb	r2, [r6, #20]
    2464:	2a00      	cmp	r2, #0
    2466:	d002      	beq.n	246e <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2468:	2280      	movs	r2, #128	; 0x80
    246a:	0192      	lsls	r2, r2, #6
    246c:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    246e:	683a      	ldr	r2, [r7, #0]
    2470:	4313      	orrs	r3, r2
    2472:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    2474:	687b      	ldr	r3, [r7, #4]
    2476:	430b      	orrs	r3, r1
    2478:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    247a:	2000      	movs	r0, #0
    247c:	e74e      	b.n	231c <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    247e:	6828      	ldr	r0, [r5, #0]
    2480:	4b0a      	ldr	r3, [pc, #40]	; (24ac <spi_init+0x1a4>)
    2482:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2484:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2486:	b2c0      	uxtb	r0, r0
    2488:	4b13      	ldr	r3, [pc, #76]	; (24d8 <spi_init+0x1d0>)
    248a:	4798      	blx	r3
    248c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    248e:	ab02      	add	r3, sp, #8
    2490:	1d9a      	adds	r2, r3, #6
    2492:	69b0      	ldr	r0, [r6, #24]
    2494:	4b11      	ldr	r3, [pc, #68]	; (24dc <spi_init+0x1d4>)
    2496:	4798      	blx	r3
    2498:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    249a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    249c:	2b00      	cmp	r3, #0
    249e:	d000      	beq.n	24a2 <spi_init+0x19a>
    24a0:	e73c      	b.n	231c <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    24a2:	ab02      	add	r3, sp, #8
    24a4:	3306      	adds	r3, #6
    24a6:	781b      	ldrb	r3, [r3, #0]
    24a8:	733b      	strb	r3, [r7, #12]
    24aa:	e7bf      	b.n	242c <spi_init+0x124>
    24ac:	00002201 	.word	0x00002201
    24b0:	40000400 	.word	0x40000400
    24b4:	0000335d 	.word	0x0000335d
    24b8:	000032d1 	.word	0x000032d1
    24bc:	0000203d 	.word	0x0000203d
    24c0:	000025d5 	.word	0x000025d5
    24c4:	0000223d 	.word	0x0000223d
    24c8:	200001c8 	.word	0x200001c8
    24cc:	00002089 	.word	0x00002089
    24d0:	00003455 	.word	0x00003455
    24d4:	41002000 	.word	0x41002000
    24d8:	00003379 	.word	0x00003379
    24dc:	00001f7f 	.word	0x00001f7f

000024e0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    24e0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    24e2:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    24e4:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    24e6:	2c01      	cmp	r4, #1
    24e8:	d001      	beq.n	24ee <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    24ea:	0018      	movs	r0, r3
    24ec:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    24ee:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    24f0:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    24f2:	2c00      	cmp	r4, #0
    24f4:	d1f9      	bne.n	24ea <spi_select_slave+0xa>
		if (select) {
    24f6:	2a00      	cmp	r2, #0
    24f8:	d058      	beq.n	25ac <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    24fa:	784b      	ldrb	r3, [r1, #1]
    24fc:	2b00      	cmp	r3, #0
    24fe:	d044      	beq.n	258a <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2500:	6803      	ldr	r3, [r0, #0]
    2502:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    2504:	07db      	lsls	r3, r3, #31
    2506:	d410      	bmi.n	252a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    2508:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    250a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    250c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    250e:	2900      	cmp	r1, #0
    2510:	d104      	bne.n	251c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    2512:	0953      	lsrs	r3, r2, #5
    2514:	01db      	lsls	r3, r3, #7
    2516:	492e      	ldr	r1, [pc, #184]	; (25d0 <spi_select_slave+0xf0>)
    2518:	468c      	mov	ip, r1
    251a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    251c:	211f      	movs	r1, #31
    251e:	4011      	ands	r1, r2
    2520:	2201      	movs	r2, #1
    2522:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2524:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    2526:	2305      	movs	r3, #5
    2528:	e7df      	b.n	24ea <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    252a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    252c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    252e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2530:	2c00      	cmp	r4, #0
    2532:	d104      	bne.n	253e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    2534:	0953      	lsrs	r3, r2, #5
    2536:	01db      	lsls	r3, r3, #7
    2538:	4c25      	ldr	r4, [pc, #148]	; (25d0 <spi_select_slave+0xf0>)
    253a:	46a4      	mov	ip, r4
    253c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    253e:	241f      	movs	r4, #31
    2540:	4014      	ands	r4, r2
    2542:	2201      	movs	r2, #1
    2544:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    2546:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2548:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    254a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    254c:	07d2      	lsls	r2, r2, #31
    254e:	d501      	bpl.n	2554 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2550:	788a      	ldrb	r2, [r1, #2]
    2552:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    2554:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    2556:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    2558:	2a00      	cmp	r2, #0
    255a:	d1c6      	bne.n	24ea <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    255c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    255e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2560:	7e13      	ldrb	r3, [r2, #24]
    2562:	420b      	tst	r3, r1
    2564:	d0fc      	beq.n	2560 <spi_select_slave+0x80>
    2566:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    2568:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    256a:	0749      	lsls	r1, r1, #29
    256c:	d5bd      	bpl.n	24ea <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    256e:	8b53      	ldrh	r3, [r2, #26]
    2570:	075b      	lsls	r3, r3, #29
    2572:	d501      	bpl.n	2578 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2574:	2304      	movs	r3, #4
    2576:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2578:	7983      	ldrb	r3, [r0, #6]
    257a:	2b01      	cmp	r3, #1
    257c:	d002      	beq.n	2584 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    257e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2580:	2300      	movs	r3, #0
    2582:	e7b2      	b.n	24ea <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2584:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2586:	2300      	movs	r3, #0
    2588:	e7af      	b.n	24ea <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    258a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    258c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    258e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2590:	2900      	cmp	r1, #0
    2592:	d104      	bne.n	259e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    2594:	0953      	lsrs	r3, r2, #5
    2596:	01db      	lsls	r3, r3, #7
    2598:	490d      	ldr	r1, [pc, #52]	; (25d0 <spi_select_slave+0xf0>)
    259a:	468c      	mov	ip, r1
    259c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    259e:	211f      	movs	r1, #31
    25a0:	4011      	ands	r1, r2
    25a2:	2201      	movs	r2, #1
    25a4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    25a6:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    25a8:	2300      	movs	r3, #0
    25aa:	e79e      	b.n	24ea <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    25ac:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    25ae:	09d1      	lsrs	r1, r2, #7
		return NULL;
    25b0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    25b2:	2900      	cmp	r1, #0
    25b4:	d104      	bne.n	25c0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    25b6:	0953      	lsrs	r3, r2, #5
    25b8:	01db      	lsls	r3, r3, #7
    25ba:	4905      	ldr	r1, [pc, #20]	; (25d0 <spi_select_slave+0xf0>)
    25bc:	468c      	mov	ip, r1
    25be:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    25c0:	211f      	movs	r1, #31
    25c2:	4011      	ands	r1, r2
    25c4:	2201      	movs	r2, #1
    25c6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    25c8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    25ca:	2300      	movs	r3, #0
    25cc:	e78d      	b.n	24ea <spi_select_slave+0xa>
    25ce:	46c0      	nop			; (mov r8, r8)
    25d0:	41004400 	.word	0x41004400

000025d4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    25d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    25d6:	0080      	lsls	r0, r0, #2
    25d8:	4b70      	ldr	r3, [pc, #448]	; (279c <_spi_interrupt_handler+0x1c8>)
    25da:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    25dc:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    25de:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    25e0:	5ce7      	ldrb	r7, [r4, r3]
    25e2:	2236      	movs	r2, #54	; 0x36
    25e4:	5ca2      	ldrb	r2, [r4, r2]
    25e6:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    25e8:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    25ea:	7db5      	ldrb	r5, [r6, #22]
    25ec:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    25ee:	07eb      	lsls	r3, r5, #31
    25f0:	d502      	bpl.n	25f8 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    25f2:	7963      	ldrb	r3, [r4, #5]
    25f4:	2b01      	cmp	r3, #1
    25f6:	d01e      	beq.n	2636 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    25f8:	076b      	lsls	r3, r5, #29
    25fa:	d511      	bpl.n	2620 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    25fc:	8b73      	ldrh	r3, [r6, #26]
    25fe:	075b      	lsls	r3, r3, #29
    2600:	d55a      	bpl.n	26b8 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    2602:	7a63      	ldrb	r3, [r4, #9]
    2604:	2b01      	cmp	r3, #1
    2606:	d008      	beq.n	261a <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    2608:	221e      	movs	r2, #30
    260a:	2338      	movs	r3, #56	; 0x38
    260c:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    260e:	3b35      	subs	r3, #53	; 0x35
    2610:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    2612:	3302      	adds	r3, #2
    2614:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    2616:	073b      	lsls	r3, r7, #28
    2618:	d44a      	bmi.n	26b0 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    261a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    261c:	2304      	movs	r3, #4
    261e:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    2620:	07ab      	lsls	r3, r5, #30
    2622:	d503      	bpl.n	262c <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2624:	7963      	ldrb	r3, [r4, #5]
    2626:	2b01      	cmp	r3, #1
    2628:	d100      	bne.n	262c <_spi_interrupt_handler+0x58>
    262a:	e097      	b.n	275c <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    262c:	b26d      	sxtb	r5, r5
    262e:	2d00      	cmp	r5, #0
    2630:	da00      	bge.n	2634 <_spi_interrupt_handler+0x60>
    2632:	e0a9      	b.n	2788 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    2634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    2636:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    2638:	2b00      	cmp	r3, #0
    263a:	d022      	beq.n	2682 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    263c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    263e:	2b00      	cmp	r3, #0
    2640:	d0da      	beq.n	25f8 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2642:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2644:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2646:	7813      	ldrb	r3, [r2, #0]
    2648:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    264a:	1c50      	adds	r0, r2, #1
    264c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    264e:	79a0      	ldrb	r0, [r4, #6]
    2650:	2801      	cmp	r0, #1
    2652:	d027      	beq.n	26a4 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2654:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    2656:	05db      	lsls	r3, r3, #23
    2658:	0ddb      	lsrs	r3, r3, #23
    265a:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    265c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    265e:	3b01      	subs	r3, #1
    2660:	b29b      	uxth	r3, r3
    2662:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    2664:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2666:	b29b      	uxth	r3, r3
    2668:	2b00      	cmp	r3, #0
    266a:	d1c5      	bne.n	25f8 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    266c:	3301      	adds	r3, #1
    266e:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    2670:	7a63      	ldrb	r3, [r4, #9]
    2672:	2b01      	cmp	r3, #1
    2674:	d1c0      	bne.n	25f8 <_spi_interrupt_handler+0x24>
    2676:	79e3      	ldrb	r3, [r4, #7]
    2678:	2b00      	cmp	r3, #0
    267a:	d1bd      	bne.n	25f8 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    267c:	3302      	adds	r3, #2
    267e:	75b3      	strb	r3, [r6, #22]
    2680:	e7ba      	b.n	25f8 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    2682:	4b47      	ldr	r3, [pc, #284]	; (27a0 <_spi_interrupt_handler+0x1cc>)
    2684:	881b      	ldrh	r3, [r3, #0]
    2686:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    2688:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    268a:	3b01      	subs	r3, #1
    268c:	b29b      	uxth	r3, r3
    268e:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    2690:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2692:	b29b      	uxth	r3, r3
    2694:	2b00      	cmp	r3, #0
    2696:	d101      	bne.n	269c <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2698:	3301      	adds	r3, #1
    269a:	7533      	strb	r3, [r6, #20]
		if (0
    269c:	7963      	ldrb	r3, [r4, #5]
    269e:	2b01      	cmp	r3, #1
    26a0:	d0cc      	beq.n	263c <_spi_interrupt_handler+0x68>
    26a2:	e7a9      	b.n	25f8 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    26a4:	7850      	ldrb	r0, [r2, #1]
    26a6:	0200      	lsls	r0, r0, #8
    26a8:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    26aa:	3202      	adds	r2, #2
    26ac:	62e2      	str	r2, [r4, #44]	; 0x2c
    26ae:	e7d2      	b.n	2656 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    26b0:	0020      	movs	r0, r4
    26b2:	69a3      	ldr	r3, [r4, #24]
    26b4:	4798      	blx	r3
    26b6:	e7b0      	b.n	261a <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    26b8:	7a63      	ldrb	r3, [r4, #9]
    26ba:	2b01      	cmp	r3, #1
    26bc:	d028      	beq.n	2710 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    26be:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    26c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c2:	05db      	lsls	r3, r3, #23
    26c4:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    26c6:	b2da      	uxtb	r2, r3
    26c8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    26ca:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    26cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    26ce:	1c51      	adds	r1, r2, #1
    26d0:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    26d2:	79a1      	ldrb	r1, [r4, #6]
    26d4:	2901      	cmp	r1, #1
    26d6:	d034      	beq.n	2742 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    26d8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    26da:	3b01      	subs	r3, #1
    26dc:	b29b      	uxth	r3, r3
    26de:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    26e0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    26e2:	b29b      	uxth	r3, r3
    26e4:	2b00      	cmp	r3, #0
    26e6:	d000      	beq.n	26ea <_spi_interrupt_handler+0x116>
    26e8:	e79a      	b.n	2620 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    26ea:	2200      	movs	r2, #0
    26ec:	3338      	adds	r3, #56	; 0x38
    26ee:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    26f0:	3b34      	subs	r3, #52	; 0x34
    26f2:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    26f4:	7a63      	ldrb	r3, [r4, #9]
    26f6:	2b02      	cmp	r3, #2
    26f8:	d029      	beq.n	274e <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    26fa:	7a63      	ldrb	r3, [r4, #9]
    26fc:	2b00      	cmp	r3, #0
    26fe:	d000      	beq.n	2702 <_spi_interrupt_handler+0x12e>
    2700:	e78e      	b.n	2620 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    2702:	07bb      	lsls	r3, r7, #30
    2704:	d400      	bmi.n	2708 <_spi_interrupt_handler+0x134>
    2706:	e78b      	b.n	2620 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    2708:	0020      	movs	r0, r4
    270a:	6923      	ldr	r3, [r4, #16]
    270c:	4798      	blx	r3
    270e:	e787      	b.n	2620 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2710:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    2712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    2714:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2716:	3b01      	subs	r3, #1
    2718:	b29b      	uxth	r3, r3
    271a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    271c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    271e:	b29b      	uxth	r3, r3
    2720:	2b00      	cmp	r3, #0
    2722:	d000      	beq.n	2726 <_spi_interrupt_handler+0x152>
    2724:	e77c      	b.n	2620 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2726:	3304      	adds	r3, #4
    2728:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    272a:	2200      	movs	r2, #0
    272c:	3334      	adds	r3, #52	; 0x34
    272e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    2730:	3b35      	subs	r3, #53	; 0x35
    2732:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    2734:	07fb      	lsls	r3, r7, #31
    2736:	d400      	bmi.n	273a <_spi_interrupt_handler+0x166>
    2738:	e772      	b.n	2620 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    273a:	0020      	movs	r0, r4
    273c:	68e3      	ldr	r3, [r4, #12]
    273e:	4798      	blx	r3
    2740:	e76e      	b.n	2620 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    2742:	0a1b      	lsrs	r3, r3, #8
    2744:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    2746:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2748:	3301      	adds	r3, #1
    274a:	62a3      	str	r3, [r4, #40]	; 0x28
    274c:	e7c4      	b.n	26d8 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    274e:	077b      	lsls	r3, r7, #29
    2750:	d400      	bmi.n	2754 <_spi_interrupt_handler+0x180>
    2752:	e765      	b.n	2620 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    2754:	0020      	movs	r0, r4
    2756:	6963      	ldr	r3, [r4, #20]
    2758:	4798      	blx	r3
    275a:	e761      	b.n	2620 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    275c:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    275e:	2b01      	cmp	r3, #1
    2760:	d000      	beq.n	2764 <_spi_interrupt_handler+0x190>
    2762:	e763      	b.n	262c <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2764:	79e3      	ldrb	r3, [r4, #7]
    2766:	2b00      	cmp	r3, #0
    2768:	d000      	beq.n	276c <_spi_interrupt_handler+0x198>
    276a:	e75f      	b.n	262c <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    276c:	3302      	adds	r3, #2
    276e:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    2770:	3301      	adds	r3, #1
    2772:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    2774:	2200      	movs	r2, #0
    2776:	3335      	adds	r3, #53	; 0x35
    2778:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    277a:	07fb      	lsls	r3, r7, #31
    277c:	d400      	bmi.n	2780 <_spi_interrupt_handler+0x1ac>
    277e:	e755      	b.n	262c <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    2780:	0020      	movs	r0, r4
    2782:	68e3      	ldr	r3, [r4, #12]
    2784:	4798      	blx	r3
    2786:	e751      	b.n	262c <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2788:	2380      	movs	r3, #128	; 0x80
    278a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    278c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    278e:	067b      	lsls	r3, r7, #25
    2790:	d400      	bmi.n	2794 <_spi_interrupt_handler+0x1c0>
    2792:	e74f      	b.n	2634 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    2794:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2796:	0020      	movs	r0, r4
    2798:	4798      	blx	r3
}
    279a:	e74b      	b.n	2634 <_spi_interrupt_handler+0x60>
    279c:	200001c8 	.word	0x200001c8
    27a0:	200001e0 	.word	0x200001e0

000027a4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    27a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27a6:	46de      	mov	lr, fp
    27a8:	4657      	mov	r7, sl
    27aa:	464e      	mov	r6, r9
    27ac:	4645      	mov	r5, r8
    27ae:	b5e0      	push	{r5, r6, r7, lr}
    27b0:	b091      	sub	sp, #68	; 0x44
    27b2:	0005      	movs	r5, r0
    27b4:	000c      	movs	r4, r1
    27b6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    27b8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    27ba:	0008      	movs	r0, r1
    27bc:	4bbc      	ldr	r3, [pc, #752]	; (2ab0 <usart_init+0x30c>)
    27be:	4798      	blx	r3
    27c0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    27c2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    27c4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    27c6:	07db      	lsls	r3, r3, #31
    27c8:	d506      	bpl.n	27d8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    27ca:	b011      	add	sp, #68	; 0x44
    27cc:	bc3c      	pop	{r2, r3, r4, r5}
    27ce:	4690      	mov	r8, r2
    27d0:	4699      	mov	r9, r3
    27d2:	46a2      	mov	sl, r4
    27d4:	46ab      	mov	fp, r5
    27d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    27d8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    27da:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    27dc:	079b      	lsls	r3, r3, #30
    27de:	d4f4      	bmi.n	27ca <usart_init+0x26>
    27e0:	49b4      	ldr	r1, [pc, #720]	; (2ab4 <usart_init+0x310>)
    27e2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    27e4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    27e6:	2301      	movs	r3, #1
    27e8:	40bb      	lsls	r3, r7
    27ea:	4303      	orrs	r3, r0
    27ec:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    27ee:	a90f      	add	r1, sp, #60	; 0x3c
    27f0:	272d      	movs	r7, #45	; 0x2d
    27f2:	5df3      	ldrb	r3, [r6, r7]
    27f4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    27f6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    27f8:	b2d3      	uxtb	r3, r2
    27fa:	9302      	str	r3, [sp, #8]
    27fc:	0018      	movs	r0, r3
    27fe:	4bae      	ldr	r3, [pc, #696]	; (2ab8 <usart_init+0x314>)
    2800:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2802:	9802      	ldr	r0, [sp, #8]
    2804:	4bad      	ldr	r3, [pc, #692]	; (2abc <usart_init+0x318>)
    2806:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2808:	5df0      	ldrb	r0, [r6, r7]
    280a:	2100      	movs	r1, #0
    280c:	4bac      	ldr	r3, [pc, #688]	; (2ac0 <usart_init+0x31c>)
    280e:	4798      	blx	r3
	module->character_size = config->character_size;
    2810:	7af3      	ldrb	r3, [r6, #11]
    2812:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2814:	2324      	movs	r3, #36	; 0x24
    2816:	5cf3      	ldrb	r3, [r6, r3]
    2818:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    281a:	2325      	movs	r3, #37	; 0x25
    281c:	5cf3      	ldrb	r3, [r6, r3]
    281e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2820:	7ef3      	ldrb	r3, [r6, #27]
    2822:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2824:	7f33      	ldrb	r3, [r6, #28]
    2826:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2828:	682b      	ldr	r3, [r5, #0]
    282a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    282c:	0018      	movs	r0, r3
    282e:	4ba0      	ldr	r3, [pc, #640]	; (2ab0 <usart_init+0x30c>)
    2830:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2832:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2834:	2200      	movs	r2, #0
    2836:	230e      	movs	r3, #14
    2838:	a906      	add	r1, sp, #24
    283a:	468c      	mov	ip, r1
    283c:	4463      	add	r3, ip
    283e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2840:	8a32      	ldrh	r2, [r6, #16]
    2842:	9202      	str	r2, [sp, #8]
    2844:	2380      	movs	r3, #128	; 0x80
    2846:	01db      	lsls	r3, r3, #7
    2848:	429a      	cmp	r2, r3
    284a:	d100      	bne.n	284e <usart_init+0xaa>
    284c:	e09e      	b.n	298c <usart_init+0x1e8>
    284e:	d90f      	bls.n	2870 <usart_init+0xcc>
    2850:	23c0      	movs	r3, #192	; 0xc0
    2852:	01db      	lsls	r3, r3, #7
    2854:	9a02      	ldr	r2, [sp, #8]
    2856:	429a      	cmp	r2, r3
    2858:	d100      	bne.n	285c <usart_init+0xb8>
    285a:	e092      	b.n	2982 <usart_init+0x1de>
    285c:	2380      	movs	r3, #128	; 0x80
    285e:	021b      	lsls	r3, r3, #8
    2860:	429a      	cmp	r2, r3
    2862:	d000      	beq.n	2866 <usart_init+0xc2>
    2864:	e11f      	b.n	2aa6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2866:	2303      	movs	r3, #3
    2868:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    286a:	2300      	movs	r3, #0
    286c:	9307      	str	r3, [sp, #28]
    286e:	e008      	b.n	2882 <usart_init+0xde>
	switch (config->sample_rate) {
    2870:	2380      	movs	r3, #128	; 0x80
    2872:	019b      	lsls	r3, r3, #6
    2874:	429a      	cmp	r2, r3
    2876:	d000      	beq.n	287a <usart_init+0xd6>
    2878:	e115      	b.n	2aa6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    287a:	2310      	movs	r3, #16
    287c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    287e:	3b0f      	subs	r3, #15
    2880:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2882:	6833      	ldr	r3, [r6, #0]
    2884:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2886:	68f3      	ldr	r3, [r6, #12]
    2888:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    288a:	6973      	ldr	r3, [r6, #20]
    288c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    288e:	7e33      	ldrb	r3, [r6, #24]
    2890:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2892:	2326      	movs	r3, #38	; 0x26
    2894:	5cf3      	ldrb	r3, [r6, r3]
    2896:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2898:	6873      	ldr	r3, [r6, #4]
    289a:	4699      	mov	r9, r3
	switch (transfer_mode)
    289c:	2b00      	cmp	r3, #0
    289e:	d100      	bne.n	28a2 <usart_init+0xfe>
    28a0:	e0a0      	b.n	29e4 <usart_init+0x240>
    28a2:	2380      	movs	r3, #128	; 0x80
    28a4:	055b      	lsls	r3, r3, #21
    28a6:	4599      	cmp	r9, r3
    28a8:	d100      	bne.n	28ac <usart_init+0x108>
    28aa:	e084      	b.n	29b6 <usart_init+0x212>
	if(config->encoding_format_enable) {
    28ac:	7e73      	ldrb	r3, [r6, #25]
    28ae:	2b00      	cmp	r3, #0
    28b0:	d002      	beq.n	28b8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    28b2:	7eb3      	ldrb	r3, [r6, #26]
    28b4:	4642      	mov	r2, r8
    28b6:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    28b8:	682a      	ldr	r2, [r5, #0]
    28ba:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    28bc:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    28be:	2b00      	cmp	r3, #0
    28c0:	d1fc      	bne.n	28bc <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    28c2:	330e      	adds	r3, #14
    28c4:	aa06      	add	r2, sp, #24
    28c6:	4694      	mov	ip, r2
    28c8:	4463      	add	r3, ip
    28ca:	881b      	ldrh	r3, [r3, #0]
    28cc:	4642      	mov	r2, r8
    28ce:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    28d0:	9b05      	ldr	r3, [sp, #20]
    28d2:	9a03      	ldr	r2, [sp, #12]
    28d4:	4313      	orrs	r3, r2
    28d6:	9a04      	ldr	r2, [sp, #16]
    28d8:	4313      	orrs	r3, r2
    28da:	464a      	mov	r2, r9
    28dc:	4313      	orrs	r3, r2
    28de:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    28e0:	465b      	mov	r3, fp
    28e2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    28e4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    28e6:	4653      	mov	r3, sl
    28e8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    28ea:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    28ec:	2327      	movs	r3, #39	; 0x27
    28ee:	5cf3      	ldrb	r3, [r6, r3]
    28f0:	2b00      	cmp	r3, #0
    28f2:	d101      	bne.n	28f8 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    28f4:	3304      	adds	r3, #4
    28f6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    28f8:	7e73      	ldrb	r3, [r6, #25]
    28fa:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    28fc:	7f32      	ldrb	r2, [r6, #28]
    28fe:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2900:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2902:	7f72      	ldrb	r2, [r6, #29]
    2904:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2906:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2908:	2224      	movs	r2, #36	; 0x24
    290a:	5cb2      	ldrb	r2, [r6, r2]
    290c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    290e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2910:	2225      	movs	r2, #37	; 0x25
    2912:	5cb2      	ldrb	r2, [r6, r2]
    2914:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2916:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2918:	7ab1      	ldrb	r1, [r6, #10]
    291a:	7af2      	ldrb	r2, [r6, #11]
    291c:	4311      	orrs	r1, r2
    291e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2920:	8933      	ldrh	r3, [r6, #8]
    2922:	2bff      	cmp	r3, #255	; 0xff
    2924:	d100      	bne.n	2928 <usart_init+0x184>
    2926:	e081      	b.n	2a2c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2928:	2280      	movs	r2, #128	; 0x80
    292a:	0452      	lsls	r2, r2, #17
    292c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    292e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2930:	232c      	movs	r3, #44	; 0x2c
    2932:	5cf3      	ldrb	r3, [r6, r3]
    2934:	2b00      	cmp	r3, #0
    2936:	d103      	bne.n	2940 <usart_init+0x19c>
    2938:	4b62      	ldr	r3, [pc, #392]	; (2ac4 <usart_init+0x320>)
    293a:	789b      	ldrb	r3, [r3, #2]
    293c:	079b      	lsls	r3, r3, #30
    293e:	d501      	bpl.n	2944 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2940:	2380      	movs	r3, #128	; 0x80
    2942:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2944:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2946:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2948:	2b00      	cmp	r3, #0
    294a:	d1fc      	bne.n	2946 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    294c:	4643      	mov	r3, r8
    294e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2950:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2952:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2954:	2b00      	cmp	r3, #0
    2956:	d1fc      	bne.n	2952 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    2958:	4643      	mov	r3, r8
    295a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    295c:	ab0e      	add	r3, sp, #56	; 0x38
    295e:	2280      	movs	r2, #128	; 0x80
    2960:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2962:	2200      	movs	r2, #0
    2964:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2966:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2968:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    296a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    296c:	930a      	str	r3, [sp, #40]	; 0x28
    296e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2970:	930b      	str	r3, [sp, #44]	; 0x2c
    2972:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2974:	930c      	str	r3, [sp, #48]	; 0x30
    2976:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2978:	9302      	str	r3, [sp, #8]
    297a:	930d      	str	r3, [sp, #52]	; 0x34
    297c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    297e:	ae0a      	add	r6, sp, #40	; 0x28
    2980:	e063      	b.n	2a4a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2982:	2308      	movs	r3, #8
    2984:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2986:	3b07      	subs	r3, #7
    2988:	9307      	str	r3, [sp, #28]
    298a:	e77a      	b.n	2882 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    298c:	6833      	ldr	r3, [r6, #0]
    298e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2990:	68f3      	ldr	r3, [r6, #12]
    2992:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2994:	6973      	ldr	r3, [r6, #20]
    2996:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2998:	7e33      	ldrb	r3, [r6, #24]
    299a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    299c:	2326      	movs	r3, #38	; 0x26
    299e:	5cf3      	ldrb	r3, [r6, r3]
    29a0:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    29a2:	6873      	ldr	r3, [r6, #4]
    29a4:	4699      	mov	r9, r3
	switch (transfer_mode)
    29a6:	2b00      	cmp	r3, #0
    29a8:	d018      	beq.n	29dc <usart_init+0x238>
    29aa:	2380      	movs	r3, #128	; 0x80
    29ac:	055b      	lsls	r3, r3, #21
    29ae:	4599      	cmp	r9, r3
    29b0:	d001      	beq.n	29b6 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    29b2:	2000      	movs	r0, #0
    29b4:	e025      	b.n	2a02 <usart_init+0x25e>
			if (!config->use_external_clock) {
    29b6:	2327      	movs	r3, #39	; 0x27
    29b8:	5cf3      	ldrb	r3, [r6, r3]
    29ba:	2b00      	cmp	r3, #0
    29bc:	d000      	beq.n	29c0 <usart_init+0x21c>
    29be:	e775      	b.n	28ac <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    29c0:	6a33      	ldr	r3, [r6, #32]
    29c2:	001f      	movs	r7, r3
    29c4:	b2c0      	uxtb	r0, r0
    29c6:	4b40      	ldr	r3, [pc, #256]	; (2ac8 <usart_init+0x324>)
    29c8:	4798      	blx	r3
    29ca:	0001      	movs	r1, r0
    29cc:	220e      	movs	r2, #14
    29ce:	ab06      	add	r3, sp, #24
    29d0:	469c      	mov	ip, r3
    29d2:	4462      	add	r2, ip
    29d4:	0038      	movs	r0, r7
    29d6:	4b3d      	ldr	r3, [pc, #244]	; (2acc <usart_init+0x328>)
    29d8:	4798      	blx	r3
    29da:	e012      	b.n	2a02 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    29dc:	2308      	movs	r3, #8
    29de:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    29e0:	2300      	movs	r3, #0
    29e2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    29e4:	2327      	movs	r3, #39	; 0x27
    29e6:	5cf3      	ldrb	r3, [r6, r3]
    29e8:	2b00      	cmp	r3, #0
    29ea:	d00e      	beq.n	2a0a <usart_init+0x266>
				status_code =
    29ec:	9b06      	ldr	r3, [sp, #24]
    29ee:	9300      	str	r3, [sp, #0]
    29f0:	9b07      	ldr	r3, [sp, #28]
    29f2:	220e      	movs	r2, #14
    29f4:	a906      	add	r1, sp, #24
    29f6:	468c      	mov	ip, r1
    29f8:	4462      	add	r2, ip
    29fa:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    29fc:	6a30      	ldr	r0, [r6, #32]
    29fe:	4f34      	ldr	r7, [pc, #208]	; (2ad0 <usart_init+0x32c>)
    2a00:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2a02:	2800      	cmp	r0, #0
    2a04:	d000      	beq.n	2a08 <usart_init+0x264>
    2a06:	e6e0      	b.n	27ca <usart_init+0x26>
    2a08:	e750      	b.n	28ac <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2a0a:	6a33      	ldr	r3, [r6, #32]
    2a0c:	001f      	movs	r7, r3
    2a0e:	b2c0      	uxtb	r0, r0
    2a10:	4b2d      	ldr	r3, [pc, #180]	; (2ac8 <usart_init+0x324>)
    2a12:	4798      	blx	r3
    2a14:	0001      	movs	r1, r0
				status_code =
    2a16:	9b06      	ldr	r3, [sp, #24]
    2a18:	9300      	str	r3, [sp, #0]
    2a1a:	9b07      	ldr	r3, [sp, #28]
    2a1c:	220e      	movs	r2, #14
    2a1e:	a806      	add	r0, sp, #24
    2a20:	4684      	mov	ip, r0
    2a22:	4462      	add	r2, ip
    2a24:	0038      	movs	r0, r7
    2a26:	4f2a      	ldr	r7, [pc, #168]	; (2ad0 <usart_init+0x32c>)
    2a28:	47b8      	blx	r7
    2a2a:	e7ea      	b.n	2a02 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2a2c:	7ef3      	ldrb	r3, [r6, #27]
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d100      	bne.n	2a34 <usart_init+0x290>
    2a32:	e77d      	b.n	2930 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2a34:	2380      	movs	r3, #128	; 0x80
    2a36:	04db      	lsls	r3, r3, #19
    2a38:	431f      	orrs	r7, r3
    2a3a:	e779      	b.n	2930 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2a3c:	0020      	movs	r0, r4
    2a3e:	4b25      	ldr	r3, [pc, #148]	; (2ad4 <usart_init+0x330>)
    2a40:	4798      	blx	r3
    2a42:	e007      	b.n	2a54 <usart_init+0x2b0>
    2a44:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2a46:	2f04      	cmp	r7, #4
    2a48:	d00d      	beq.n	2a66 <usart_init+0x2c2>
    2a4a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2a4c:	00bb      	lsls	r3, r7, #2
    2a4e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2a50:	2800      	cmp	r0, #0
    2a52:	d0f3      	beq.n	2a3c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2a54:	1c43      	adds	r3, r0, #1
    2a56:	d0f5      	beq.n	2a44 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2a58:	a90e      	add	r1, sp, #56	; 0x38
    2a5a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2a5c:	0c00      	lsrs	r0, r0, #16
    2a5e:	b2c0      	uxtb	r0, r0
    2a60:	4b1d      	ldr	r3, [pc, #116]	; (2ad8 <usart_init+0x334>)
    2a62:	4798      	blx	r3
    2a64:	e7ee      	b.n	2a44 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    2a66:	2300      	movs	r3, #0
    2a68:	60eb      	str	r3, [r5, #12]
    2a6a:	612b      	str	r3, [r5, #16]
    2a6c:	616b      	str	r3, [r5, #20]
    2a6e:	61ab      	str	r3, [r5, #24]
    2a70:	61eb      	str	r3, [r5, #28]
    2a72:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2a74:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2a76:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2a78:	2200      	movs	r2, #0
    2a7a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2a7c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2a7e:	3330      	adds	r3, #48	; 0x30
    2a80:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2a82:	3301      	adds	r3, #1
    2a84:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2a86:	3301      	adds	r3, #1
    2a88:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2a8a:	3301      	adds	r3, #1
    2a8c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2a8e:	6828      	ldr	r0, [r5, #0]
    2a90:	4b07      	ldr	r3, [pc, #28]	; (2ab0 <usart_init+0x30c>)
    2a92:	4798      	blx	r3
    2a94:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2a96:	4911      	ldr	r1, [pc, #68]	; (2adc <usart_init+0x338>)
    2a98:	4b11      	ldr	r3, [pc, #68]	; (2ae0 <usart_init+0x33c>)
    2a9a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2a9c:	00a4      	lsls	r4, r4, #2
    2a9e:	4b11      	ldr	r3, [pc, #68]	; (2ae4 <usart_init+0x340>)
    2aa0:	50e5      	str	r5, [r4, r3]
	return status_code;
    2aa2:	2000      	movs	r0, #0
    2aa4:	e691      	b.n	27ca <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2aa6:	2310      	movs	r3, #16
    2aa8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2aaa:	2300      	movs	r3, #0
    2aac:	9307      	str	r3, [sp, #28]
    2aae:	e6e8      	b.n	2882 <usart_init+0xde>
    2ab0:	00002201 	.word	0x00002201
    2ab4:	40000400 	.word	0x40000400
    2ab8:	0000335d 	.word	0x0000335d
    2abc:	000032d1 	.word	0x000032d1
    2ac0:	0000203d 	.word	0x0000203d
    2ac4:	41002000 	.word	0x41002000
    2ac8:	00003379 	.word	0x00003379
    2acc:	00001f7f 	.word	0x00001f7f
    2ad0:	00001fa9 	.word	0x00001fa9
    2ad4:	00002089 	.word	0x00002089
    2ad8:	00003455 	.word	0x00003455
    2adc:	00002b85 	.word	0x00002b85
    2ae0:	0000223d 	.word	0x0000223d
    2ae4:	200001c8 	.word	0x200001c8

00002ae8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2ae8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2aea:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2aec:	2a00      	cmp	r2, #0
    2aee:	d101      	bne.n	2af4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2af0:	0018      	movs	r0, r3
    2af2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2af4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2af6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2af8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2afa:	2a00      	cmp	r2, #0
    2afc:	d1f8      	bne.n	2af0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2afe:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2b00:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2b02:	2a00      	cmp	r2, #0
    2b04:	d1fc      	bne.n	2b00 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2b06:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2b08:	2102      	movs	r1, #2
    2b0a:	7e1a      	ldrb	r2, [r3, #24]
    2b0c:	420a      	tst	r2, r1
    2b0e:	d0fc      	beq.n	2b0a <usart_write_wait+0x22>
	return STATUS_OK;
    2b10:	2300      	movs	r3, #0
    2b12:	e7ed      	b.n	2af0 <usart_write_wait+0x8>

00002b14 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2b14:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2b16:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2b18:	2a00      	cmp	r2, #0
    2b1a:	d101      	bne.n	2b20 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2b1c:	0018      	movs	r0, r3
    2b1e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2b20:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2b22:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2b24:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2b26:	2a00      	cmp	r2, #0
    2b28:	d1f8      	bne.n	2b1c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b2a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2b2c:	7e10      	ldrb	r0, [r2, #24]
    2b2e:	0740      	lsls	r0, r0, #29
    2b30:	d5f4      	bpl.n	2b1c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2b32:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2b34:	2b00      	cmp	r3, #0
    2b36:	d1fc      	bne.n	2b32 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2b38:	8b53      	ldrh	r3, [r2, #26]
    2b3a:	b2db      	uxtb	r3, r3
	if (error_code) {
    2b3c:	0698      	lsls	r0, r3, #26
    2b3e:	d01d      	beq.n	2b7c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2b40:	0798      	lsls	r0, r3, #30
    2b42:	d503      	bpl.n	2b4c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2b44:	2302      	movs	r3, #2
    2b46:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2b48:	3318      	adds	r3, #24
    2b4a:	e7e7      	b.n	2b1c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2b4c:	0758      	lsls	r0, r3, #29
    2b4e:	d503      	bpl.n	2b58 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2b50:	2304      	movs	r3, #4
    2b52:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2b54:	331a      	adds	r3, #26
    2b56:	e7e1      	b.n	2b1c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2b58:	07d8      	lsls	r0, r3, #31
    2b5a:	d503      	bpl.n	2b64 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2b5c:	2301      	movs	r3, #1
    2b5e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2b60:	3312      	adds	r3, #18
    2b62:	e7db      	b.n	2b1c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2b64:	06d8      	lsls	r0, r3, #27
    2b66:	d503      	bpl.n	2b70 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2b68:	2310      	movs	r3, #16
    2b6a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2b6c:	3332      	adds	r3, #50	; 0x32
    2b6e:	e7d5      	b.n	2b1c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2b70:	069b      	lsls	r3, r3, #26
    2b72:	d503      	bpl.n	2b7c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2b74:	2320      	movs	r3, #32
    2b76:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2b78:	3321      	adds	r3, #33	; 0x21
    2b7a:	e7cf      	b.n	2b1c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2b7c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2b7e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2b80:	2300      	movs	r3, #0
    2b82:	e7cb      	b.n	2b1c <usart_read_wait+0x8>

00002b84 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2b86:	0080      	lsls	r0, r0, #2
    2b88:	4b62      	ldr	r3, [pc, #392]	; (2d14 <_usart_interrupt_handler+0x190>)
    2b8a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2b8c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2b8e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2b90:	2b00      	cmp	r3, #0
    2b92:	d1fc      	bne.n	2b8e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2b94:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2b96:	7da6      	ldrb	r6, [r4, #22]
    2b98:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2b9a:	2330      	movs	r3, #48	; 0x30
    2b9c:	5ceb      	ldrb	r3, [r5, r3]
    2b9e:	2231      	movs	r2, #49	; 0x31
    2ba0:	5caf      	ldrb	r7, [r5, r2]
    2ba2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2ba4:	07f3      	lsls	r3, r6, #31
    2ba6:	d522      	bpl.n	2bee <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2ba8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2baa:	b29b      	uxth	r3, r3
    2bac:	2b00      	cmp	r3, #0
    2bae:	d01c      	beq.n	2bea <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2bb0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2bb2:	7813      	ldrb	r3, [r2, #0]
    2bb4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2bb6:	1c51      	adds	r1, r2, #1
    2bb8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2bba:	7969      	ldrb	r1, [r5, #5]
    2bbc:	2901      	cmp	r1, #1
    2bbe:	d00e      	beq.n	2bde <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2bc0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2bc2:	05db      	lsls	r3, r3, #23
    2bc4:	0ddb      	lsrs	r3, r3, #23
    2bc6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2bc8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2bca:	3b01      	subs	r3, #1
    2bcc:	b29b      	uxth	r3, r3
    2bce:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d10c      	bne.n	2bee <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2bd4:	3301      	adds	r3, #1
    2bd6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2bd8:	3301      	adds	r3, #1
    2bda:	75a3      	strb	r3, [r4, #22]
    2bdc:	e007      	b.n	2bee <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2bde:	7851      	ldrb	r1, [r2, #1]
    2be0:	0209      	lsls	r1, r1, #8
    2be2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2be4:	3202      	adds	r2, #2
    2be6:	62aa      	str	r2, [r5, #40]	; 0x28
    2be8:	e7eb      	b.n	2bc2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2bea:	2301      	movs	r3, #1
    2bec:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2bee:	07b3      	lsls	r3, r6, #30
    2bf0:	d506      	bpl.n	2c00 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2bf2:	2302      	movs	r3, #2
    2bf4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2bf6:	2200      	movs	r2, #0
    2bf8:	3331      	adds	r3, #49	; 0x31
    2bfa:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2bfc:	07fb      	lsls	r3, r7, #31
    2bfe:	d41a      	bmi.n	2c36 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2c00:	0773      	lsls	r3, r6, #29
    2c02:	d565      	bpl.n	2cd0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2c04:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2c06:	b29b      	uxth	r3, r3
    2c08:	2b00      	cmp	r3, #0
    2c0a:	d05f      	beq.n	2ccc <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2c0c:	8b63      	ldrh	r3, [r4, #26]
    2c0e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2c10:	071a      	lsls	r2, r3, #28
    2c12:	d414      	bmi.n	2c3e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2c14:	223f      	movs	r2, #63	; 0x3f
    2c16:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2c18:	2b00      	cmp	r3, #0
    2c1a:	d034      	beq.n	2c86 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2c1c:	079a      	lsls	r2, r3, #30
    2c1e:	d511      	bpl.n	2c44 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2c20:	221a      	movs	r2, #26
    2c22:	2332      	movs	r3, #50	; 0x32
    2c24:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2c26:	3b30      	subs	r3, #48	; 0x30
    2c28:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2c2a:	077b      	lsls	r3, r7, #29
    2c2c:	d550      	bpl.n	2cd0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2c2e:	0028      	movs	r0, r5
    2c30:	696b      	ldr	r3, [r5, #20]
    2c32:	4798      	blx	r3
    2c34:	e04c      	b.n	2cd0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2c36:	0028      	movs	r0, r5
    2c38:	68eb      	ldr	r3, [r5, #12]
    2c3a:	4798      	blx	r3
    2c3c:	e7e0      	b.n	2c00 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2c3e:	2237      	movs	r2, #55	; 0x37
    2c40:	4013      	ands	r3, r2
    2c42:	e7e9      	b.n	2c18 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2c44:	075a      	lsls	r2, r3, #29
    2c46:	d505      	bpl.n	2c54 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2c48:	221e      	movs	r2, #30
    2c4a:	2332      	movs	r3, #50	; 0x32
    2c4c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2c4e:	3b2e      	subs	r3, #46	; 0x2e
    2c50:	8363      	strh	r3, [r4, #26]
    2c52:	e7ea      	b.n	2c2a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2c54:	07da      	lsls	r2, r3, #31
    2c56:	d505      	bpl.n	2c64 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2c58:	2213      	movs	r2, #19
    2c5a:	2332      	movs	r3, #50	; 0x32
    2c5c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2c5e:	3b31      	subs	r3, #49	; 0x31
    2c60:	8363      	strh	r3, [r4, #26]
    2c62:	e7e2      	b.n	2c2a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2c64:	06da      	lsls	r2, r3, #27
    2c66:	d505      	bpl.n	2c74 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2c68:	2242      	movs	r2, #66	; 0x42
    2c6a:	2332      	movs	r3, #50	; 0x32
    2c6c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2c6e:	3b22      	subs	r3, #34	; 0x22
    2c70:	8363      	strh	r3, [r4, #26]
    2c72:	e7da      	b.n	2c2a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2c74:	2220      	movs	r2, #32
    2c76:	421a      	tst	r2, r3
    2c78:	d0d7      	beq.n	2c2a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2c7a:	3221      	adds	r2, #33	; 0x21
    2c7c:	2332      	movs	r3, #50	; 0x32
    2c7e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2c80:	3b12      	subs	r3, #18
    2c82:	8363      	strh	r3, [r4, #26]
    2c84:	e7d1      	b.n	2c2a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2c86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2c88:	05db      	lsls	r3, r3, #23
    2c8a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2c8c:	b2da      	uxtb	r2, r3
    2c8e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2c90:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2c92:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2c94:	1c51      	adds	r1, r2, #1
    2c96:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2c98:	7969      	ldrb	r1, [r5, #5]
    2c9a:	2901      	cmp	r1, #1
    2c9c:	d010      	beq.n	2cc0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2c9e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2ca0:	3b01      	subs	r3, #1
    2ca2:	b29b      	uxth	r3, r3
    2ca4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d112      	bne.n	2cd0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2caa:	3304      	adds	r3, #4
    2cac:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2cae:	2200      	movs	r2, #0
    2cb0:	332e      	adds	r3, #46	; 0x2e
    2cb2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2cb4:	07bb      	lsls	r3, r7, #30
    2cb6:	d50b      	bpl.n	2cd0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2cb8:	0028      	movs	r0, r5
    2cba:	692b      	ldr	r3, [r5, #16]
    2cbc:	4798      	blx	r3
    2cbe:	e007      	b.n	2cd0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2cc0:	0a1b      	lsrs	r3, r3, #8
    2cc2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2cc4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2cc6:	3301      	adds	r3, #1
    2cc8:	626b      	str	r3, [r5, #36]	; 0x24
    2cca:	e7e8      	b.n	2c9e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2ccc:	2304      	movs	r3, #4
    2cce:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2cd0:	06f3      	lsls	r3, r6, #27
    2cd2:	d504      	bpl.n	2cde <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2cd4:	2310      	movs	r3, #16
    2cd6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2cd8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2cda:	06fb      	lsls	r3, r7, #27
    2cdc:	d40e      	bmi.n	2cfc <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2cde:	06b3      	lsls	r3, r6, #26
    2ce0:	d504      	bpl.n	2cec <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2ce2:	2320      	movs	r3, #32
    2ce4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2ce6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2ce8:	073b      	lsls	r3, r7, #28
    2cea:	d40b      	bmi.n	2d04 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2cec:	0733      	lsls	r3, r6, #28
    2cee:	d504      	bpl.n	2cfa <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2cf0:	2308      	movs	r3, #8
    2cf2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2cf4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2cf6:	06bb      	lsls	r3, r7, #26
    2cf8:	d408      	bmi.n	2d0c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2cfc:	0028      	movs	r0, r5
    2cfe:	69eb      	ldr	r3, [r5, #28]
    2d00:	4798      	blx	r3
    2d02:	e7ec      	b.n	2cde <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2d04:	0028      	movs	r0, r5
    2d06:	69ab      	ldr	r3, [r5, #24]
    2d08:	4798      	blx	r3
    2d0a:	e7ef      	b.n	2cec <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2d0c:	6a2b      	ldr	r3, [r5, #32]
    2d0e:	0028      	movs	r0, r5
    2d10:	4798      	blx	r3
}
    2d12:	e7f2      	b.n	2cfa <_usart_interrupt_handler+0x176>
    2d14:	200001c8 	.word	0x200001c8

00002d18 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2d18:	b510      	push	{r4, lr}
	switch (clock_source) {
    2d1a:	2808      	cmp	r0, #8
    2d1c:	d803      	bhi.n	2d26 <system_clock_source_get_hz+0xe>
    2d1e:	0080      	lsls	r0, r0, #2
    2d20:	4b1b      	ldr	r3, [pc, #108]	; (2d90 <system_clock_source_get_hz+0x78>)
    2d22:	581b      	ldr	r3, [r3, r0]
    2d24:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2d26:	2000      	movs	r0, #0
    2d28:	e030      	b.n	2d8c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    2d2a:	4b1a      	ldr	r3, [pc, #104]	; (2d94 <system_clock_source_get_hz+0x7c>)
    2d2c:	6918      	ldr	r0, [r3, #16]
    2d2e:	e02d      	b.n	2d8c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2d30:	4b19      	ldr	r3, [pc, #100]	; (2d98 <system_clock_source_get_hz+0x80>)
    2d32:	6a1b      	ldr	r3, [r3, #32]
    2d34:	059b      	lsls	r3, r3, #22
    2d36:	0f9b      	lsrs	r3, r3, #30
    2d38:	4818      	ldr	r0, [pc, #96]	; (2d9c <system_clock_source_get_hz+0x84>)
    2d3a:	40d8      	lsrs	r0, r3
    2d3c:	e026      	b.n	2d8c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    2d3e:	4b15      	ldr	r3, [pc, #84]	; (2d94 <system_clock_source_get_hz+0x7c>)
    2d40:	6958      	ldr	r0, [r3, #20]
    2d42:	e023      	b.n	2d8c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2d44:	4b13      	ldr	r3, [pc, #76]	; (2d94 <system_clock_source_get_hz+0x7c>)
    2d46:	681b      	ldr	r3, [r3, #0]
			return 0;
    2d48:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2d4a:	079b      	lsls	r3, r3, #30
    2d4c:	d51e      	bpl.n	2d8c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2d4e:	4912      	ldr	r1, [pc, #72]	; (2d98 <system_clock_source_get_hz+0x80>)
    2d50:	2210      	movs	r2, #16
    2d52:	68cb      	ldr	r3, [r1, #12]
    2d54:	421a      	tst	r2, r3
    2d56:	d0fc      	beq.n	2d52 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2d58:	4b0e      	ldr	r3, [pc, #56]	; (2d94 <system_clock_source_get_hz+0x7c>)
    2d5a:	681b      	ldr	r3, [r3, #0]
    2d5c:	075b      	lsls	r3, r3, #29
    2d5e:	d401      	bmi.n	2d64 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2d60:	480f      	ldr	r0, [pc, #60]	; (2da0 <system_clock_source_get_hz+0x88>)
    2d62:	e013      	b.n	2d8c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2d64:	2000      	movs	r0, #0
    2d66:	4b0f      	ldr	r3, [pc, #60]	; (2da4 <system_clock_source_get_hz+0x8c>)
    2d68:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2d6a:	4b0a      	ldr	r3, [pc, #40]	; (2d94 <system_clock_source_get_hz+0x7c>)
    2d6c:	689b      	ldr	r3, [r3, #8]
    2d6e:	041b      	lsls	r3, r3, #16
    2d70:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2d72:	4358      	muls	r0, r3
    2d74:	e00a      	b.n	2d8c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2d76:	2350      	movs	r3, #80	; 0x50
    2d78:	4a07      	ldr	r2, [pc, #28]	; (2d98 <system_clock_source_get_hz+0x80>)
    2d7a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2d7c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2d7e:	075b      	lsls	r3, r3, #29
    2d80:	d504      	bpl.n	2d8c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    2d82:	4b04      	ldr	r3, [pc, #16]	; (2d94 <system_clock_source_get_hz+0x7c>)
    2d84:	68d8      	ldr	r0, [r3, #12]
    2d86:	e001      	b.n	2d8c <system_clock_source_get_hz+0x74>
		return 32768UL;
    2d88:	2080      	movs	r0, #128	; 0x80
    2d8a:	0200      	lsls	r0, r0, #8
	}
}
    2d8c:	bd10      	pop	{r4, pc}
    2d8e:	46c0      	nop			; (mov r8, r8)
    2d90:	00005458 	.word	0x00005458
    2d94:	200000c4 	.word	0x200000c4
    2d98:	40000800 	.word	0x40000800
    2d9c:	007a1200 	.word	0x007a1200
    2da0:	02dc6c00 	.word	0x02dc6c00
    2da4:	00003379 	.word	0x00003379

00002da8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2da8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2daa:	490c      	ldr	r1, [pc, #48]	; (2ddc <system_clock_source_osc8m_set_config+0x34>)
    2dac:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2dae:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2db0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2db2:	7840      	ldrb	r0, [r0, #1]
    2db4:	2201      	movs	r2, #1
    2db6:	4010      	ands	r0, r2
    2db8:	0180      	lsls	r0, r0, #6
    2dba:	2640      	movs	r6, #64	; 0x40
    2dbc:	43b3      	bics	r3, r6
    2dbe:	4303      	orrs	r3, r0
    2dc0:	402a      	ands	r2, r5
    2dc2:	01d2      	lsls	r2, r2, #7
    2dc4:	2080      	movs	r0, #128	; 0x80
    2dc6:	4383      	bics	r3, r0
    2dc8:	4313      	orrs	r3, r2
    2dca:	2203      	movs	r2, #3
    2dcc:	4022      	ands	r2, r4
    2dce:	0212      	lsls	r2, r2, #8
    2dd0:	4803      	ldr	r0, [pc, #12]	; (2de0 <system_clock_source_osc8m_set_config+0x38>)
    2dd2:	4003      	ands	r3, r0
    2dd4:	4313      	orrs	r3, r2
    2dd6:	620b      	str	r3, [r1, #32]
}
    2dd8:	bd70      	pop	{r4, r5, r6, pc}
    2dda:	46c0      	nop			; (mov r8, r8)
    2ddc:	40000800 	.word	0x40000800
    2de0:	fffffcff 	.word	0xfffffcff

00002de4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2de6:	46de      	mov	lr, fp
    2de8:	4657      	mov	r7, sl
    2dea:	464e      	mov	r6, r9
    2dec:	4645      	mov	r5, r8
    2dee:	b5e0      	push	{r5, r6, r7, lr}
    2df0:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2df2:	4b26      	ldr	r3, [pc, #152]	; (2e8c <system_clock_source_xosc32k_set_config+0xa8>)
    2df4:	469b      	mov	fp, r3
    2df6:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2df8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2dfa:	7800      	ldrb	r0, [r0, #0]
    2dfc:	4242      	negs	r2, r0
    2dfe:	4142      	adcs	r2, r0
    2e00:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2e02:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2e04:	78ca      	ldrb	r2, [r1, #3]
    2e06:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2e08:	790a      	ldrb	r2, [r1, #4]
    2e0a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2e0c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2e0e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2e10:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2e12:	688a      	ldr	r2, [r1, #8]
    2e14:	491e      	ldr	r1, [pc, #120]	; (2e90 <system_clock_source_xosc32k_set_config+0xac>)
    2e16:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2e18:	2101      	movs	r1, #1
    2e1a:	464a      	mov	r2, r9
    2e1c:	0092      	lsls	r2, r2, #2
    2e1e:	4691      	mov	r9, r2
    2e20:	2204      	movs	r2, #4
    2e22:	4393      	bics	r3, r2
    2e24:	464a      	mov	r2, r9
    2e26:	4313      	orrs	r3, r2
    2e28:	4642      	mov	r2, r8
    2e2a:	400a      	ands	r2, r1
    2e2c:	00d2      	lsls	r2, r2, #3
    2e2e:	4690      	mov	r8, r2
    2e30:	2208      	movs	r2, #8
    2e32:	4393      	bics	r3, r2
    2e34:	4642      	mov	r2, r8
    2e36:	4313      	orrs	r3, r2
    2e38:	4662      	mov	r2, ip
    2e3a:	400a      	ands	r2, r1
    2e3c:	0112      	lsls	r2, r2, #4
    2e3e:	4694      	mov	ip, r2
    2e40:	2210      	movs	r2, #16
    2e42:	4393      	bics	r3, r2
    2e44:	4662      	mov	r2, ip
    2e46:	4313      	orrs	r3, r2
    2e48:	4008      	ands	r0, r1
    2e4a:	0140      	lsls	r0, r0, #5
    2e4c:	2220      	movs	r2, #32
    2e4e:	4393      	bics	r3, r2
    2e50:	4303      	orrs	r3, r0
    2e52:	400f      	ands	r7, r1
    2e54:	01bf      	lsls	r7, r7, #6
    2e56:	2040      	movs	r0, #64	; 0x40
    2e58:	4383      	bics	r3, r0
    2e5a:	433b      	orrs	r3, r7
    2e5c:	400e      	ands	r6, r1
    2e5e:	01f6      	lsls	r6, r6, #7
    2e60:	3040      	adds	r0, #64	; 0x40
    2e62:	4383      	bics	r3, r0
    2e64:	4333      	orrs	r3, r6
    2e66:	3879      	subs	r0, #121	; 0x79
    2e68:	4005      	ands	r5, r0
    2e6a:	022d      	lsls	r5, r5, #8
    2e6c:	4809      	ldr	r0, [pc, #36]	; (2e94 <system_clock_source_xosc32k_set_config+0xb0>)
    2e6e:	4003      	ands	r3, r0
    2e70:	432b      	orrs	r3, r5
    2e72:	4021      	ands	r1, r4
    2e74:	0309      	lsls	r1, r1, #12
    2e76:	4808      	ldr	r0, [pc, #32]	; (2e98 <system_clock_source_xosc32k_set_config+0xb4>)
    2e78:	4003      	ands	r3, r0
    2e7a:	430b      	orrs	r3, r1
    2e7c:	465a      	mov	r2, fp
    2e7e:	8293      	strh	r3, [r2, #20]
}
    2e80:	bc3c      	pop	{r2, r3, r4, r5}
    2e82:	4690      	mov	r8, r2
    2e84:	4699      	mov	r9, r3
    2e86:	46a2      	mov	sl, r4
    2e88:	46ab      	mov	fp, r5
    2e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e8c:	40000800 	.word	0x40000800
    2e90:	200000c4 	.word	0x200000c4
    2e94:	fffff8ff 	.word	0xfffff8ff
    2e98:	ffffefff 	.word	0xffffefff

00002e9c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2e9c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2e9e:	7a03      	ldrb	r3, [r0, #8]
    2ea0:	069b      	lsls	r3, r3, #26
    2ea2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2ea4:	8942      	ldrh	r2, [r0, #10]
    2ea6:	0592      	lsls	r2, r2, #22
    2ea8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2eaa:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2eac:	4918      	ldr	r1, [pc, #96]	; (2f10 <system_clock_source_dfll_set_config+0x74>)
    2eae:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2eb0:	7983      	ldrb	r3, [r0, #6]
    2eb2:	79c2      	ldrb	r2, [r0, #7]
    2eb4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2eb6:	8842      	ldrh	r2, [r0, #2]
    2eb8:	8884      	ldrh	r4, [r0, #4]
    2eba:	4322      	orrs	r2, r4
    2ebc:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2ebe:	7842      	ldrb	r2, [r0, #1]
    2ec0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2ec2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2ec4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2ec6:	7803      	ldrb	r3, [r0, #0]
    2ec8:	2b04      	cmp	r3, #4
    2eca:	d011      	beq.n	2ef0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2ecc:	2b20      	cmp	r3, #32
    2ece:	d10e      	bne.n	2eee <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2ed0:	7b03      	ldrb	r3, [r0, #12]
    2ed2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2ed4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2ed6:	4313      	orrs	r3, r2
    2ed8:	89c2      	ldrh	r2, [r0, #14]
    2eda:	0412      	lsls	r2, r2, #16
    2edc:	490d      	ldr	r1, [pc, #52]	; (2f14 <system_clock_source_dfll_set_config+0x78>)
    2ede:	400a      	ands	r2, r1
    2ee0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2ee2:	4a0b      	ldr	r2, [pc, #44]	; (2f10 <system_clock_source_dfll_set_config+0x74>)
    2ee4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2ee6:	6811      	ldr	r1, [r2, #0]
    2ee8:	4b0b      	ldr	r3, [pc, #44]	; (2f18 <system_clock_source_dfll_set_config+0x7c>)
    2eea:	430b      	orrs	r3, r1
    2eec:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2eee:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2ef0:	7b03      	ldrb	r3, [r0, #12]
    2ef2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2ef4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2ef6:	4313      	orrs	r3, r2
    2ef8:	89c2      	ldrh	r2, [r0, #14]
    2efa:	0412      	lsls	r2, r2, #16
    2efc:	4905      	ldr	r1, [pc, #20]	; (2f14 <system_clock_source_dfll_set_config+0x78>)
    2efe:	400a      	ands	r2, r1
    2f00:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2f02:	4a03      	ldr	r2, [pc, #12]	; (2f10 <system_clock_source_dfll_set_config+0x74>)
    2f04:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2f06:	6813      	ldr	r3, [r2, #0]
    2f08:	2104      	movs	r1, #4
    2f0a:	430b      	orrs	r3, r1
    2f0c:	6013      	str	r3, [r2, #0]
    2f0e:	e7ee      	b.n	2eee <system_clock_source_dfll_set_config+0x52>
    2f10:	200000c4 	.word	0x200000c4
    2f14:	03ff0000 	.word	0x03ff0000
    2f18:	00000424 	.word	0x00000424

00002f1c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2f1c:	2808      	cmp	r0, #8
    2f1e:	d803      	bhi.n	2f28 <system_clock_source_enable+0xc>
    2f20:	0080      	lsls	r0, r0, #2
    2f22:	4b25      	ldr	r3, [pc, #148]	; (2fb8 <system_clock_source_enable+0x9c>)
    2f24:	581b      	ldr	r3, [r3, r0]
    2f26:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2f28:	2017      	movs	r0, #23
    2f2a:	e044      	b.n	2fb6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2f2c:	4a23      	ldr	r2, [pc, #140]	; (2fbc <system_clock_source_enable+0xa0>)
    2f2e:	6a13      	ldr	r3, [r2, #32]
    2f30:	2102      	movs	r1, #2
    2f32:	430b      	orrs	r3, r1
    2f34:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2f36:	2000      	movs	r0, #0
    2f38:	e03d      	b.n	2fb6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2f3a:	4a20      	ldr	r2, [pc, #128]	; (2fbc <system_clock_source_enable+0xa0>)
    2f3c:	6993      	ldr	r3, [r2, #24]
    2f3e:	2102      	movs	r1, #2
    2f40:	430b      	orrs	r3, r1
    2f42:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2f44:	2000      	movs	r0, #0
		break;
    2f46:	e036      	b.n	2fb6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2f48:	4a1c      	ldr	r2, [pc, #112]	; (2fbc <system_clock_source_enable+0xa0>)
    2f4a:	8a13      	ldrh	r3, [r2, #16]
    2f4c:	2102      	movs	r1, #2
    2f4e:	430b      	orrs	r3, r1
    2f50:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2f52:	2000      	movs	r0, #0
		break;
    2f54:	e02f      	b.n	2fb6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2f56:	4a19      	ldr	r2, [pc, #100]	; (2fbc <system_clock_source_enable+0xa0>)
    2f58:	8a93      	ldrh	r3, [r2, #20]
    2f5a:	2102      	movs	r1, #2
    2f5c:	430b      	orrs	r3, r1
    2f5e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2f60:	2000      	movs	r0, #0
		break;
    2f62:	e028      	b.n	2fb6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2f64:	4916      	ldr	r1, [pc, #88]	; (2fc0 <system_clock_source_enable+0xa4>)
    2f66:	680b      	ldr	r3, [r1, #0]
    2f68:	2202      	movs	r2, #2
    2f6a:	4313      	orrs	r3, r2
    2f6c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2f6e:	4b13      	ldr	r3, [pc, #76]	; (2fbc <system_clock_source_enable+0xa0>)
    2f70:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f72:	0019      	movs	r1, r3
    2f74:	320e      	adds	r2, #14
    2f76:	68cb      	ldr	r3, [r1, #12]
    2f78:	421a      	tst	r2, r3
    2f7a:	d0fc      	beq.n	2f76 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2f7c:	4a10      	ldr	r2, [pc, #64]	; (2fc0 <system_clock_source_enable+0xa4>)
    2f7e:	6891      	ldr	r1, [r2, #8]
    2f80:	4b0e      	ldr	r3, [pc, #56]	; (2fbc <system_clock_source_enable+0xa0>)
    2f82:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2f84:	6852      	ldr	r2, [r2, #4]
    2f86:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2f88:	2200      	movs	r2, #0
    2f8a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f8c:	0019      	movs	r1, r3
    2f8e:	3210      	adds	r2, #16
    2f90:	68cb      	ldr	r3, [r1, #12]
    2f92:	421a      	tst	r2, r3
    2f94:	d0fc      	beq.n	2f90 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2f96:	4b0a      	ldr	r3, [pc, #40]	; (2fc0 <system_clock_source_enable+0xa4>)
    2f98:	681b      	ldr	r3, [r3, #0]
    2f9a:	b29b      	uxth	r3, r3
    2f9c:	4a07      	ldr	r2, [pc, #28]	; (2fbc <system_clock_source_enable+0xa0>)
    2f9e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2fa0:	2000      	movs	r0, #0
    2fa2:	e008      	b.n	2fb6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2fa4:	4905      	ldr	r1, [pc, #20]	; (2fbc <system_clock_source_enable+0xa0>)
    2fa6:	2244      	movs	r2, #68	; 0x44
    2fa8:	5c8b      	ldrb	r3, [r1, r2]
    2faa:	2002      	movs	r0, #2
    2fac:	4303      	orrs	r3, r0
    2fae:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2fb0:	2000      	movs	r0, #0
		break;
    2fb2:	e000      	b.n	2fb6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2fb4:	2000      	movs	r0, #0
}
    2fb6:	4770      	bx	lr
    2fb8:	0000547c 	.word	0x0000547c
    2fbc:	40000800 	.word	0x40000800
    2fc0:	200000c4 	.word	0x200000c4

00002fc4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fc6:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2fc8:	22c2      	movs	r2, #194	; 0xc2
    2fca:	00d2      	lsls	r2, r2, #3
    2fcc:	4b47      	ldr	r3, [pc, #284]	; (30ec <system_clock_init+0x128>)
    2fce:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2fd0:	4a47      	ldr	r2, [pc, #284]	; (30f0 <system_clock_init+0x12c>)
    2fd2:	6853      	ldr	r3, [r2, #4]
    2fd4:	211e      	movs	r1, #30
    2fd6:	438b      	bics	r3, r1
    2fd8:	391a      	subs	r1, #26
    2fda:	430b      	orrs	r3, r1
    2fdc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2fde:	2202      	movs	r2, #2
    2fe0:	ab01      	add	r3, sp, #4
    2fe2:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2fe4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2fe6:	4d43      	ldr	r5, [pc, #268]	; (30f4 <system_clock_init+0x130>)
    2fe8:	b2e0      	uxtb	r0, r4
    2fea:	a901      	add	r1, sp, #4
    2fec:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2fee:	3401      	adds	r4, #1
    2ff0:	2c25      	cmp	r4, #37	; 0x25
    2ff2:	d1f9      	bne.n	2fe8 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2ff4:	a80a      	add	r0, sp, #40	; 0x28
    2ff6:	2300      	movs	r3, #0
    2ff8:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    2ffa:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2ffc:	2280      	movs	r2, #128	; 0x80
    2ffe:	0212      	lsls	r2, r2, #8
    3000:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    3002:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    3004:	2201      	movs	r2, #1
    3006:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    3008:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    300a:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    300c:	3202      	adds	r2, #2
    300e:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    3010:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    3012:	4b39      	ldr	r3, [pc, #228]	; (30f8 <system_clock_init+0x134>)
    3014:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    3016:	2005      	movs	r0, #5
    3018:	4b38      	ldr	r3, [pc, #224]	; (30fc <system_clock_init+0x138>)
    301a:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    301c:	4933      	ldr	r1, [pc, #204]	; (30ec <system_clock_init+0x128>)
    301e:	2202      	movs	r2, #2
    3020:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    3022:	421a      	tst	r2, r3
    3024:	d0fc      	beq.n	3020 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    3026:	4a31      	ldr	r2, [pc, #196]	; (30ec <system_clock_init+0x128>)
    3028:	8a93      	ldrh	r3, [r2, #20]
    302a:	2180      	movs	r1, #128	; 0x80
    302c:	430b      	orrs	r3, r1
    302e:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3030:	ab05      	add	r3, sp, #20
    3032:	2100      	movs	r1, #0
    3034:	2200      	movs	r2, #0
    3036:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    3038:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    303a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    303c:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    303e:	313f      	adds	r1, #63	; 0x3f
    3040:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    3042:	393b      	subs	r1, #59	; 0x3b
    3044:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    3046:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    3048:	4b2d      	ldr	r3, [pc, #180]	; (3100 <system_clock_init+0x13c>)
    304a:	681b      	ldr	r3, [r3, #0]
    304c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    304e:	2b3f      	cmp	r3, #63	; 0x3f
    3050:	d04a      	beq.n	30e8 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    3052:	a805      	add	r0, sp, #20
    3054:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    3056:	4b2b      	ldr	r3, [pc, #172]	; (3104 <system_clock_init+0x140>)
    3058:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    305a:	2307      	movs	r3, #7
    305c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    305e:	3338      	adds	r3, #56	; 0x38
    3060:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    3062:	4b29      	ldr	r3, [pc, #164]	; (3108 <system_clock_init+0x144>)
    3064:	4798      	blx	r3
	config->run_in_standby  = false;
    3066:	a804      	add	r0, sp, #16
    3068:	2500      	movs	r5, #0
    306a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    306c:	2601      	movs	r6, #1
    306e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3070:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3072:	4b26      	ldr	r3, [pc, #152]	; (310c <system_clock_init+0x148>)
    3074:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3076:	2006      	movs	r0, #6
    3078:	4f20      	ldr	r7, [pc, #128]	; (30fc <system_clock_init+0x138>)
    307a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    307c:	4b24      	ldr	r3, [pc, #144]	; (3110 <system_clock_init+0x14c>)
    307e:	4798      	blx	r3
	config->division_factor    = 1;
    3080:	ac01      	add	r4, sp, #4
    3082:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    3084:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    3086:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3088:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    308a:	2305      	movs	r3, #5
    308c:	7023      	strb	r3, [r4, #0]
    308e:	0021      	movs	r1, r4
    3090:	2001      	movs	r0, #1
    3092:	4b20      	ldr	r3, [pc, #128]	; (3114 <system_clock_init+0x150>)
    3094:	4798      	blx	r3
    3096:	2001      	movs	r0, #1
    3098:	4b1f      	ldr	r3, [pc, #124]	; (3118 <system_clock_init+0x154>)
    309a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    309c:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    309e:	0021      	movs	r1, r4
    30a0:	2000      	movs	r0, #0
    30a2:	4b14      	ldr	r3, [pc, #80]	; (30f4 <system_clock_init+0x130>)
    30a4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    30a6:	2000      	movs	r0, #0
    30a8:	4b1c      	ldr	r3, [pc, #112]	; (311c <system_clock_init+0x158>)
    30aa:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    30ac:	2007      	movs	r0, #7
    30ae:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    30b0:	490e      	ldr	r1, [pc, #56]	; (30ec <system_clock_init+0x128>)
    30b2:	22d0      	movs	r2, #208	; 0xd0
    30b4:	68cb      	ldr	r3, [r1, #12]
    30b6:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    30b8:	2bd0      	cmp	r3, #208	; 0xd0
    30ba:	d1fb      	bne.n	30b4 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    30bc:	4a18      	ldr	r2, [pc, #96]	; (3120 <system_clock_init+0x15c>)
    30be:	2300      	movs	r3, #0
    30c0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    30c2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    30c4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    30c6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    30c8:	a901      	add	r1, sp, #4
    30ca:	2201      	movs	r2, #1
    30cc:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    30ce:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    30d0:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    30d2:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    30d4:	3307      	adds	r3, #7
    30d6:	700b      	strb	r3, [r1, #0]
    30d8:	2000      	movs	r0, #0
    30da:	4b0e      	ldr	r3, [pc, #56]	; (3114 <system_clock_init+0x150>)
    30dc:	4798      	blx	r3
    30de:	2000      	movs	r0, #0
    30e0:	4b0d      	ldr	r3, [pc, #52]	; (3118 <system_clock_init+0x154>)
    30e2:	4798      	blx	r3
#endif
}
    30e4:	b00f      	add	sp, #60	; 0x3c
    30e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    30e8:	3b20      	subs	r3, #32
    30ea:	e7b2      	b.n	3052 <system_clock_init+0x8e>
    30ec:	40000800 	.word	0x40000800
    30f0:	41004000 	.word	0x41004000
    30f4:	0000335d 	.word	0x0000335d
    30f8:	00002de5 	.word	0x00002de5
    30fc:	00002f1d 	.word	0x00002f1d
    3100:	00806024 	.word	0x00806024
    3104:	000005b9 	.word	0x000005b9
    3108:	00002e9d 	.word	0x00002e9d
    310c:	00002da9 	.word	0x00002da9
    3110:	00003125 	.word	0x00003125
    3114:	00003149 	.word	0x00003149
    3118:	00003201 	.word	0x00003201
    311c:	000032d1 	.word	0x000032d1
    3120:	40000400 	.word	0x40000400

00003124 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    3124:	4a06      	ldr	r2, [pc, #24]	; (3140 <system_gclk_init+0x1c>)
    3126:	6993      	ldr	r3, [r2, #24]
    3128:	2108      	movs	r1, #8
    312a:	430b      	orrs	r3, r1
    312c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    312e:	2201      	movs	r2, #1
    3130:	4b04      	ldr	r3, [pc, #16]	; (3144 <system_gclk_init+0x20>)
    3132:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3134:	0019      	movs	r1, r3
    3136:	780b      	ldrb	r3, [r1, #0]
    3138:	4213      	tst	r3, r2
    313a:	d1fc      	bne.n	3136 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    313c:	4770      	bx	lr
    313e:	46c0      	nop			; (mov r8, r8)
    3140:	40000400 	.word	0x40000400
    3144:	40000c00 	.word	0x40000c00

00003148 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3148:	b570      	push	{r4, r5, r6, lr}
    314a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    314c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    314e:	780d      	ldrb	r5, [r1, #0]
    3150:	022d      	lsls	r5, r5, #8
    3152:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3154:	784b      	ldrb	r3, [r1, #1]
    3156:	2b00      	cmp	r3, #0
    3158:	d002      	beq.n	3160 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    315a:	2380      	movs	r3, #128	; 0x80
    315c:	02db      	lsls	r3, r3, #11
    315e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3160:	7a4b      	ldrb	r3, [r1, #9]
    3162:	2b00      	cmp	r3, #0
    3164:	d002      	beq.n	316c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3166:	2380      	movs	r3, #128	; 0x80
    3168:	031b      	lsls	r3, r3, #12
    316a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    316c:	6848      	ldr	r0, [r1, #4]
    316e:	2801      	cmp	r0, #1
    3170:	d910      	bls.n	3194 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3172:	1e43      	subs	r3, r0, #1
    3174:	4218      	tst	r0, r3
    3176:	d134      	bne.n	31e2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3178:	2802      	cmp	r0, #2
    317a:	d930      	bls.n	31de <system_gclk_gen_set_config+0x96>
    317c:	2302      	movs	r3, #2
    317e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3180:	3201      	adds	r2, #1
						mask <<= 1) {
    3182:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3184:	4298      	cmp	r0, r3
    3186:	d8fb      	bhi.n	3180 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3188:	0212      	lsls	r2, r2, #8
    318a:	4332      	orrs	r2, r6
    318c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    318e:	2380      	movs	r3, #128	; 0x80
    3190:	035b      	lsls	r3, r3, #13
    3192:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3194:	7a0b      	ldrb	r3, [r1, #8]
    3196:	2b00      	cmp	r3, #0
    3198:	d002      	beq.n	31a0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    319a:	2380      	movs	r3, #128	; 0x80
    319c:	039b      	lsls	r3, r3, #14
    319e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31a0:	4a13      	ldr	r2, [pc, #76]	; (31f0 <system_gclk_gen_set_config+0xa8>)
    31a2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    31a4:	b25b      	sxtb	r3, r3
    31a6:	2b00      	cmp	r3, #0
    31a8:	dbfb      	blt.n	31a2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    31aa:	4b12      	ldr	r3, [pc, #72]	; (31f4 <system_gclk_gen_set_config+0xac>)
    31ac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    31ae:	4b12      	ldr	r3, [pc, #72]	; (31f8 <system_gclk_gen_set_config+0xb0>)
    31b0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31b2:	4a0f      	ldr	r2, [pc, #60]	; (31f0 <system_gclk_gen_set_config+0xa8>)
    31b4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    31b6:	b25b      	sxtb	r3, r3
    31b8:	2b00      	cmp	r3, #0
    31ba:	dbfb      	blt.n	31b4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    31bc:	4b0c      	ldr	r3, [pc, #48]	; (31f0 <system_gclk_gen_set_config+0xa8>)
    31be:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31c0:	001a      	movs	r2, r3
    31c2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    31c4:	b25b      	sxtb	r3, r3
    31c6:	2b00      	cmp	r3, #0
    31c8:	dbfb      	blt.n	31c2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    31ca:	4a09      	ldr	r2, [pc, #36]	; (31f0 <system_gclk_gen_set_config+0xa8>)
    31cc:	6853      	ldr	r3, [r2, #4]
    31ce:	2180      	movs	r1, #128	; 0x80
    31d0:	0249      	lsls	r1, r1, #9
    31d2:	400b      	ands	r3, r1
    31d4:	431d      	orrs	r5, r3
    31d6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    31d8:	4b08      	ldr	r3, [pc, #32]	; (31fc <system_gclk_gen_set_config+0xb4>)
    31da:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    31dc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    31de:	2200      	movs	r2, #0
    31e0:	e7d2      	b.n	3188 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    31e2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    31e4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    31e6:	2380      	movs	r3, #128	; 0x80
    31e8:	029b      	lsls	r3, r3, #10
    31ea:	431d      	orrs	r5, r3
    31ec:	e7d2      	b.n	3194 <system_gclk_gen_set_config+0x4c>
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	40000c00 	.word	0x40000c00
    31f4:	00001c29 	.word	0x00001c29
    31f8:	40000c08 	.word	0x40000c08
    31fc:	00001c69 	.word	0x00001c69

00003200 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3200:	b510      	push	{r4, lr}
    3202:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3204:	4a0b      	ldr	r2, [pc, #44]	; (3234 <system_gclk_gen_enable+0x34>)
    3206:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3208:	b25b      	sxtb	r3, r3
    320a:	2b00      	cmp	r3, #0
    320c:	dbfb      	blt.n	3206 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    320e:	4b0a      	ldr	r3, [pc, #40]	; (3238 <system_gclk_gen_enable+0x38>)
    3210:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3212:	4b0a      	ldr	r3, [pc, #40]	; (323c <system_gclk_gen_enable+0x3c>)
    3214:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3216:	4a07      	ldr	r2, [pc, #28]	; (3234 <system_gclk_gen_enable+0x34>)
    3218:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    321a:	b25b      	sxtb	r3, r3
    321c:	2b00      	cmp	r3, #0
    321e:	dbfb      	blt.n	3218 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3220:	4a04      	ldr	r2, [pc, #16]	; (3234 <system_gclk_gen_enable+0x34>)
    3222:	6851      	ldr	r1, [r2, #4]
    3224:	2380      	movs	r3, #128	; 0x80
    3226:	025b      	lsls	r3, r3, #9
    3228:	430b      	orrs	r3, r1
    322a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    322c:	4b04      	ldr	r3, [pc, #16]	; (3240 <system_gclk_gen_enable+0x40>)
    322e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3230:	bd10      	pop	{r4, pc}
    3232:	46c0      	nop			; (mov r8, r8)
    3234:	40000c00 	.word	0x40000c00
    3238:	00001c29 	.word	0x00001c29
    323c:	40000c04 	.word	0x40000c04
    3240:	00001c69 	.word	0x00001c69

00003244 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3244:	b570      	push	{r4, r5, r6, lr}
    3246:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3248:	4a1a      	ldr	r2, [pc, #104]	; (32b4 <system_gclk_gen_get_hz+0x70>)
    324a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    324c:	b25b      	sxtb	r3, r3
    324e:	2b00      	cmp	r3, #0
    3250:	dbfb      	blt.n	324a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    3252:	4b19      	ldr	r3, [pc, #100]	; (32b8 <system_gclk_gen_get_hz+0x74>)
    3254:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3256:	4b19      	ldr	r3, [pc, #100]	; (32bc <system_gclk_gen_get_hz+0x78>)
    3258:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    325a:	4a16      	ldr	r2, [pc, #88]	; (32b4 <system_gclk_gen_get_hz+0x70>)
    325c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    325e:	b25b      	sxtb	r3, r3
    3260:	2b00      	cmp	r3, #0
    3262:	dbfb      	blt.n	325c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3264:	4e13      	ldr	r6, [pc, #76]	; (32b4 <system_gclk_gen_get_hz+0x70>)
    3266:	6870      	ldr	r0, [r6, #4]
    3268:	04c0      	lsls	r0, r0, #19
    326a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    326c:	4b14      	ldr	r3, [pc, #80]	; (32c0 <system_gclk_gen_get_hz+0x7c>)
    326e:	4798      	blx	r3
    3270:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3272:	4b12      	ldr	r3, [pc, #72]	; (32bc <system_gclk_gen_get_hz+0x78>)
    3274:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3276:	6876      	ldr	r6, [r6, #4]
    3278:	02f6      	lsls	r6, r6, #11
    327a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    327c:	4b11      	ldr	r3, [pc, #68]	; (32c4 <system_gclk_gen_get_hz+0x80>)
    327e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3280:	4a0c      	ldr	r2, [pc, #48]	; (32b4 <system_gclk_gen_get_hz+0x70>)
    3282:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3284:	b25b      	sxtb	r3, r3
    3286:	2b00      	cmp	r3, #0
    3288:	dbfb      	blt.n	3282 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    328a:	4b0a      	ldr	r3, [pc, #40]	; (32b4 <system_gclk_gen_get_hz+0x70>)
    328c:	689c      	ldr	r4, [r3, #8]
    328e:	0224      	lsls	r4, r4, #8
    3290:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    3292:	4b0d      	ldr	r3, [pc, #52]	; (32c8 <system_gclk_gen_get_hz+0x84>)
    3294:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3296:	2e00      	cmp	r6, #0
    3298:	d107      	bne.n	32aa <system_gclk_gen_get_hz+0x66>
    329a:	2c01      	cmp	r4, #1
    329c:	d907      	bls.n	32ae <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    329e:	0021      	movs	r1, r4
    32a0:	0028      	movs	r0, r5
    32a2:	4b0a      	ldr	r3, [pc, #40]	; (32cc <system_gclk_gen_get_hz+0x88>)
    32a4:	4798      	blx	r3
    32a6:	0005      	movs	r5, r0
    32a8:	e001      	b.n	32ae <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    32aa:	3401      	adds	r4, #1
    32ac:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    32ae:	0028      	movs	r0, r5
    32b0:	bd70      	pop	{r4, r5, r6, pc}
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	40000c00 	.word	0x40000c00
    32b8:	00001c29 	.word	0x00001c29
    32bc:	40000c04 	.word	0x40000c04
    32c0:	00002d19 	.word	0x00002d19
    32c4:	40000c08 	.word	0x40000c08
    32c8:	00001c69 	.word	0x00001c69
    32cc:	0000381d 	.word	0x0000381d

000032d0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    32d0:	b510      	push	{r4, lr}
    32d2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    32d4:	4b06      	ldr	r3, [pc, #24]	; (32f0 <system_gclk_chan_enable+0x20>)
    32d6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    32d8:	4b06      	ldr	r3, [pc, #24]	; (32f4 <system_gclk_chan_enable+0x24>)
    32da:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    32dc:	4a06      	ldr	r2, [pc, #24]	; (32f8 <system_gclk_chan_enable+0x28>)
    32de:	8853      	ldrh	r3, [r2, #2]
    32e0:	2180      	movs	r1, #128	; 0x80
    32e2:	01c9      	lsls	r1, r1, #7
    32e4:	430b      	orrs	r3, r1
    32e6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    32e8:	4b04      	ldr	r3, [pc, #16]	; (32fc <system_gclk_chan_enable+0x2c>)
    32ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    32ec:	bd10      	pop	{r4, pc}
    32ee:	46c0      	nop			; (mov r8, r8)
    32f0:	00001c29 	.word	0x00001c29
    32f4:	40000c02 	.word	0x40000c02
    32f8:	40000c00 	.word	0x40000c00
    32fc:	00001c69 	.word	0x00001c69

00003300 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3300:	b510      	push	{r4, lr}
    3302:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3304:	4b0f      	ldr	r3, [pc, #60]	; (3344 <system_gclk_chan_disable+0x44>)
    3306:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3308:	4b0f      	ldr	r3, [pc, #60]	; (3348 <system_gclk_chan_disable+0x48>)
    330a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    330c:	4a0f      	ldr	r2, [pc, #60]	; (334c <system_gclk_chan_disable+0x4c>)
    330e:	8853      	ldrh	r3, [r2, #2]
    3310:	051b      	lsls	r3, r3, #20
    3312:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3314:	8853      	ldrh	r3, [r2, #2]
    3316:	490e      	ldr	r1, [pc, #56]	; (3350 <system_gclk_chan_disable+0x50>)
    3318:	400b      	ands	r3, r1
    331a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    331c:	8853      	ldrh	r3, [r2, #2]
    331e:	490d      	ldr	r1, [pc, #52]	; (3354 <system_gclk_chan_disable+0x54>)
    3320:	400b      	ands	r3, r1
    3322:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3324:	0011      	movs	r1, r2
    3326:	2280      	movs	r2, #128	; 0x80
    3328:	01d2      	lsls	r2, r2, #7
    332a:	884b      	ldrh	r3, [r1, #2]
    332c:	4213      	tst	r3, r2
    332e:	d1fc      	bne.n	332a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3330:	4906      	ldr	r1, [pc, #24]	; (334c <system_gclk_chan_disable+0x4c>)
    3332:	884a      	ldrh	r2, [r1, #2]
    3334:	0203      	lsls	r3, r0, #8
    3336:	4806      	ldr	r0, [pc, #24]	; (3350 <system_gclk_chan_disable+0x50>)
    3338:	4002      	ands	r2, r0
    333a:	4313      	orrs	r3, r2
    333c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    333e:	4b06      	ldr	r3, [pc, #24]	; (3358 <system_gclk_chan_disable+0x58>)
    3340:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3342:	bd10      	pop	{r4, pc}
    3344:	00001c29 	.word	0x00001c29
    3348:	40000c02 	.word	0x40000c02
    334c:	40000c00 	.word	0x40000c00
    3350:	fffff0ff 	.word	0xfffff0ff
    3354:	ffffbfff 	.word	0xffffbfff
    3358:	00001c69 	.word	0x00001c69

0000335c <system_gclk_chan_set_config>:
{
    335c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    335e:	780c      	ldrb	r4, [r1, #0]
    3360:	0224      	lsls	r4, r4, #8
    3362:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    3364:	4b02      	ldr	r3, [pc, #8]	; (3370 <system_gclk_chan_set_config+0x14>)
    3366:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3368:	b2a4      	uxth	r4, r4
    336a:	4b02      	ldr	r3, [pc, #8]	; (3374 <system_gclk_chan_set_config+0x18>)
    336c:	805c      	strh	r4, [r3, #2]
}
    336e:	bd10      	pop	{r4, pc}
    3370:	00003301 	.word	0x00003301
    3374:	40000c00 	.word	0x40000c00

00003378 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3378:	b510      	push	{r4, lr}
    337a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    337c:	4b06      	ldr	r3, [pc, #24]	; (3398 <system_gclk_chan_get_hz+0x20>)
    337e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3380:	4b06      	ldr	r3, [pc, #24]	; (339c <system_gclk_chan_get_hz+0x24>)
    3382:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3384:	4b06      	ldr	r3, [pc, #24]	; (33a0 <system_gclk_chan_get_hz+0x28>)
    3386:	885c      	ldrh	r4, [r3, #2]
    3388:	0524      	lsls	r4, r4, #20
    338a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    338c:	4b05      	ldr	r3, [pc, #20]	; (33a4 <system_gclk_chan_get_hz+0x2c>)
    338e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3390:	0020      	movs	r0, r4
    3392:	4b05      	ldr	r3, [pc, #20]	; (33a8 <system_gclk_chan_get_hz+0x30>)
    3394:	4798      	blx	r3
}
    3396:	bd10      	pop	{r4, pc}
    3398:	00001c29 	.word	0x00001c29
    339c:	40000c02 	.word	0x40000c02
    33a0:	40000c00 	.word	0x40000c00
    33a4:	00001c69 	.word	0x00001c69
    33a8:	00003245 	.word	0x00003245

000033ac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    33ac:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    33ae:	78d3      	ldrb	r3, [r2, #3]
    33b0:	2b00      	cmp	r3, #0
    33b2:	d135      	bne.n	3420 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    33b4:	7813      	ldrb	r3, [r2, #0]
    33b6:	2b80      	cmp	r3, #128	; 0x80
    33b8:	d029      	beq.n	340e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    33ba:	061b      	lsls	r3, r3, #24
    33bc:	2480      	movs	r4, #128	; 0x80
    33be:	0264      	lsls	r4, r4, #9
    33c0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    33c2:	7854      	ldrb	r4, [r2, #1]
    33c4:	2502      	movs	r5, #2
    33c6:	43ac      	bics	r4, r5
    33c8:	d106      	bne.n	33d8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    33ca:	7894      	ldrb	r4, [r2, #2]
    33cc:	2c00      	cmp	r4, #0
    33ce:	d120      	bne.n	3412 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    33d0:	2480      	movs	r4, #128	; 0x80
    33d2:	02a4      	lsls	r4, r4, #10
    33d4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    33d6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    33d8:	7854      	ldrb	r4, [r2, #1]
    33da:	3c01      	subs	r4, #1
    33dc:	2c01      	cmp	r4, #1
    33de:	d91c      	bls.n	341a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    33e0:	040d      	lsls	r5, r1, #16
    33e2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    33e4:	24a0      	movs	r4, #160	; 0xa0
    33e6:	05e4      	lsls	r4, r4, #23
    33e8:	432c      	orrs	r4, r5
    33ea:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    33ec:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    33ee:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    33f0:	24d0      	movs	r4, #208	; 0xd0
    33f2:	0624      	lsls	r4, r4, #24
    33f4:	432c      	orrs	r4, r5
    33f6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    33f8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    33fa:	78d4      	ldrb	r4, [r2, #3]
    33fc:	2c00      	cmp	r4, #0
    33fe:	d122      	bne.n	3446 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3400:	035b      	lsls	r3, r3, #13
    3402:	d51c      	bpl.n	343e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3404:	7893      	ldrb	r3, [r2, #2]
    3406:	2b01      	cmp	r3, #1
    3408:	d01e      	beq.n	3448 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    340a:	6141      	str	r1, [r0, #20]
    340c:	e017      	b.n	343e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    340e:	2300      	movs	r3, #0
    3410:	e7d7      	b.n	33c2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3412:	24c0      	movs	r4, #192	; 0xc0
    3414:	02e4      	lsls	r4, r4, #11
    3416:	4323      	orrs	r3, r4
    3418:	e7dd      	b.n	33d6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    341a:	4c0d      	ldr	r4, [pc, #52]	; (3450 <_system_pinmux_config+0xa4>)
    341c:	4023      	ands	r3, r4
    341e:	e7df      	b.n	33e0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3420:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3422:	040c      	lsls	r4, r1, #16
    3424:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3426:	23a0      	movs	r3, #160	; 0xa0
    3428:	05db      	lsls	r3, r3, #23
    342a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    342c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    342e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3430:	23d0      	movs	r3, #208	; 0xd0
    3432:	061b      	lsls	r3, r3, #24
    3434:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3436:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3438:	78d3      	ldrb	r3, [r2, #3]
    343a:	2b00      	cmp	r3, #0
    343c:	d103      	bne.n	3446 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    343e:	7853      	ldrb	r3, [r2, #1]
    3440:	3b01      	subs	r3, #1
    3442:	2b01      	cmp	r3, #1
    3444:	d902      	bls.n	344c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    3446:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3448:	6181      	str	r1, [r0, #24]
    344a:	e7f8      	b.n	343e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    344c:	6081      	str	r1, [r0, #8]
}
    344e:	e7fa      	b.n	3446 <_system_pinmux_config+0x9a>
    3450:	fffbffff 	.word	0xfffbffff

00003454 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3454:	b510      	push	{r4, lr}
    3456:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    3458:	09c1      	lsrs	r1, r0, #7
		return NULL;
    345a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    345c:	2900      	cmp	r1, #0
    345e:	d104      	bne.n	346a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3460:	0943      	lsrs	r3, r0, #5
    3462:	01db      	lsls	r3, r3, #7
    3464:	4905      	ldr	r1, [pc, #20]	; (347c <system_pinmux_pin_set_config+0x28>)
    3466:	468c      	mov	ip, r1
    3468:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    346a:	241f      	movs	r4, #31
    346c:	4020      	ands	r0, r4
    346e:	2101      	movs	r1, #1
    3470:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    3472:	0018      	movs	r0, r3
    3474:	4b02      	ldr	r3, [pc, #8]	; (3480 <system_pinmux_pin_set_config+0x2c>)
    3476:	4798      	blx	r3
}
    3478:	bd10      	pop	{r4, pc}
    347a:	46c0      	nop			; (mov r8, r8)
    347c:	41004400 	.word	0x41004400
    3480:	000033ad 	.word	0x000033ad

00003484 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3484:	4770      	bx	lr
	...

00003488 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3488:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    348a:	4b05      	ldr	r3, [pc, #20]	; (34a0 <system_init+0x18>)
    348c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    348e:	4b05      	ldr	r3, [pc, #20]	; (34a4 <system_init+0x1c>)
    3490:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3492:	4b05      	ldr	r3, [pc, #20]	; (34a8 <system_init+0x20>)
    3494:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3496:	4b05      	ldr	r3, [pc, #20]	; (34ac <system_init+0x24>)
    3498:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    349a:	4b05      	ldr	r3, [pc, #20]	; (34b0 <system_init+0x28>)
    349c:	4798      	blx	r3
}
    349e:	bd10      	pop	{r4, pc}
    34a0:	00002fc5 	.word	0x00002fc5
    34a4:	00001c99 	.word	0x00001c99
    34a8:	00003485 	.word	0x00003485
    34ac:	00001da9 	.word	0x00001da9
    34b0:	00003485 	.word	0x00003485

000034b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    34b4:	e7fe      	b.n	34b4 <Dummy_Handler>
	...

000034b8 <Reset_Handler>:
{
    34b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    34ba:	4a2a      	ldr	r2, [pc, #168]	; (3564 <Reset_Handler+0xac>)
    34bc:	4b2a      	ldr	r3, [pc, #168]	; (3568 <Reset_Handler+0xb0>)
    34be:	429a      	cmp	r2, r3
    34c0:	d011      	beq.n	34e6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    34c2:	001a      	movs	r2, r3
    34c4:	4b29      	ldr	r3, [pc, #164]	; (356c <Reset_Handler+0xb4>)
    34c6:	429a      	cmp	r2, r3
    34c8:	d20d      	bcs.n	34e6 <Reset_Handler+0x2e>
    34ca:	4a29      	ldr	r2, [pc, #164]	; (3570 <Reset_Handler+0xb8>)
    34cc:	3303      	adds	r3, #3
    34ce:	1a9b      	subs	r3, r3, r2
    34d0:	089b      	lsrs	r3, r3, #2
    34d2:	3301      	adds	r3, #1
    34d4:	009b      	lsls	r3, r3, #2
    34d6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    34d8:	4823      	ldr	r0, [pc, #140]	; (3568 <Reset_Handler+0xb0>)
    34da:	4922      	ldr	r1, [pc, #136]	; (3564 <Reset_Handler+0xac>)
    34dc:	588c      	ldr	r4, [r1, r2]
    34de:	5084      	str	r4, [r0, r2]
    34e0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    34e2:	429a      	cmp	r2, r3
    34e4:	d1fa      	bne.n	34dc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    34e6:	4a23      	ldr	r2, [pc, #140]	; (3574 <Reset_Handler+0xbc>)
    34e8:	4b23      	ldr	r3, [pc, #140]	; (3578 <Reset_Handler+0xc0>)
    34ea:	429a      	cmp	r2, r3
    34ec:	d20a      	bcs.n	3504 <Reset_Handler+0x4c>
    34ee:	43d3      	mvns	r3, r2
    34f0:	4921      	ldr	r1, [pc, #132]	; (3578 <Reset_Handler+0xc0>)
    34f2:	185b      	adds	r3, r3, r1
    34f4:	2103      	movs	r1, #3
    34f6:	438b      	bics	r3, r1
    34f8:	3304      	adds	r3, #4
    34fa:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    34fc:	2100      	movs	r1, #0
    34fe:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3500:	4293      	cmp	r3, r2
    3502:	d1fc      	bne.n	34fe <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3504:	4a1d      	ldr	r2, [pc, #116]	; (357c <Reset_Handler+0xc4>)
    3506:	21ff      	movs	r1, #255	; 0xff
    3508:	4b1d      	ldr	r3, [pc, #116]	; (3580 <Reset_Handler+0xc8>)
    350a:	438b      	bics	r3, r1
    350c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    350e:	39fd      	subs	r1, #253	; 0xfd
    3510:	2390      	movs	r3, #144	; 0x90
    3512:	005b      	lsls	r3, r3, #1
    3514:	4a1b      	ldr	r2, [pc, #108]	; (3584 <Reset_Handler+0xcc>)
    3516:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3518:	4a1b      	ldr	r2, [pc, #108]	; (3588 <Reset_Handler+0xd0>)
    351a:	78d3      	ldrb	r3, [r2, #3]
    351c:	2503      	movs	r5, #3
    351e:	43ab      	bics	r3, r5
    3520:	2402      	movs	r4, #2
    3522:	4323      	orrs	r3, r4
    3524:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3526:	78d3      	ldrb	r3, [r2, #3]
    3528:	270c      	movs	r7, #12
    352a:	43bb      	bics	r3, r7
    352c:	2608      	movs	r6, #8
    352e:	4333      	orrs	r3, r6
    3530:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    3532:	4b16      	ldr	r3, [pc, #88]	; (358c <Reset_Handler+0xd4>)
    3534:	7b98      	ldrb	r0, [r3, #14]
    3536:	2230      	movs	r2, #48	; 0x30
    3538:	4390      	bics	r0, r2
    353a:	2220      	movs	r2, #32
    353c:	4310      	orrs	r0, r2
    353e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3540:	7b99      	ldrb	r1, [r3, #14]
    3542:	43b9      	bics	r1, r7
    3544:	4331      	orrs	r1, r6
    3546:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3548:	7b9a      	ldrb	r2, [r3, #14]
    354a:	43aa      	bics	r2, r5
    354c:	4322      	orrs	r2, r4
    354e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3550:	4a0f      	ldr	r2, [pc, #60]	; (3590 <Reset_Handler+0xd8>)
    3552:	6853      	ldr	r3, [r2, #4]
    3554:	2180      	movs	r1, #128	; 0x80
    3556:	430b      	orrs	r3, r1
    3558:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    355a:	4b0e      	ldr	r3, [pc, #56]	; (3594 <Reset_Handler+0xdc>)
    355c:	4798      	blx	r3
        main();
    355e:	4b0e      	ldr	r3, [pc, #56]	; (3598 <Reset_Handler+0xe0>)
    3560:	4798      	blx	r3
    3562:	e7fe      	b.n	3562 <Reset_Handler+0xaa>
    3564:	00005628 	.word	0x00005628
    3568:	20000000 	.word	0x20000000
    356c:	20000070 	.word	0x20000070
    3570:	20000004 	.word	0x20000004
    3574:	20000070 	.word	0x20000070
    3578:	200001f4 	.word	0x200001f4
    357c:	e000ed00 	.word	0xe000ed00
    3580:	00000000 	.word	0x00000000
    3584:	41007000 	.word	0x41007000
    3588:	41005000 	.word	0x41005000
    358c:	41004800 	.word	0x41004800
    3590:	41004000 	.word	0x41004000
    3594:	00003989 	.word	0x00003989
    3598:	000036b1 	.word	0x000036b1

0000359c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    359c:	b5f0      	push	{r4, r5, r6, r7, lr}
    359e:	46c6      	mov	lr, r8
    35a0:	b500      	push	{lr}
    35a2:	000c      	movs	r4, r1
    35a4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    35a6:	2800      	cmp	r0, #0
    35a8:	d10f      	bne.n	35ca <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    35aa:	2a00      	cmp	r2, #0
    35ac:	dd11      	ble.n	35d2 <_read+0x36>
    35ae:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    35b0:	4e09      	ldr	r6, [pc, #36]	; (35d8 <_read+0x3c>)
    35b2:	4d0a      	ldr	r5, [pc, #40]	; (35dc <_read+0x40>)
    35b4:	6830      	ldr	r0, [r6, #0]
    35b6:	0021      	movs	r1, r4
    35b8:	682b      	ldr	r3, [r5, #0]
    35ba:	4798      	blx	r3
		ptr++;
    35bc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    35be:	42bc      	cmp	r4, r7
    35c0:	d1f8      	bne.n	35b4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    35c2:	4640      	mov	r0, r8
    35c4:	bc04      	pop	{r2}
    35c6:	4690      	mov	r8, r2
    35c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    35ca:	2301      	movs	r3, #1
    35cc:	425b      	negs	r3, r3
    35ce:	4698      	mov	r8, r3
    35d0:	e7f7      	b.n	35c2 <_read+0x26>
	for (; len > 0; --len) {
    35d2:	4680      	mov	r8, r0
    35d4:	e7f5      	b.n	35c2 <_read+0x26>
    35d6:	46c0      	nop			; (mov r8, r8)
    35d8:	200001ec 	.word	0x200001ec
    35dc:	200001e4 	.word	0x200001e4

000035e0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    35e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    35e2:	46c6      	mov	lr, r8
    35e4:	b500      	push	{lr}
    35e6:	000e      	movs	r6, r1
    35e8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    35ea:	3801      	subs	r0, #1
    35ec:	2802      	cmp	r0, #2
    35ee:	d810      	bhi.n	3612 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    35f0:	2a00      	cmp	r2, #0
    35f2:	d011      	beq.n	3618 <_write+0x38>
    35f4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    35f6:	4b0c      	ldr	r3, [pc, #48]	; (3628 <_write+0x48>)
    35f8:	4698      	mov	r8, r3
    35fa:	4f0c      	ldr	r7, [pc, #48]	; (362c <_write+0x4c>)
    35fc:	4643      	mov	r3, r8
    35fe:	6818      	ldr	r0, [r3, #0]
    3600:	5d31      	ldrb	r1, [r6, r4]
    3602:	683b      	ldr	r3, [r7, #0]
    3604:	4798      	blx	r3
    3606:	2800      	cmp	r0, #0
    3608:	db08      	blt.n	361c <_write+0x3c>
			return -1;
		}
		++nChars;
    360a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    360c:	42a5      	cmp	r5, r4
    360e:	d1f5      	bne.n	35fc <_write+0x1c>
    3610:	e006      	b.n	3620 <_write+0x40>
		return -1;
    3612:	2401      	movs	r4, #1
    3614:	4264      	negs	r4, r4
    3616:	e003      	b.n	3620 <_write+0x40>
	for (; len != 0; --len) {
    3618:	0014      	movs	r4, r2
    361a:	e001      	b.n	3620 <_write+0x40>
			return -1;
    361c:	2401      	movs	r4, #1
    361e:	4264      	negs	r4, r4
	}
	return nChars;
}
    3620:	0020      	movs	r0, r4
    3622:	bc04      	pop	{r2}
    3624:	4690      	mov	r8, r2
    3626:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3628:	200001ec 	.word	0x200001ec
    362c:	200001e8 	.word	0x200001e8

00003630 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3630:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3632:	4a06      	ldr	r2, [pc, #24]	; (364c <_sbrk+0x1c>)
    3634:	6812      	ldr	r2, [r2, #0]
    3636:	2a00      	cmp	r2, #0
    3638:	d004      	beq.n	3644 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    363a:	4a04      	ldr	r2, [pc, #16]	; (364c <_sbrk+0x1c>)
    363c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    363e:	18c3      	adds	r3, r0, r3
    3640:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3642:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3644:	4902      	ldr	r1, [pc, #8]	; (3650 <_sbrk+0x20>)
    3646:	4a01      	ldr	r2, [pc, #4]	; (364c <_sbrk+0x1c>)
    3648:	6011      	str	r1, [r2, #0]
    364a:	e7f6      	b.n	363a <_sbrk+0xa>
    364c:	200000dc 	.word	0x200000dc
    3650:	200021f8 	.word	0x200021f8

00003654 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3654:	2001      	movs	r0, #1
    3656:	4240      	negs	r0, r0
    3658:	4770      	bx	lr

0000365a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    365a:	2380      	movs	r3, #128	; 0x80
    365c:	019b      	lsls	r3, r3, #6
    365e:	604b      	str	r3, [r1, #4]

	return 0;
}
    3660:	2000      	movs	r0, #0
    3662:	4770      	bx	lr

00003664 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3664:	2001      	movs	r0, #1
    3666:	4770      	bx	lr

00003668 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3668:	2000      	movs	r0, #0
    366a:	4770      	bx	lr

0000366c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    366c:	b570      	push	{r4, r5, r6, lr}
    366e:	b082      	sub	sp, #8
    3670:	0005      	movs	r5, r0
    3672:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3674:	2200      	movs	r2, #0
    3676:	466b      	mov	r3, sp
    3678:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    367a:	4c06      	ldr	r4, [pc, #24]	; (3694 <usart_serial_getchar+0x28>)
    367c:	466b      	mov	r3, sp
    367e:	1d99      	adds	r1, r3, #6
    3680:	0028      	movs	r0, r5
    3682:	47a0      	blx	r4
    3684:	2800      	cmp	r0, #0
    3686:	d1f9      	bne.n	367c <usart_serial_getchar+0x10>

	*c = temp;
    3688:	466b      	mov	r3, sp
    368a:	3306      	adds	r3, #6
    368c:	881b      	ldrh	r3, [r3, #0]
    368e:	7033      	strb	r3, [r6, #0]
}
    3690:	b002      	add	sp, #8
    3692:	bd70      	pop	{r4, r5, r6, pc}
    3694:	00002b15 	.word	0x00002b15

00003698 <usart_serial_putchar>:
{
    3698:	b570      	push	{r4, r5, r6, lr}
    369a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    369c:	b28c      	uxth	r4, r1
    369e:	4e03      	ldr	r6, [pc, #12]	; (36ac <usart_serial_putchar+0x14>)
    36a0:	0021      	movs	r1, r4
    36a2:	0028      	movs	r0, r5
    36a4:	47b0      	blx	r6
    36a6:	2800      	cmp	r0, #0
    36a8:	d1fa      	bne.n	36a0 <usart_serial_putchar+0x8>
}
    36aa:	bd70      	pop	{r4, r5, r6, pc}
    36ac:	00002ae9 	.word	0x00002ae9

000036b0 <main>:
 * Display WINC1500 chip id and rf revision id.
 *
 * \return program return value.
 */
int main(void)
{
    36b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36b2:	b097      	sub	sp, #92	; 0x5c
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize the board. */
	system_init();
    36b4:	4b3e      	ldr	r3, [pc, #248]	; (37b0 <main+0x100>)
    36b6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    36b8:	2380      	movs	r3, #128	; 0x80
    36ba:	05db      	lsls	r3, r3, #23
    36bc:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    36be:	2300      	movs	r3, #0
    36c0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    36c2:	22ff      	movs	r2, #255	; 0xff
    36c4:	4669      	mov	r1, sp
    36c6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    36c8:	2200      	movs	r2, #0
    36ca:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    36cc:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    36ce:	2401      	movs	r4, #1
    36d0:	2124      	movs	r1, #36	; 0x24
    36d2:	4668      	mov	r0, sp
    36d4:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    36d6:	3101      	adds	r1, #1
    36d8:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    36da:	3101      	adds	r1, #1
    36dc:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    36de:	3101      	adds	r1, #1
    36e0:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    36e2:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    36e4:	3105      	adds	r1, #5
    36e6:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    36e8:	3101      	adds	r1, #1
    36ea:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    36ec:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    36ee:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    36f0:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    36f2:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    36f4:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    36f6:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    36f8:	2313      	movs	r3, #19
    36fa:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    36fc:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    36fe:	23c4      	movs	r3, #196	; 0xc4
    3700:	039b      	lsls	r3, r3, #14
    3702:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    3704:	2301      	movs	r3, #1
    3706:	425b      	negs	r3, r3
    3708:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    370a:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    370c:	4b29      	ldr	r3, [pc, #164]	; (37b4 <main+0x104>)
    370e:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    3710:	4b29      	ldr	r3, [pc, #164]	; (37b8 <main+0x108>)
    3712:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    3714:	23e1      	movs	r3, #225	; 0xe1
    3716:	025b      	lsls	r3, r3, #9
    3718:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    371a:	4d28      	ldr	r5, [pc, #160]	; (37bc <main+0x10c>)
    371c:	4b28      	ldr	r3, [pc, #160]	; (37c0 <main+0x110>)
    371e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3720:	4a28      	ldr	r2, [pc, #160]	; (37c4 <main+0x114>)
    3722:	4b29      	ldr	r3, [pc, #164]	; (37c8 <main+0x118>)
    3724:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3726:	4a29      	ldr	r2, [pc, #164]	; (37cc <main+0x11c>)
    3728:	4b29      	ldr	r3, [pc, #164]	; (37d0 <main+0x120>)
    372a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    372c:	466a      	mov	r2, sp
    372e:	4929      	ldr	r1, [pc, #164]	; (37d4 <main+0x124>)
    3730:	0028      	movs	r0, r5
    3732:	4b29      	ldr	r3, [pc, #164]	; (37d8 <main+0x128>)
    3734:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3736:	4f29      	ldr	r7, [pc, #164]	; (37dc <main+0x12c>)
    3738:	683b      	ldr	r3, [r7, #0]
    373a:	6898      	ldr	r0, [r3, #8]
    373c:	2100      	movs	r1, #0
    373e:	4e28      	ldr	r6, [pc, #160]	; (37e0 <main+0x130>)
    3740:	47b0      	blx	r6
	setbuf(stdin, NULL);
    3742:	683b      	ldr	r3, [r7, #0]
    3744:	6858      	ldr	r0, [r3, #4]
    3746:	2100      	movs	r1, #0
    3748:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    374a:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    374c:	0030      	movs	r0, r6
    374e:	4b25      	ldr	r3, [pc, #148]	; (37e4 <main+0x134>)
    3750:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3752:	231f      	movs	r3, #31
    3754:	4018      	ands	r0, r3
    3756:	4084      	lsls	r4, r0
    3758:	4b23      	ldr	r3, [pc, #140]	; (37e8 <main+0x138>)
    375a:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    375c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    375e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3760:	2b00      	cmp	r3, #0
    3762:	d1fc      	bne.n	375e <main+0xae>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3764:	6833      	ldr	r3, [r6, #0]
    3766:	2202      	movs	r2, #2
    3768:	4313      	orrs	r3, r2
    376a:	6033      	str	r3, [r6, #0]

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
    376c:	481f      	ldr	r0, [pc, #124]	; (37ec <main+0x13c>)
    376e:	4b20      	ldr	r3, [pc, #128]	; (37f0 <main+0x140>)
    3770:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    3772:	4b20      	ldr	r3, [pc, #128]	; (37f4 <main+0x144>)
    3774:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    3776:	2218      	movs	r2, #24
    3778:	2100      	movs	r1, #0
    377a:	a810      	add	r0, sp, #64	; 0x40
    377c:	4b1e      	ldr	r3, [pc, #120]	; (37f8 <main+0x148>)
    377e:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	ret = m2m_wifi_init(&param);
    3780:	a810      	add	r0, sp, #64	; 0x40
    3782:	4b1e      	ldr	r3, [pc, #120]	; (37fc <main+0x14c>)
    3784:	4798      	blx	r3
    3786:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    3788:	d003      	beq.n	3792 <main+0xe2>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    378a:	481d      	ldr	r0, [pc, #116]	; (3800 <main+0x150>)
    378c:	4b1d      	ldr	r3, [pc, #116]	; (3804 <main+0x154>)
    378e:	4798      	blx	r3
    3790:	e7fe      	b.n	3790 <main+0xe0>
		while (1) {
		}
	}

	/* Display WINC1500 chip information. */
	printf("Chip ID : \r\t\t\t%x\r\n", (unsigned int)nmi_get_chipid());
    3792:	4b1d      	ldr	r3, [pc, #116]	; (3808 <main+0x158>)
    3794:	4798      	blx	r3
    3796:	0001      	movs	r1, r0
    3798:	481c      	ldr	r0, [pc, #112]	; (380c <main+0x15c>)
    379a:	4c1a      	ldr	r4, [pc, #104]	; (3804 <main+0x154>)
    379c:	47a0      	blx	r4
	printf("RF Revision ID : \r\t\t\t%x\r\n", (unsigned int)nmi_get_rfrevid());
    379e:	4b1c      	ldr	r3, [pc, #112]	; (3810 <main+0x160>)
    37a0:	4798      	blx	r3
    37a2:	0001      	movs	r1, r0
    37a4:	481b      	ldr	r0, [pc, #108]	; (3814 <main+0x164>)
    37a6:	47a0      	blx	r4
	printf("Done.\r\n\r\n");
    37a8:	481b      	ldr	r0, [pc, #108]	; (3818 <main+0x168>)
    37aa:	4b11      	ldr	r3, [pc, #68]	; (37f0 <main+0x140>)
    37ac:	4798      	blx	r3
    37ae:	e7fe      	b.n	37ae <main+0xfe>
    37b0:	00003489 	.word	0x00003489
    37b4:	002a0003 	.word	0x002a0003
    37b8:	002b0003 	.word	0x002b0003
    37bc:	200000e0 	.word	0x200000e0
    37c0:	200001ec 	.word	0x200001ec
    37c4:	00003699 	.word	0x00003699
    37c8:	200001e8 	.word	0x200001e8
    37cc:	0000366d 	.word	0x0000366d
    37d0:	200001e4 	.word	0x200001e4
    37d4:	42001800 	.word	0x42001800
    37d8:	000027a5 	.word	0x000027a5
    37dc:	2000000c 	.word	0x2000000c
    37e0:	00003b11 	.word	0x00003b11
    37e4:	00002279 	.word	0x00002279
    37e8:	e000e100 	.word	0xe000e100
    37ec:	000054a0 	.word	0x000054a0
    37f0:	00003afd 	.word	0x00003afd
    37f4:	000001d9 	.word	0x000001d9
    37f8:	000039d1 	.word	0x000039d1
    37fc:	00000a49 	.word	0x00000a49
    3800:	0000550c 	.word	0x0000550c
    3804:	000039e1 	.word	0x000039e1
    3808:	00000c11 	.word	0x00000c11
    380c:	00005534 	.word	0x00005534
    3810:	00000ce1 	.word	0x00000ce1
    3814:	00005548 	.word	0x00005548
    3818:	00005564 	.word	0x00005564

0000381c <__udivsi3>:
    381c:	2200      	movs	r2, #0
    381e:	0843      	lsrs	r3, r0, #1
    3820:	428b      	cmp	r3, r1
    3822:	d374      	bcc.n	390e <__udivsi3+0xf2>
    3824:	0903      	lsrs	r3, r0, #4
    3826:	428b      	cmp	r3, r1
    3828:	d35f      	bcc.n	38ea <__udivsi3+0xce>
    382a:	0a03      	lsrs	r3, r0, #8
    382c:	428b      	cmp	r3, r1
    382e:	d344      	bcc.n	38ba <__udivsi3+0x9e>
    3830:	0b03      	lsrs	r3, r0, #12
    3832:	428b      	cmp	r3, r1
    3834:	d328      	bcc.n	3888 <__udivsi3+0x6c>
    3836:	0c03      	lsrs	r3, r0, #16
    3838:	428b      	cmp	r3, r1
    383a:	d30d      	bcc.n	3858 <__udivsi3+0x3c>
    383c:	22ff      	movs	r2, #255	; 0xff
    383e:	0209      	lsls	r1, r1, #8
    3840:	ba12      	rev	r2, r2
    3842:	0c03      	lsrs	r3, r0, #16
    3844:	428b      	cmp	r3, r1
    3846:	d302      	bcc.n	384e <__udivsi3+0x32>
    3848:	1212      	asrs	r2, r2, #8
    384a:	0209      	lsls	r1, r1, #8
    384c:	d065      	beq.n	391a <__udivsi3+0xfe>
    384e:	0b03      	lsrs	r3, r0, #12
    3850:	428b      	cmp	r3, r1
    3852:	d319      	bcc.n	3888 <__udivsi3+0x6c>
    3854:	e000      	b.n	3858 <__udivsi3+0x3c>
    3856:	0a09      	lsrs	r1, r1, #8
    3858:	0bc3      	lsrs	r3, r0, #15
    385a:	428b      	cmp	r3, r1
    385c:	d301      	bcc.n	3862 <__udivsi3+0x46>
    385e:	03cb      	lsls	r3, r1, #15
    3860:	1ac0      	subs	r0, r0, r3
    3862:	4152      	adcs	r2, r2
    3864:	0b83      	lsrs	r3, r0, #14
    3866:	428b      	cmp	r3, r1
    3868:	d301      	bcc.n	386e <__udivsi3+0x52>
    386a:	038b      	lsls	r3, r1, #14
    386c:	1ac0      	subs	r0, r0, r3
    386e:	4152      	adcs	r2, r2
    3870:	0b43      	lsrs	r3, r0, #13
    3872:	428b      	cmp	r3, r1
    3874:	d301      	bcc.n	387a <__udivsi3+0x5e>
    3876:	034b      	lsls	r3, r1, #13
    3878:	1ac0      	subs	r0, r0, r3
    387a:	4152      	adcs	r2, r2
    387c:	0b03      	lsrs	r3, r0, #12
    387e:	428b      	cmp	r3, r1
    3880:	d301      	bcc.n	3886 <__udivsi3+0x6a>
    3882:	030b      	lsls	r3, r1, #12
    3884:	1ac0      	subs	r0, r0, r3
    3886:	4152      	adcs	r2, r2
    3888:	0ac3      	lsrs	r3, r0, #11
    388a:	428b      	cmp	r3, r1
    388c:	d301      	bcc.n	3892 <__udivsi3+0x76>
    388e:	02cb      	lsls	r3, r1, #11
    3890:	1ac0      	subs	r0, r0, r3
    3892:	4152      	adcs	r2, r2
    3894:	0a83      	lsrs	r3, r0, #10
    3896:	428b      	cmp	r3, r1
    3898:	d301      	bcc.n	389e <__udivsi3+0x82>
    389a:	028b      	lsls	r3, r1, #10
    389c:	1ac0      	subs	r0, r0, r3
    389e:	4152      	adcs	r2, r2
    38a0:	0a43      	lsrs	r3, r0, #9
    38a2:	428b      	cmp	r3, r1
    38a4:	d301      	bcc.n	38aa <__udivsi3+0x8e>
    38a6:	024b      	lsls	r3, r1, #9
    38a8:	1ac0      	subs	r0, r0, r3
    38aa:	4152      	adcs	r2, r2
    38ac:	0a03      	lsrs	r3, r0, #8
    38ae:	428b      	cmp	r3, r1
    38b0:	d301      	bcc.n	38b6 <__udivsi3+0x9a>
    38b2:	020b      	lsls	r3, r1, #8
    38b4:	1ac0      	subs	r0, r0, r3
    38b6:	4152      	adcs	r2, r2
    38b8:	d2cd      	bcs.n	3856 <__udivsi3+0x3a>
    38ba:	09c3      	lsrs	r3, r0, #7
    38bc:	428b      	cmp	r3, r1
    38be:	d301      	bcc.n	38c4 <__udivsi3+0xa8>
    38c0:	01cb      	lsls	r3, r1, #7
    38c2:	1ac0      	subs	r0, r0, r3
    38c4:	4152      	adcs	r2, r2
    38c6:	0983      	lsrs	r3, r0, #6
    38c8:	428b      	cmp	r3, r1
    38ca:	d301      	bcc.n	38d0 <__udivsi3+0xb4>
    38cc:	018b      	lsls	r3, r1, #6
    38ce:	1ac0      	subs	r0, r0, r3
    38d0:	4152      	adcs	r2, r2
    38d2:	0943      	lsrs	r3, r0, #5
    38d4:	428b      	cmp	r3, r1
    38d6:	d301      	bcc.n	38dc <__udivsi3+0xc0>
    38d8:	014b      	lsls	r3, r1, #5
    38da:	1ac0      	subs	r0, r0, r3
    38dc:	4152      	adcs	r2, r2
    38de:	0903      	lsrs	r3, r0, #4
    38e0:	428b      	cmp	r3, r1
    38e2:	d301      	bcc.n	38e8 <__udivsi3+0xcc>
    38e4:	010b      	lsls	r3, r1, #4
    38e6:	1ac0      	subs	r0, r0, r3
    38e8:	4152      	adcs	r2, r2
    38ea:	08c3      	lsrs	r3, r0, #3
    38ec:	428b      	cmp	r3, r1
    38ee:	d301      	bcc.n	38f4 <__udivsi3+0xd8>
    38f0:	00cb      	lsls	r3, r1, #3
    38f2:	1ac0      	subs	r0, r0, r3
    38f4:	4152      	adcs	r2, r2
    38f6:	0883      	lsrs	r3, r0, #2
    38f8:	428b      	cmp	r3, r1
    38fa:	d301      	bcc.n	3900 <__udivsi3+0xe4>
    38fc:	008b      	lsls	r3, r1, #2
    38fe:	1ac0      	subs	r0, r0, r3
    3900:	4152      	adcs	r2, r2
    3902:	0843      	lsrs	r3, r0, #1
    3904:	428b      	cmp	r3, r1
    3906:	d301      	bcc.n	390c <__udivsi3+0xf0>
    3908:	004b      	lsls	r3, r1, #1
    390a:	1ac0      	subs	r0, r0, r3
    390c:	4152      	adcs	r2, r2
    390e:	1a41      	subs	r1, r0, r1
    3910:	d200      	bcs.n	3914 <__udivsi3+0xf8>
    3912:	4601      	mov	r1, r0
    3914:	4152      	adcs	r2, r2
    3916:	4610      	mov	r0, r2
    3918:	4770      	bx	lr
    391a:	e7ff      	b.n	391c <__udivsi3+0x100>
    391c:	b501      	push	{r0, lr}
    391e:	2000      	movs	r0, #0
    3920:	f000 f806 	bl	3930 <__aeabi_idiv0>
    3924:	bd02      	pop	{r1, pc}
    3926:	46c0      	nop			; (mov r8, r8)

00003928 <__aeabi_uidivmod>:
    3928:	2900      	cmp	r1, #0
    392a:	d0f7      	beq.n	391c <__udivsi3+0x100>
    392c:	e776      	b.n	381c <__udivsi3>
    392e:	4770      	bx	lr

00003930 <__aeabi_idiv0>:
    3930:	4770      	bx	lr
    3932:	46c0      	nop			; (mov r8, r8)

00003934 <__aeabi_lmul>:
    3934:	b5f0      	push	{r4, r5, r6, r7, lr}
    3936:	46ce      	mov	lr, r9
    3938:	4647      	mov	r7, r8
    393a:	0415      	lsls	r5, r2, #16
    393c:	0c2d      	lsrs	r5, r5, #16
    393e:	002e      	movs	r6, r5
    3940:	b580      	push	{r7, lr}
    3942:	0407      	lsls	r7, r0, #16
    3944:	0c14      	lsrs	r4, r2, #16
    3946:	0c3f      	lsrs	r7, r7, #16
    3948:	4699      	mov	r9, r3
    394a:	0c03      	lsrs	r3, r0, #16
    394c:	437e      	muls	r6, r7
    394e:	435d      	muls	r5, r3
    3950:	4367      	muls	r7, r4
    3952:	4363      	muls	r3, r4
    3954:	197f      	adds	r7, r7, r5
    3956:	0c34      	lsrs	r4, r6, #16
    3958:	19e4      	adds	r4, r4, r7
    395a:	469c      	mov	ip, r3
    395c:	42a5      	cmp	r5, r4
    395e:	d903      	bls.n	3968 <__aeabi_lmul+0x34>
    3960:	2380      	movs	r3, #128	; 0x80
    3962:	025b      	lsls	r3, r3, #9
    3964:	4698      	mov	r8, r3
    3966:	44c4      	add	ip, r8
    3968:	464b      	mov	r3, r9
    396a:	4351      	muls	r1, r2
    396c:	4343      	muls	r3, r0
    396e:	0436      	lsls	r6, r6, #16
    3970:	0c36      	lsrs	r6, r6, #16
    3972:	0c25      	lsrs	r5, r4, #16
    3974:	0424      	lsls	r4, r4, #16
    3976:	4465      	add	r5, ip
    3978:	19a4      	adds	r4, r4, r6
    397a:	1859      	adds	r1, r3, r1
    397c:	1949      	adds	r1, r1, r5
    397e:	0020      	movs	r0, r4
    3980:	bc0c      	pop	{r2, r3}
    3982:	4690      	mov	r8, r2
    3984:	4699      	mov	r9, r3
    3986:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003988 <__libc_init_array>:
    3988:	b570      	push	{r4, r5, r6, lr}
    398a:	2600      	movs	r6, #0
    398c:	4d0c      	ldr	r5, [pc, #48]	; (39c0 <__libc_init_array+0x38>)
    398e:	4c0d      	ldr	r4, [pc, #52]	; (39c4 <__libc_init_array+0x3c>)
    3990:	1b64      	subs	r4, r4, r5
    3992:	10a4      	asrs	r4, r4, #2
    3994:	42a6      	cmp	r6, r4
    3996:	d109      	bne.n	39ac <__libc_init_array+0x24>
    3998:	2600      	movs	r6, #0
    399a:	f001 fe35 	bl	5608 <_init>
    399e:	4d0a      	ldr	r5, [pc, #40]	; (39c8 <__libc_init_array+0x40>)
    39a0:	4c0a      	ldr	r4, [pc, #40]	; (39cc <__libc_init_array+0x44>)
    39a2:	1b64      	subs	r4, r4, r5
    39a4:	10a4      	asrs	r4, r4, #2
    39a6:	42a6      	cmp	r6, r4
    39a8:	d105      	bne.n	39b6 <__libc_init_array+0x2e>
    39aa:	bd70      	pop	{r4, r5, r6, pc}
    39ac:	00b3      	lsls	r3, r6, #2
    39ae:	58eb      	ldr	r3, [r5, r3]
    39b0:	4798      	blx	r3
    39b2:	3601      	adds	r6, #1
    39b4:	e7ee      	b.n	3994 <__libc_init_array+0xc>
    39b6:	00b3      	lsls	r3, r6, #2
    39b8:	58eb      	ldr	r3, [r5, r3]
    39ba:	4798      	blx	r3
    39bc:	3601      	adds	r6, #1
    39be:	e7f2      	b.n	39a6 <__libc_init_array+0x1e>
    39c0:	00005614 	.word	0x00005614
    39c4:	00005614 	.word	0x00005614
    39c8:	00005614 	.word	0x00005614
    39cc:	00005618 	.word	0x00005618

000039d0 <memset>:
    39d0:	0003      	movs	r3, r0
    39d2:	1882      	adds	r2, r0, r2
    39d4:	4293      	cmp	r3, r2
    39d6:	d100      	bne.n	39da <memset+0xa>
    39d8:	4770      	bx	lr
    39da:	7019      	strb	r1, [r3, #0]
    39dc:	3301      	adds	r3, #1
    39de:	e7f9      	b.n	39d4 <memset+0x4>

000039e0 <iprintf>:
    39e0:	b40f      	push	{r0, r1, r2, r3}
    39e2:	4b0b      	ldr	r3, [pc, #44]	; (3a10 <iprintf+0x30>)
    39e4:	b513      	push	{r0, r1, r4, lr}
    39e6:	681c      	ldr	r4, [r3, #0]
    39e8:	2c00      	cmp	r4, #0
    39ea:	d005      	beq.n	39f8 <iprintf+0x18>
    39ec:	69a3      	ldr	r3, [r4, #24]
    39ee:	2b00      	cmp	r3, #0
    39f0:	d102      	bne.n	39f8 <iprintf+0x18>
    39f2:	0020      	movs	r0, r4
    39f4:	f000 fb06 	bl	4004 <__sinit>
    39f8:	ab05      	add	r3, sp, #20
    39fa:	9a04      	ldr	r2, [sp, #16]
    39fc:	68a1      	ldr	r1, [r4, #8]
    39fe:	0020      	movs	r0, r4
    3a00:	9301      	str	r3, [sp, #4]
    3a02:	f000 fcdb 	bl	43bc <_vfiprintf_r>
    3a06:	bc16      	pop	{r1, r2, r4}
    3a08:	bc08      	pop	{r3}
    3a0a:	b004      	add	sp, #16
    3a0c:	4718      	bx	r3
    3a0e:	46c0      	nop			; (mov r8, r8)
    3a10:	2000000c 	.word	0x2000000c

00003a14 <putchar>:
    3a14:	4b08      	ldr	r3, [pc, #32]	; (3a38 <putchar+0x24>)
    3a16:	b570      	push	{r4, r5, r6, lr}
    3a18:	681c      	ldr	r4, [r3, #0]
    3a1a:	0005      	movs	r5, r0
    3a1c:	2c00      	cmp	r4, #0
    3a1e:	d005      	beq.n	3a2c <putchar+0x18>
    3a20:	69a3      	ldr	r3, [r4, #24]
    3a22:	2b00      	cmp	r3, #0
    3a24:	d102      	bne.n	3a2c <putchar+0x18>
    3a26:	0020      	movs	r0, r4
    3a28:	f000 faec 	bl	4004 <__sinit>
    3a2c:	0029      	movs	r1, r5
    3a2e:	68a2      	ldr	r2, [r4, #8]
    3a30:	0020      	movs	r0, r4
    3a32:	f000 ff67 	bl	4904 <_putc_r>
    3a36:	bd70      	pop	{r4, r5, r6, pc}
    3a38:	2000000c 	.word	0x2000000c

00003a3c <_puts_r>:
    3a3c:	b570      	push	{r4, r5, r6, lr}
    3a3e:	0005      	movs	r5, r0
    3a40:	000e      	movs	r6, r1
    3a42:	2800      	cmp	r0, #0
    3a44:	d004      	beq.n	3a50 <_puts_r+0x14>
    3a46:	6983      	ldr	r3, [r0, #24]
    3a48:	2b00      	cmp	r3, #0
    3a4a:	d101      	bne.n	3a50 <_puts_r+0x14>
    3a4c:	f000 fada 	bl	4004 <__sinit>
    3a50:	69ab      	ldr	r3, [r5, #24]
    3a52:	68ac      	ldr	r4, [r5, #8]
    3a54:	2b00      	cmp	r3, #0
    3a56:	d102      	bne.n	3a5e <_puts_r+0x22>
    3a58:	0028      	movs	r0, r5
    3a5a:	f000 fad3 	bl	4004 <__sinit>
    3a5e:	4b24      	ldr	r3, [pc, #144]	; (3af0 <_puts_r+0xb4>)
    3a60:	429c      	cmp	r4, r3
    3a62:	d10f      	bne.n	3a84 <_puts_r+0x48>
    3a64:	686c      	ldr	r4, [r5, #4]
    3a66:	89a3      	ldrh	r3, [r4, #12]
    3a68:	071b      	lsls	r3, r3, #28
    3a6a:	d502      	bpl.n	3a72 <_puts_r+0x36>
    3a6c:	6923      	ldr	r3, [r4, #16]
    3a6e:	2b00      	cmp	r3, #0
    3a70:	d120      	bne.n	3ab4 <_puts_r+0x78>
    3a72:	0021      	movs	r1, r4
    3a74:	0028      	movs	r0, r5
    3a76:	f000 f957 	bl	3d28 <__swsetup_r>
    3a7a:	2800      	cmp	r0, #0
    3a7c:	d01a      	beq.n	3ab4 <_puts_r+0x78>
    3a7e:	2001      	movs	r0, #1
    3a80:	4240      	negs	r0, r0
    3a82:	bd70      	pop	{r4, r5, r6, pc}
    3a84:	4b1b      	ldr	r3, [pc, #108]	; (3af4 <_puts_r+0xb8>)
    3a86:	429c      	cmp	r4, r3
    3a88:	d101      	bne.n	3a8e <_puts_r+0x52>
    3a8a:	68ac      	ldr	r4, [r5, #8]
    3a8c:	e7eb      	b.n	3a66 <_puts_r+0x2a>
    3a8e:	4b1a      	ldr	r3, [pc, #104]	; (3af8 <_puts_r+0xbc>)
    3a90:	429c      	cmp	r4, r3
    3a92:	d1e8      	bne.n	3a66 <_puts_r+0x2a>
    3a94:	68ec      	ldr	r4, [r5, #12]
    3a96:	e7e6      	b.n	3a66 <_puts_r+0x2a>
    3a98:	3b01      	subs	r3, #1
    3a9a:	3601      	adds	r6, #1
    3a9c:	60a3      	str	r3, [r4, #8]
    3a9e:	2b00      	cmp	r3, #0
    3aa0:	da04      	bge.n	3aac <_puts_r+0x70>
    3aa2:	69a2      	ldr	r2, [r4, #24]
    3aa4:	4293      	cmp	r3, r2
    3aa6:	db16      	blt.n	3ad6 <_puts_r+0x9a>
    3aa8:	290a      	cmp	r1, #10
    3aaa:	d014      	beq.n	3ad6 <_puts_r+0x9a>
    3aac:	6823      	ldr	r3, [r4, #0]
    3aae:	1c5a      	adds	r2, r3, #1
    3ab0:	6022      	str	r2, [r4, #0]
    3ab2:	7019      	strb	r1, [r3, #0]
    3ab4:	7831      	ldrb	r1, [r6, #0]
    3ab6:	68a3      	ldr	r3, [r4, #8]
    3ab8:	2900      	cmp	r1, #0
    3aba:	d1ed      	bne.n	3a98 <_puts_r+0x5c>
    3abc:	3b01      	subs	r3, #1
    3abe:	60a3      	str	r3, [r4, #8]
    3ac0:	2b00      	cmp	r3, #0
    3ac2:	da0f      	bge.n	3ae4 <_puts_r+0xa8>
    3ac4:	0022      	movs	r2, r4
    3ac6:	310a      	adds	r1, #10
    3ac8:	0028      	movs	r0, r5
    3aca:	f000 f8d7 	bl	3c7c <__swbuf_r>
    3ace:	1c43      	adds	r3, r0, #1
    3ad0:	d0d5      	beq.n	3a7e <_puts_r+0x42>
    3ad2:	200a      	movs	r0, #10
    3ad4:	e7d5      	b.n	3a82 <_puts_r+0x46>
    3ad6:	0022      	movs	r2, r4
    3ad8:	0028      	movs	r0, r5
    3ada:	f000 f8cf 	bl	3c7c <__swbuf_r>
    3ade:	1c43      	adds	r3, r0, #1
    3ae0:	d1e8      	bne.n	3ab4 <_puts_r+0x78>
    3ae2:	e7cc      	b.n	3a7e <_puts_r+0x42>
    3ae4:	200a      	movs	r0, #10
    3ae6:	6823      	ldr	r3, [r4, #0]
    3ae8:	1c5a      	adds	r2, r3, #1
    3aea:	6022      	str	r2, [r4, #0]
    3aec:	7018      	strb	r0, [r3, #0]
    3aee:	e7c8      	b.n	3a82 <_puts_r+0x46>
    3af0:	00005594 	.word	0x00005594
    3af4:	000055b4 	.word	0x000055b4
    3af8:	00005574 	.word	0x00005574

00003afc <puts>:
    3afc:	b510      	push	{r4, lr}
    3afe:	4b03      	ldr	r3, [pc, #12]	; (3b0c <puts+0x10>)
    3b00:	0001      	movs	r1, r0
    3b02:	6818      	ldr	r0, [r3, #0]
    3b04:	f7ff ff9a 	bl	3a3c <_puts_r>
    3b08:	bd10      	pop	{r4, pc}
    3b0a:	46c0      	nop			; (mov r8, r8)
    3b0c:	2000000c 	.word	0x2000000c

00003b10 <setbuf>:
    3b10:	424a      	negs	r2, r1
    3b12:	414a      	adcs	r2, r1
    3b14:	2380      	movs	r3, #128	; 0x80
    3b16:	b510      	push	{r4, lr}
    3b18:	0052      	lsls	r2, r2, #1
    3b1a:	00db      	lsls	r3, r3, #3
    3b1c:	f000 f802 	bl	3b24 <setvbuf>
    3b20:	bd10      	pop	{r4, pc}
	...

00003b24 <setvbuf>:
    3b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b26:	001d      	movs	r5, r3
    3b28:	4b4f      	ldr	r3, [pc, #316]	; (3c68 <setvbuf+0x144>)
    3b2a:	b085      	sub	sp, #20
    3b2c:	681e      	ldr	r6, [r3, #0]
    3b2e:	0004      	movs	r4, r0
    3b30:	000f      	movs	r7, r1
    3b32:	9200      	str	r2, [sp, #0]
    3b34:	2e00      	cmp	r6, #0
    3b36:	d005      	beq.n	3b44 <setvbuf+0x20>
    3b38:	69b3      	ldr	r3, [r6, #24]
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	d102      	bne.n	3b44 <setvbuf+0x20>
    3b3e:	0030      	movs	r0, r6
    3b40:	f000 fa60 	bl	4004 <__sinit>
    3b44:	4b49      	ldr	r3, [pc, #292]	; (3c6c <setvbuf+0x148>)
    3b46:	429c      	cmp	r4, r3
    3b48:	d150      	bne.n	3bec <setvbuf+0xc8>
    3b4a:	6874      	ldr	r4, [r6, #4]
    3b4c:	9b00      	ldr	r3, [sp, #0]
    3b4e:	2b02      	cmp	r3, #2
    3b50:	d005      	beq.n	3b5e <setvbuf+0x3a>
    3b52:	2b01      	cmp	r3, #1
    3b54:	d900      	bls.n	3b58 <setvbuf+0x34>
    3b56:	e084      	b.n	3c62 <setvbuf+0x13e>
    3b58:	2d00      	cmp	r5, #0
    3b5a:	da00      	bge.n	3b5e <setvbuf+0x3a>
    3b5c:	e081      	b.n	3c62 <setvbuf+0x13e>
    3b5e:	0021      	movs	r1, r4
    3b60:	0030      	movs	r0, r6
    3b62:	f000 f9e1 	bl	3f28 <_fflush_r>
    3b66:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3b68:	2900      	cmp	r1, #0
    3b6a:	d008      	beq.n	3b7e <setvbuf+0x5a>
    3b6c:	0023      	movs	r3, r4
    3b6e:	3344      	adds	r3, #68	; 0x44
    3b70:	4299      	cmp	r1, r3
    3b72:	d002      	beq.n	3b7a <setvbuf+0x56>
    3b74:	0030      	movs	r0, r6
    3b76:	f000 fb51 	bl	421c <_free_r>
    3b7a:	2300      	movs	r3, #0
    3b7c:	6363      	str	r3, [r4, #52]	; 0x34
    3b7e:	2300      	movs	r3, #0
    3b80:	61a3      	str	r3, [r4, #24]
    3b82:	6063      	str	r3, [r4, #4]
    3b84:	89a3      	ldrh	r3, [r4, #12]
    3b86:	061b      	lsls	r3, r3, #24
    3b88:	d503      	bpl.n	3b92 <setvbuf+0x6e>
    3b8a:	6921      	ldr	r1, [r4, #16]
    3b8c:	0030      	movs	r0, r6
    3b8e:	f000 fb45 	bl	421c <_free_r>
    3b92:	89a3      	ldrh	r3, [r4, #12]
    3b94:	4a36      	ldr	r2, [pc, #216]	; (3c70 <setvbuf+0x14c>)
    3b96:	4013      	ands	r3, r2
    3b98:	81a3      	strh	r3, [r4, #12]
    3b9a:	9b00      	ldr	r3, [sp, #0]
    3b9c:	2b02      	cmp	r3, #2
    3b9e:	d05a      	beq.n	3c56 <setvbuf+0x132>
    3ba0:	ab03      	add	r3, sp, #12
    3ba2:	aa02      	add	r2, sp, #8
    3ba4:	0021      	movs	r1, r4
    3ba6:	0030      	movs	r0, r6
    3ba8:	f000 fac2 	bl	4130 <__swhatbuf_r>
    3bac:	89a3      	ldrh	r3, [r4, #12]
    3bae:	4318      	orrs	r0, r3
    3bb0:	81a0      	strh	r0, [r4, #12]
    3bb2:	2d00      	cmp	r5, #0
    3bb4:	d124      	bne.n	3c00 <setvbuf+0xdc>
    3bb6:	9d02      	ldr	r5, [sp, #8]
    3bb8:	0028      	movs	r0, r5
    3bba:	f000 fb25 	bl	4208 <malloc>
    3bbe:	9501      	str	r5, [sp, #4]
    3bc0:	1e07      	subs	r7, r0, #0
    3bc2:	d142      	bne.n	3c4a <setvbuf+0x126>
    3bc4:	9b02      	ldr	r3, [sp, #8]
    3bc6:	9301      	str	r3, [sp, #4]
    3bc8:	42ab      	cmp	r3, r5
    3bca:	d139      	bne.n	3c40 <setvbuf+0x11c>
    3bcc:	2001      	movs	r0, #1
    3bce:	4240      	negs	r0, r0
    3bd0:	2302      	movs	r3, #2
    3bd2:	89a2      	ldrh	r2, [r4, #12]
    3bd4:	4313      	orrs	r3, r2
    3bd6:	81a3      	strh	r3, [r4, #12]
    3bd8:	2300      	movs	r3, #0
    3bda:	60a3      	str	r3, [r4, #8]
    3bdc:	0023      	movs	r3, r4
    3bde:	3347      	adds	r3, #71	; 0x47
    3be0:	6023      	str	r3, [r4, #0]
    3be2:	6123      	str	r3, [r4, #16]
    3be4:	2301      	movs	r3, #1
    3be6:	6163      	str	r3, [r4, #20]
    3be8:	b005      	add	sp, #20
    3bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bec:	4b21      	ldr	r3, [pc, #132]	; (3c74 <setvbuf+0x150>)
    3bee:	429c      	cmp	r4, r3
    3bf0:	d101      	bne.n	3bf6 <setvbuf+0xd2>
    3bf2:	68b4      	ldr	r4, [r6, #8]
    3bf4:	e7aa      	b.n	3b4c <setvbuf+0x28>
    3bf6:	4b20      	ldr	r3, [pc, #128]	; (3c78 <setvbuf+0x154>)
    3bf8:	429c      	cmp	r4, r3
    3bfa:	d1a7      	bne.n	3b4c <setvbuf+0x28>
    3bfc:	68f4      	ldr	r4, [r6, #12]
    3bfe:	e7a5      	b.n	3b4c <setvbuf+0x28>
    3c00:	2f00      	cmp	r7, #0
    3c02:	d0d9      	beq.n	3bb8 <setvbuf+0x94>
    3c04:	69b3      	ldr	r3, [r6, #24]
    3c06:	2b00      	cmp	r3, #0
    3c08:	d102      	bne.n	3c10 <setvbuf+0xec>
    3c0a:	0030      	movs	r0, r6
    3c0c:	f000 f9fa 	bl	4004 <__sinit>
    3c10:	9b00      	ldr	r3, [sp, #0]
    3c12:	2b01      	cmp	r3, #1
    3c14:	d103      	bne.n	3c1e <setvbuf+0xfa>
    3c16:	89a3      	ldrh	r3, [r4, #12]
    3c18:	9a00      	ldr	r2, [sp, #0]
    3c1a:	431a      	orrs	r2, r3
    3c1c:	81a2      	strh	r2, [r4, #12]
    3c1e:	2008      	movs	r0, #8
    3c20:	89a3      	ldrh	r3, [r4, #12]
    3c22:	6027      	str	r7, [r4, #0]
    3c24:	6127      	str	r7, [r4, #16]
    3c26:	6165      	str	r5, [r4, #20]
    3c28:	4018      	ands	r0, r3
    3c2a:	d018      	beq.n	3c5e <setvbuf+0x13a>
    3c2c:	2001      	movs	r0, #1
    3c2e:	4018      	ands	r0, r3
    3c30:	2300      	movs	r3, #0
    3c32:	4298      	cmp	r0, r3
    3c34:	d011      	beq.n	3c5a <setvbuf+0x136>
    3c36:	426d      	negs	r5, r5
    3c38:	60a3      	str	r3, [r4, #8]
    3c3a:	61a5      	str	r5, [r4, #24]
    3c3c:	0018      	movs	r0, r3
    3c3e:	e7d3      	b.n	3be8 <setvbuf+0xc4>
    3c40:	9801      	ldr	r0, [sp, #4]
    3c42:	f000 fae1 	bl	4208 <malloc>
    3c46:	1e07      	subs	r7, r0, #0
    3c48:	d0c0      	beq.n	3bcc <setvbuf+0xa8>
    3c4a:	2380      	movs	r3, #128	; 0x80
    3c4c:	89a2      	ldrh	r2, [r4, #12]
    3c4e:	9d01      	ldr	r5, [sp, #4]
    3c50:	4313      	orrs	r3, r2
    3c52:	81a3      	strh	r3, [r4, #12]
    3c54:	e7d6      	b.n	3c04 <setvbuf+0xe0>
    3c56:	2000      	movs	r0, #0
    3c58:	e7ba      	b.n	3bd0 <setvbuf+0xac>
    3c5a:	60a5      	str	r5, [r4, #8]
    3c5c:	e7c4      	b.n	3be8 <setvbuf+0xc4>
    3c5e:	60a0      	str	r0, [r4, #8]
    3c60:	e7c2      	b.n	3be8 <setvbuf+0xc4>
    3c62:	2001      	movs	r0, #1
    3c64:	4240      	negs	r0, r0
    3c66:	e7bf      	b.n	3be8 <setvbuf+0xc4>
    3c68:	2000000c 	.word	0x2000000c
    3c6c:	00005594 	.word	0x00005594
    3c70:	fffff35c 	.word	0xfffff35c
    3c74:	000055b4 	.word	0x000055b4
    3c78:	00005574 	.word	0x00005574

00003c7c <__swbuf_r>:
    3c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c7e:	0005      	movs	r5, r0
    3c80:	000e      	movs	r6, r1
    3c82:	0014      	movs	r4, r2
    3c84:	2800      	cmp	r0, #0
    3c86:	d004      	beq.n	3c92 <__swbuf_r+0x16>
    3c88:	6983      	ldr	r3, [r0, #24]
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d101      	bne.n	3c92 <__swbuf_r+0x16>
    3c8e:	f000 f9b9 	bl	4004 <__sinit>
    3c92:	4b22      	ldr	r3, [pc, #136]	; (3d1c <__swbuf_r+0xa0>)
    3c94:	429c      	cmp	r4, r3
    3c96:	d12d      	bne.n	3cf4 <__swbuf_r+0x78>
    3c98:	686c      	ldr	r4, [r5, #4]
    3c9a:	69a3      	ldr	r3, [r4, #24]
    3c9c:	60a3      	str	r3, [r4, #8]
    3c9e:	89a3      	ldrh	r3, [r4, #12]
    3ca0:	071b      	lsls	r3, r3, #28
    3ca2:	d531      	bpl.n	3d08 <__swbuf_r+0x8c>
    3ca4:	6923      	ldr	r3, [r4, #16]
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	d02e      	beq.n	3d08 <__swbuf_r+0x8c>
    3caa:	6823      	ldr	r3, [r4, #0]
    3cac:	6922      	ldr	r2, [r4, #16]
    3cae:	b2f7      	uxtb	r7, r6
    3cb0:	1a98      	subs	r0, r3, r2
    3cb2:	6963      	ldr	r3, [r4, #20]
    3cb4:	b2f6      	uxtb	r6, r6
    3cb6:	4298      	cmp	r0, r3
    3cb8:	db05      	blt.n	3cc6 <__swbuf_r+0x4a>
    3cba:	0021      	movs	r1, r4
    3cbc:	0028      	movs	r0, r5
    3cbe:	f000 f933 	bl	3f28 <_fflush_r>
    3cc2:	2800      	cmp	r0, #0
    3cc4:	d126      	bne.n	3d14 <__swbuf_r+0x98>
    3cc6:	68a3      	ldr	r3, [r4, #8]
    3cc8:	3001      	adds	r0, #1
    3cca:	3b01      	subs	r3, #1
    3ccc:	60a3      	str	r3, [r4, #8]
    3cce:	6823      	ldr	r3, [r4, #0]
    3cd0:	1c5a      	adds	r2, r3, #1
    3cd2:	6022      	str	r2, [r4, #0]
    3cd4:	701f      	strb	r7, [r3, #0]
    3cd6:	6963      	ldr	r3, [r4, #20]
    3cd8:	4298      	cmp	r0, r3
    3cda:	d004      	beq.n	3ce6 <__swbuf_r+0x6a>
    3cdc:	89a3      	ldrh	r3, [r4, #12]
    3cde:	07db      	lsls	r3, r3, #31
    3ce0:	d51a      	bpl.n	3d18 <__swbuf_r+0x9c>
    3ce2:	2e0a      	cmp	r6, #10
    3ce4:	d118      	bne.n	3d18 <__swbuf_r+0x9c>
    3ce6:	0021      	movs	r1, r4
    3ce8:	0028      	movs	r0, r5
    3cea:	f000 f91d 	bl	3f28 <_fflush_r>
    3cee:	2800      	cmp	r0, #0
    3cf0:	d012      	beq.n	3d18 <__swbuf_r+0x9c>
    3cf2:	e00f      	b.n	3d14 <__swbuf_r+0x98>
    3cf4:	4b0a      	ldr	r3, [pc, #40]	; (3d20 <__swbuf_r+0xa4>)
    3cf6:	429c      	cmp	r4, r3
    3cf8:	d101      	bne.n	3cfe <__swbuf_r+0x82>
    3cfa:	68ac      	ldr	r4, [r5, #8]
    3cfc:	e7cd      	b.n	3c9a <__swbuf_r+0x1e>
    3cfe:	4b09      	ldr	r3, [pc, #36]	; (3d24 <__swbuf_r+0xa8>)
    3d00:	429c      	cmp	r4, r3
    3d02:	d1ca      	bne.n	3c9a <__swbuf_r+0x1e>
    3d04:	68ec      	ldr	r4, [r5, #12]
    3d06:	e7c8      	b.n	3c9a <__swbuf_r+0x1e>
    3d08:	0021      	movs	r1, r4
    3d0a:	0028      	movs	r0, r5
    3d0c:	f000 f80c 	bl	3d28 <__swsetup_r>
    3d10:	2800      	cmp	r0, #0
    3d12:	d0ca      	beq.n	3caa <__swbuf_r+0x2e>
    3d14:	2601      	movs	r6, #1
    3d16:	4276      	negs	r6, r6
    3d18:	0030      	movs	r0, r6
    3d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d1c:	00005594 	.word	0x00005594
    3d20:	000055b4 	.word	0x000055b4
    3d24:	00005574 	.word	0x00005574

00003d28 <__swsetup_r>:
    3d28:	4b36      	ldr	r3, [pc, #216]	; (3e04 <__swsetup_r+0xdc>)
    3d2a:	b570      	push	{r4, r5, r6, lr}
    3d2c:	681d      	ldr	r5, [r3, #0]
    3d2e:	0006      	movs	r6, r0
    3d30:	000c      	movs	r4, r1
    3d32:	2d00      	cmp	r5, #0
    3d34:	d005      	beq.n	3d42 <__swsetup_r+0x1a>
    3d36:	69ab      	ldr	r3, [r5, #24]
    3d38:	2b00      	cmp	r3, #0
    3d3a:	d102      	bne.n	3d42 <__swsetup_r+0x1a>
    3d3c:	0028      	movs	r0, r5
    3d3e:	f000 f961 	bl	4004 <__sinit>
    3d42:	4b31      	ldr	r3, [pc, #196]	; (3e08 <__swsetup_r+0xe0>)
    3d44:	429c      	cmp	r4, r3
    3d46:	d10f      	bne.n	3d68 <__swsetup_r+0x40>
    3d48:	686c      	ldr	r4, [r5, #4]
    3d4a:	230c      	movs	r3, #12
    3d4c:	5ee2      	ldrsh	r2, [r4, r3]
    3d4e:	b293      	uxth	r3, r2
    3d50:	0719      	lsls	r1, r3, #28
    3d52:	d42d      	bmi.n	3db0 <__swsetup_r+0x88>
    3d54:	06d9      	lsls	r1, r3, #27
    3d56:	d411      	bmi.n	3d7c <__swsetup_r+0x54>
    3d58:	2309      	movs	r3, #9
    3d5a:	2001      	movs	r0, #1
    3d5c:	6033      	str	r3, [r6, #0]
    3d5e:	3337      	adds	r3, #55	; 0x37
    3d60:	4313      	orrs	r3, r2
    3d62:	81a3      	strh	r3, [r4, #12]
    3d64:	4240      	negs	r0, r0
    3d66:	bd70      	pop	{r4, r5, r6, pc}
    3d68:	4b28      	ldr	r3, [pc, #160]	; (3e0c <__swsetup_r+0xe4>)
    3d6a:	429c      	cmp	r4, r3
    3d6c:	d101      	bne.n	3d72 <__swsetup_r+0x4a>
    3d6e:	68ac      	ldr	r4, [r5, #8]
    3d70:	e7eb      	b.n	3d4a <__swsetup_r+0x22>
    3d72:	4b27      	ldr	r3, [pc, #156]	; (3e10 <__swsetup_r+0xe8>)
    3d74:	429c      	cmp	r4, r3
    3d76:	d1e8      	bne.n	3d4a <__swsetup_r+0x22>
    3d78:	68ec      	ldr	r4, [r5, #12]
    3d7a:	e7e6      	b.n	3d4a <__swsetup_r+0x22>
    3d7c:	075b      	lsls	r3, r3, #29
    3d7e:	d513      	bpl.n	3da8 <__swsetup_r+0x80>
    3d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3d82:	2900      	cmp	r1, #0
    3d84:	d008      	beq.n	3d98 <__swsetup_r+0x70>
    3d86:	0023      	movs	r3, r4
    3d88:	3344      	adds	r3, #68	; 0x44
    3d8a:	4299      	cmp	r1, r3
    3d8c:	d002      	beq.n	3d94 <__swsetup_r+0x6c>
    3d8e:	0030      	movs	r0, r6
    3d90:	f000 fa44 	bl	421c <_free_r>
    3d94:	2300      	movs	r3, #0
    3d96:	6363      	str	r3, [r4, #52]	; 0x34
    3d98:	2224      	movs	r2, #36	; 0x24
    3d9a:	89a3      	ldrh	r3, [r4, #12]
    3d9c:	4393      	bics	r3, r2
    3d9e:	81a3      	strh	r3, [r4, #12]
    3da0:	2300      	movs	r3, #0
    3da2:	6063      	str	r3, [r4, #4]
    3da4:	6923      	ldr	r3, [r4, #16]
    3da6:	6023      	str	r3, [r4, #0]
    3da8:	2308      	movs	r3, #8
    3daa:	89a2      	ldrh	r2, [r4, #12]
    3dac:	4313      	orrs	r3, r2
    3dae:	81a3      	strh	r3, [r4, #12]
    3db0:	6923      	ldr	r3, [r4, #16]
    3db2:	2b00      	cmp	r3, #0
    3db4:	d10b      	bne.n	3dce <__swsetup_r+0xa6>
    3db6:	21a0      	movs	r1, #160	; 0xa0
    3db8:	2280      	movs	r2, #128	; 0x80
    3dba:	89a3      	ldrh	r3, [r4, #12]
    3dbc:	0089      	lsls	r1, r1, #2
    3dbe:	0092      	lsls	r2, r2, #2
    3dc0:	400b      	ands	r3, r1
    3dc2:	4293      	cmp	r3, r2
    3dc4:	d003      	beq.n	3dce <__swsetup_r+0xa6>
    3dc6:	0021      	movs	r1, r4
    3dc8:	0030      	movs	r0, r6
    3dca:	f000 f9d9 	bl	4180 <__smakebuf_r>
    3dce:	2301      	movs	r3, #1
    3dd0:	89a2      	ldrh	r2, [r4, #12]
    3dd2:	4013      	ands	r3, r2
    3dd4:	d011      	beq.n	3dfa <__swsetup_r+0xd2>
    3dd6:	2300      	movs	r3, #0
    3dd8:	60a3      	str	r3, [r4, #8]
    3dda:	6963      	ldr	r3, [r4, #20]
    3ddc:	425b      	negs	r3, r3
    3dde:	61a3      	str	r3, [r4, #24]
    3de0:	2000      	movs	r0, #0
    3de2:	6923      	ldr	r3, [r4, #16]
    3de4:	4283      	cmp	r3, r0
    3de6:	d1be      	bne.n	3d66 <__swsetup_r+0x3e>
    3de8:	230c      	movs	r3, #12
    3dea:	5ee2      	ldrsh	r2, [r4, r3]
    3dec:	0613      	lsls	r3, r2, #24
    3dee:	d5ba      	bpl.n	3d66 <__swsetup_r+0x3e>
    3df0:	2340      	movs	r3, #64	; 0x40
    3df2:	4313      	orrs	r3, r2
    3df4:	81a3      	strh	r3, [r4, #12]
    3df6:	3801      	subs	r0, #1
    3df8:	e7b5      	b.n	3d66 <__swsetup_r+0x3e>
    3dfa:	0792      	lsls	r2, r2, #30
    3dfc:	d400      	bmi.n	3e00 <__swsetup_r+0xd8>
    3dfe:	6963      	ldr	r3, [r4, #20]
    3e00:	60a3      	str	r3, [r4, #8]
    3e02:	e7ed      	b.n	3de0 <__swsetup_r+0xb8>
    3e04:	2000000c 	.word	0x2000000c
    3e08:	00005594 	.word	0x00005594
    3e0c:	000055b4 	.word	0x000055b4
    3e10:	00005574 	.word	0x00005574

00003e14 <__sflush_r>:
    3e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3e16:	898a      	ldrh	r2, [r1, #12]
    3e18:	0005      	movs	r5, r0
    3e1a:	000c      	movs	r4, r1
    3e1c:	0713      	lsls	r3, r2, #28
    3e1e:	d460      	bmi.n	3ee2 <__sflush_r+0xce>
    3e20:	684b      	ldr	r3, [r1, #4]
    3e22:	2b00      	cmp	r3, #0
    3e24:	dc04      	bgt.n	3e30 <__sflush_r+0x1c>
    3e26:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3e28:	2b00      	cmp	r3, #0
    3e2a:	dc01      	bgt.n	3e30 <__sflush_r+0x1c>
    3e2c:	2000      	movs	r0, #0
    3e2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3e30:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3e32:	2f00      	cmp	r7, #0
    3e34:	d0fa      	beq.n	3e2c <__sflush_r+0x18>
    3e36:	2300      	movs	r3, #0
    3e38:	682e      	ldr	r6, [r5, #0]
    3e3a:	602b      	str	r3, [r5, #0]
    3e3c:	2380      	movs	r3, #128	; 0x80
    3e3e:	015b      	lsls	r3, r3, #5
    3e40:	401a      	ands	r2, r3
    3e42:	d034      	beq.n	3eae <__sflush_r+0x9a>
    3e44:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3e46:	89a3      	ldrh	r3, [r4, #12]
    3e48:	075b      	lsls	r3, r3, #29
    3e4a:	d506      	bpl.n	3e5a <__sflush_r+0x46>
    3e4c:	6863      	ldr	r3, [r4, #4]
    3e4e:	1ac0      	subs	r0, r0, r3
    3e50:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3e52:	2b00      	cmp	r3, #0
    3e54:	d001      	beq.n	3e5a <__sflush_r+0x46>
    3e56:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3e58:	1ac0      	subs	r0, r0, r3
    3e5a:	0002      	movs	r2, r0
    3e5c:	6a21      	ldr	r1, [r4, #32]
    3e5e:	2300      	movs	r3, #0
    3e60:	0028      	movs	r0, r5
    3e62:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3e64:	47b8      	blx	r7
    3e66:	89a1      	ldrh	r1, [r4, #12]
    3e68:	1c43      	adds	r3, r0, #1
    3e6a:	d106      	bne.n	3e7a <__sflush_r+0x66>
    3e6c:	682b      	ldr	r3, [r5, #0]
    3e6e:	2b1d      	cmp	r3, #29
    3e70:	d831      	bhi.n	3ed6 <__sflush_r+0xc2>
    3e72:	4a2c      	ldr	r2, [pc, #176]	; (3f24 <__sflush_r+0x110>)
    3e74:	40da      	lsrs	r2, r3
    3e76:	07d3      	lsls	r3, r2, #31
    3e78:	d52d      	bpl.n	3ed6 <__sflush_r+0xc2>
    3e7a:	2300      	movs	r3, #0
    3e7c:	6063      	str	r3, [r4, #4]
    3e7e:	6923      	ldr	r3, [r4, #16]
    3e80:	6023      	str	r3, [r4, #0]
    3e82:	04cb      	lsls	r3, r1, #19
    3e84:	d505      	bpl.n	3e92 <__sflush_r+0x7e>
    3e86:	1c43      	adds	r3, r0, #1
    3e88:	d102      	bne.n	3e90 <__sflush_r+0x7c>
    3e8a:	682b      	ldr	r3, [r5, #0]
    3e8c:	2b00      	cmp	r3, #0
    3e8e:	d100      	bne.n	3e92 <__sflush_r+0x7e>
    3e90:	6560      	str	r0, [r4, #84]	; 0x54
    3e92:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3e94:	602e      	str	r6, [r5, #0]
    3e96:	2900      	cmp	r1, #0
    3e98:	d0c8      	beq.n	3e2c <__sflush_r+0x18>
    3e9a:	0023      	movs	r3, r4
    3e9c:	3344      	adds	r3, #68	; 0x44
    3e9e:	4299      	cmp	r1, r3
    3ea0:	d002      	beq.n	3ea8 <__sflush_r+0x94>
    3ea2:	0028      	movs	r0, r5
    3ea4:	f000 f9ba 	bl	421c <_free_r>
    3ea8:	2000      	movs	r0, #0
    3eaa:	6360      	str	r0, [r4, #52]	; 0x34
    3eac:	e7bf      	b.n	3e2e <__sflush_r+0x1a>
    3eae:	2301      	movs	r3, #1
    3eb0:	6a21      	ldr	r1, [r4, #32]
    3eb2:	0028      	movs	r0, r5
    3eb4:	47b8      	blx	r7
    3eb6:	1c43      	adds	r3, r0, #1
    3eb8:	d1c5      	bne.n	3e46 <__sflush_r+0x32>
    3eba:	682b      	ldr	r3, [r5, #0]
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	d0c2      	beq.n	3e46 <__sflush_r+0x32>
    3ec0:	2b1d      	cmp	r3, #29
    3ec2:	d001      	beq.n	3ec8 <__sflush_r+0xb4>
    3ec4:	2b16      	cmp	r3, #22
    3ec6:	d101      	bne.n	3ecc <__sflush_r+0xb8>
    3ec8:	602e      	str	r6, [r5, #0]
    3eca:	e7af      	b.n	3e2c <__sflush_r+0x18>
    3ecc:	2340      	movs	r3, #64	; 0x40
    3ece:	89a2      	ldrh	r2, [r4, #12]
    3ed0:	4313      	orrs	r3, r2
    3ed2:	81a3      	strh	r3, [r4, #12]
    3ed4:	e7ab      	b.n	3e2e <__sflush_r+0x1a>
    3ed6:	2340      	movs	r3, #64	; 0x40
    3ed8:	430b      	orrs	r3, r1
    3eda:	2001      	movs	r0, #1
    3edc:	81a3      	strh	r3, [r4, #12]
    3ede:	4240      	negs	r0, r0
    3ee0:	e7a5      	b.n	3e2e <__sflush_r+0x1a>
    3ee2:	690f      	ldr	r7, [r1, #16]
    3ee4:	2f00      	cmp	r7, #0
    3ee6:	d0a1      	beq.n	3e2c <__sflush_r+0x18>
    3ee8:	680b      	ldr	r3, [r1, #0]
    3eea:	600f      	str	r7, [r1, #0]
    3eec:	1bdb      	subs	r3, r3, r7
    3eee:	9301      	str	r3, [sp, #4]
    3ef0:	2300      	movs	r3, #0
    3ef2:	0792      	lsls	r2, r2, #30
    3ef4:	d100      	bne.n	3ef8 <__sflush_r+0xe4>
    3ef6:	694b      	ldr	r3, [r1, #20]
    3ef8:	60a3      	str	r3, [r4, #8]
    3efa:	9b01      	ldr	r3, [sp, #4]
    3efc:	2b00      	cmp	r3, #0
    3efe:	dc00      	bgt.n	3f02 <__sflush_r+0xee>
    3f00:	e794      	b.n	3e2c <__sflush_r+0x18>
    3f02:	9b01      	ldr	r3, [sp, #4]
    3f04:	003a      	movs	r2, r7
    3f06:	6a21      	ldr	r1, [r4, #32]
    3f08:	0028      	movs	r0, r5
    3f0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3f0c:	47b0      	blx	r6
    3f0e:	2800      	cmp	r0, #0
    3f10:	dc03      	bgt.n	3f1a <__sflush_r+0x106>
    3f12:	2340      	movs	r3, #64	; 0x40
    3f14:	89a2      	ldrh	r2, [r4, #12]
    3f16:	4313      	orrs	r3, r2
    3f18:	e7df      	b.n	3eda <__sflush_r+0xc6>
    3f1a:	9b01      	ldr	r3, [sp, #4]
    3f1c:	183f      	adds	r7, r7, r0
    3f1e:	1a1b      	subs	r3, r3, r0
    3f20:	9301      	str	r3, [sp, #4]
    3f22:	e7ea      	b.n	3efa <__sflush_r+0xe6>
    3f24:	20400001 	.word	0x20400001

00003f28 <_fflush_r>:
    3f28:	690b      	ldr	r3, [r1, #16]
    3f2a:	b570      	push	{r4, r5, r6, lr}
    3f2c:	0005      	movs	r5, r0
    3f2e:	000c      	movs	r4, r1
    3f30:	2b00      	cmp	r3, #0
    3f32:	d101      	bne.n	3f38 <_fflush_r+0x10>
    3f34:	2000      	movs	r0, #0
    3f36:	bd70      	pop	{r4, r5, r6, pc}
    3f38:	2800      	cmp	r0, #0
    3f3a:	d004      	beq.n	3f46 <_fflush_r+0x1e>
    3f3c:	6983      	ldr	r3, [r0, #24]
    3f3e:	2b00      	cmp	r3, #0
    3f40:	d101      	bne.n	3f46 <_fflush_r+0x1e>
    3f42:	f000 f85f 	bl	4004 <__sinit>
    3f46:	4b0b      	ldr	r3, [pc, #44]	; (3f74 <_fflush_r+0x4c>)
    3f48:	429c      	cmp	r4, r3
    3f4a:	d109      	bne.n	3f60 <_fflush_r+0x38>
    3f4c:	686c      	ldr	r4, [r5, #4]
    3f4e:	220c      	movs	r2, #12
    3f50:	5ea3      	ldrsh	r3, [r4, r2]
    3f52:	2b00      	cmp	r3, #0
    3f54:	d0ee      	beq.n	3f34 <_fflush_r+0xc>
    3f56:	0021      	movs	r1, r4
    3f58:	0028      	movs	r0, r5
    3f5a:	f7ff ff5b 	bl	3e14 <__sflush_r>
    3f5e:	e7ea      	b.n	3f36 <_fflush_r+0xe>
    3f60:	4b05      	ldr	r3, [pc, #20]	; (3f78 <_fflush_r+0x50>)
    3f62:	429c      	cmp	r4, r3
    3f64:	d101      	bne.n	3f6a <_fflush_r+0x42>
    3f66:	68ac      	ldr	r4, [r5, #8]
    3f68:	e7f1      	b.n	3f4e <_fflush_r+0x26>
    3f6a:	4b04      	ldr	r3, [pc, #16]	; (3f7c <_fflush_r+0x54>)
    3f6c:	429c      	cmp	r4, r3
    3f6e:	d1ee      	bne.n	3f4e <_fflush_r+0x26>
    3f70:	68ec      	ldr	r4, [r5, #12]
    3f72:	e7ec      	b.n	3f4e <_fflush_r+0x26>
    3f74:	00005594 	.word	0x00005594
    3f78:	000055b4 	.word	0x000055b4
    3f7c:	00005574 	.word	0x00005574

00003f80 <_cleanup_r>:
    3f80:	b510      	push	{r4, lr}
    3f82:	4902      	ldr	r1, [pc, #8]	; (3f8c <_cleanup_r+0xc>)
    3f84:	f000 f8b2 	bl	40ec <_fwalk_reent>
    3f88:	bd10      	pop	{r4, pc}
    3f8a:	46c0      	nop			; (mov r8, r8)
    3f8c:	00003f29 	.word	0x00003f29

00003f90 <std.isra.0>:
    3f90:	2300      	movs	r3, #0
    3f92:	b510      	push	{r4, lr}
    3f94:	0004      	movs	r4, r0
    3f96:	6003      	str	r3, [r0, #0]
    3f98:	6043      	str	r3, [r0, #4]
    3f9a:	6083      	str	r3, [r0, #8]
    3f9c:	8181      	strh	r1, [r0, #12]
    3f9e:	6643      	str	r3, [r0, #100]	; 0x64
    3fa0:	81c2      	strh	r2, [r0, #14]
    3fa2:	6103      	str	r3, [r0, #16]
    3fa4:	6143      	str	r3, [r0, #20]
    3fa6:	6183      	str	r3, [r0, #24]
    3fa8:	0019      	movs	r1, r3
    3faa:	2208      	movs	r2, #8
    3fac:	305c      	adds	r0, #92	; 0x5c
    3fae:	f7ff fd0f 	bl	39d0 <memset>
    3fb2:	4b05      	ldr	r3, [pc, #20]	; (3fc8 <std.isra.0+0x38>)
    3fb4:	6224      	str	r4, [r4, #32]
    3fb6:	6263      	str	r3, [r4, #36]	; 0x24
    3fb8:	4b04      	ldr	r3, [pc, #16]	; (3fcc <std.isra.0+0x3c>)
    3fba:	62a3      	str	r3, [r4, #40]	; 0x28
    3fbc:	4b04      	ldr	r3, [pc, #16]	; (3fd0 <std.isra.0+0x40>)
    3fbe:	62e3      	str	r3, [r4, #44]	; 0x2c
    3fc0:	4b04      	ldr	r3, [pc, #16]	; (3fd4 <std.isra.0+0x44>)
    3fc2:	6323      	str	r3, [r4, #48]	; 0x30
    3fc4:	bd10      	pop	{r4, pc}
    3fc6:	46c0      	nop			; (mov r8, r8)
    3fc8:	00004995 	.word	0x00004995
    3fcc:	000049bd 	.word	0x000049bd
    3fd0:	000049f5 	.word	0x000049f5
    3fd4:	00004a21 	.word	0x00004a21

00003fd8 <__sfmoreglue>:
    3fd8:	b570      	push	{r4, r5, r6, lr}
    3fda:	2568      	movs	r5, #104	; 0x68
    3fdc:	1e4a      	subs	r2, r1, #1
    3fde:	4355      	muls	r5, r2
    3fe0:	000e      	movs	r6, r1
    3fe2:	0029      	movs	r1, r5
    3fe4:	3174      	adds	r1, #116	; 0x74
    3fe6:	f000 f963 	bl	42b0 <_malloc_r>
    3fea:	1e04      	subs	r4, r0, #0
    3fec:	d008      	beq.n	4000 <__sfmoreglue+0x28>
    3fee:	2100      	movs	r1, #0
    3ff0:	002a      	movs	r2, r5
    3ff2:	6001      	str	r1, [r0, #0]
    3ff4:	6046      	str	r6, [r0, #4]
    3ff6:	300c      	adds	r0, #12
    3ff8:	60a0      	str	r0, [r4, #8]
    3ffa:	3268      	adds	r2, #104	; 0x68
    3ffc:	f7ff fce8 	bl	39d0 <memset>
    4000:	0020      	movs	r0, r4
    4002:	bd70      	pop	{r4, r5, r6, pc}

00004004 <__sinit>:
    4004:	6983      	ldr	r3, [r0, #24]
    4006:	b513      	push	{r0, r1, r4, lr}
    4008:	0004      	movs	r4, r0
    400a:	2b00      	cmp	r3, #0
    400c:	d128      	bne.n	4060 <__sinit+0x5c>
    400e:	6483      	str	r3, [r0, #72]	; 0x48
    4010:	64c3      	str	r3, [r0, #76]	; 0x4c
    4012:	6503      	str	r3, [r0, #80]	; 0x50
    4014:	4b13      	ldr	r3, [pc, #76]	; (4064 <__sinit+0x60>)
    4016:	4a14      	ldr	r2, [pc, #80]	; (4068 <__sinit+0x64>)
    4018:	681b      	ldr	r3, [r3, #0]
    401a:	6282      	str	r2, [r0, #40]	; 0x28
    401c:	9301      	str	r3, [sp, #4]
    401e:	4298      	cmp	r0, r3
    4020:	d101      	bne.n	4026 <__sinit+0x22>
    4022:	2301      	movs	r3, #1
    4024:	6183      	str	r3, [r0, #24]
    4026:	0020      	movs	r0, r4
    4028:	f000 f820 	bl	406c <__sfp>
    402c:	6060      	str	r0, [r4, #4]
    402e:	0020      	movs	r0, r4
    4030:	f000 f81c 	bl	406c <__sfp>
    4034:	60a0      	str	r0, [r4, #8]
    4036:	0020      	movs	r0, r4
    4038:	f000 f818 	bl	406c <__sfp>
    403c:	2200      	movs	r2, #0
    403e:	60e0      	str	r0, [r4, #12]
    4040:	2104      	movs	r1, #4
    4042:	6860      	ldr	r0, [r4, #4]
    4044:	f7ff ffa4 	bl	3f90 <std.isra.0>
    4048:	2201      	movs	r2, #1
    404a:	2109      	movs	r1, #9
    404c:	68a0      	ldr	r0, [r4, #8]
    404e:	f7ff ff9f 	bl	3f90 <std.isra.0>
    4052:	2202      	movs	r2, #2
    4054:	2112      	movs	r1, #18
    4056:	68e0      	ldr	r0, [r4, #12]
    4058:	f7ff ff9a 	bl	3f90 <std.isra.0>
    405c:	2301      	movs	r3, #1
    405e:	61a3      	str	r3, [r4, #24]
    4060:	bd13      	pop	{r0, r1, r4, pc}
    4062:	46c0      	nop			; (mov r8, r8)
    4064:	00005570 	.word	0x00005570
    4068:	00003f81 	.word	0x00003f81

0000406c <__sfp>:
    406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    406e:	4b1e      	ldr	r3, [pc, #120]	; (40e8 <__sfp+0x7c>)
    4070:	0007      	movs	r7, r0
    4072:	681e      	ldr	r6, [r3, #0]
    4074:	69b3      	ldr	r3, [r6, #24]
    4076:	2b00      	cmp	r3, #0
    4078:	d102      	bne.n	4080 <__sfp+0x14>
    407a:	0030      	movs	r0, r6
    407c:	f7ff ffc2 	bl	4004 <__sinit>
    4080:	3648      	adds	r6, #72	; 0x48
    4082:	68b4      	ldr	r4, [r6, #8]
    4084:	6873      	ldr	r3, [r6, #4]
    4086:	3b01      	subs	r3, #1
    4088:	d504      	bpl.n	4094 <__sfp+0x28>
    408a:	6833      	ldr	r3, [r6, #0]
    408c:	2b00      	cmp	r3, #0
    408e:	d007      	beq.n	40a0 <__sfp+0x34>
    4090:	6836      	ldr	r6, [r6, #0]
    4092:	e7f6      	b.n	4082 <__sfp+0x16>
    4094:	220c      	movs	r2, #12
    4096:	5ea5      	ldrsh	r5, [r4, r2]
    4098:	2d00      	cmp	r5, #0
    409a:	d00d      	beq.n	40b8 <__sfp+0x4c>
    409c:	3468      	adds	r4, #104	; 0x68
    409e:	e7f2      	b.n	4086 <__sfp+0x1a>
    40a0:	2104      	movs	r1, #4
    40a2:	0038      	movs	r0, r7
    40a4:	f7ff ff98 	bl	3fd8 <__sfmoreglue>
    40a8:	6030      	str	r0, [r6, #0]
    40aa:	2800      	cmp	r0, #0
    40ac:	d1f0      	bne.n	4090 <__sfp+0x24>
    40ae:	230c      	movs	r3, #12
    40b0:	0004      	movs	r4, r0
    40b2:	603b      	str	r3, [r7, #0]
    40b4:	0020      	movs	r0, r4
    40b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40b8:	2301      	movs	r3, #1
    40ba:	0020      	movs	r0, r4
    40bc:	425b      	negs	r3, r3
    40be:	81e3      	strh	r3, [r4, #14]
    40c0:	3302      	adds	r3, #2
    40c2:	81a3      	strh	r3, [r4, #12]
    40c4:	6665      	str	r5, [r4, #100]	; 0x64
    40c6:	6025      	str	r5, [r4, #0]
    40c8:	60a5      	str	r5, [r4, #8]
    40ca:	6065      	str	r5, [r4, #4]
    40cc:	6125      	str	r5, [r4, #16]
    40ce:	6165      	str	r5, [r4, #20]
    40d0:	61a5      	str	r5, [r4, #24]
    40d2:	2208      	movs	r2, #8
    40d4:	0029      	movs	r1, r5
    40d6:	305c      	adds	r0, #92	; 0x5c
    40d8:	f7ff fc7a 	bl	39d0 <memset>
    40dc:	6365      	str	r5, [r4, #52]	; 0x34
    40de:	63a5      	str	r5, [r4, #56]	; 0x38
    40e0:	64a5      	str	r5, [r4, #72]	; 0x48
    40e2:	64e5      	str	r5, [r4, #76]	; 0x4c
    40e4:	e7e6      	b.n	40b4 <__sfp+0x48>
    40e6:	46c0      	nop			; (mov r8, r8)
    40e8:	00005570 	.word	0x00005570

000040ec <_fwalk_reent>:
    40ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    40ee:	0004      	movs	r4, r0
    40f0:	0007      	movs	r7, r0
    40f2:	2600      	movs	r6, #0
    40f4:	9101      	str	r1, [sp, #4]
    40f6:	3448      	adds	r4, #72	; 0x48
    40f8:	2c00      	cmp	r4, #0
    40fa:	d101      	bne.n	4100 <_fwalk_reent+0x14>
    40fc:	0030      	movs	r0, r6
    40fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4100:	6863      	ldr	r3, [r4, #4]
    4102:	68a5      	ldr	r5, [r4, #8]
    4104:	9300      	str	r3, [sp, #0]
    4106:	9b00      	ldr	r3, [sp, #0]
    4108:	3b01      	subs	r3, #1
    410a:	9300      	str	r3, [sp, #0]
    410c:	d501      	bpl.n	4112 <_fwalk_reent+0x26>
    410e:	6824      	ldr	r4, [r4, #0]
    4110:	e7f2      	b.n	40f8 <_fwalk_reent+0xc>
    4112:	89ab      	ldrh	r3, [r5, #12]
    4114:	2b01      	cmp	r3, #1
    4116:	d908      	bls.n	412a <_fwalk_reent+0x3e>
    4118:	220e      	movs	r2, #14
    411a:	5eab      	ldrsh	r3, [r5, r2]
    411c:	3301      	adds	r3, #1
    411e:	d004      	beq.n	412a <_fwalk_reent+0x3e>
    4120:	0029      	movs	r1, r5
    4122:	0038      	movs	r0, r7
    4124:	9b01      	ldr	r3, [sp, #4]
    4126:	4798      	blx	r3
    4128:	4306      	orrs	r6, r0
    412a:	3568      	adds	r5, #104	; 0x68
    412c:	e7eb      	b.n	4106 <_fwalk_reent+0x1a>
	...

00004130 <__swhatbuf_r>:
    4130:	b570      	push	{r4, r5, r6, lr}
    4132:	000e      	movs	r6, r1
    4134:	001d      	movs	r5, r3
    4136:	230e      	movs	r3, #14
    4138:	5ec9      	ldrsh	r1, [r1, r3]
    413a:	b090      	sub	sp, #64	; 0x40
    413c:	0014      	movs	r4, r2
    413e:	2900      	cmp	r1, #0
    4140:	da07      	bge.n	4152 <__swhatbuf_r+0x22>
    4142:	2300      	movs	r3, #0
    4144:	602b      	str	r3, [r5, #0]
    4146:	89b3      	ldrh	r3, [r6, #12]
    4148:	061b      	lsls	r3, r3, #24
    414a:	d411      	bmi.n	4170 <__swhatbuf_r+0x40>
    414c:	2380      	movs	r3, #128	; 0x80
    414e:	00db      	lsls	r3, r3, #3
    4150:	e00f      	b.n	4172 <__swhatbuf_r+0x42>
    4152:	aa01      	add	r2, sp, #4
    4154:	f000 fc90 	bl	4a78 <_fstat_r>
    4158:	2800      	cmp	r0, #0
    415a:	dbf2      	blt.n	4142 <__swhatbuf_r+0x12>
    415c:	22f0      	movs	r2, #240	; 0xf0
    415e:	9b02      	ldr	r3, [sp, #8]
    4160:	0212      	lsls	r2, r2, #8
    4162:	4013      	ands	r3, r2
    4164:	4a05      	ldr	r2, [pc, #20]	; (417c <__swhatbuf_r+0x4c>)
    4166:	189b      	adds	r3, r3, r2
    4168:	425a      	negs	r2, r3
    416a:	4153      	adcs	r3, r2
    416c:	602b      	str	r3, [r5, #0]
    416e:	e7ed      	b.n	414c <__swhatbuf_r+0x1c>
    4170:	2340      	movs	r3, #64	; 0x40
    4172:	2000      	movs	r0, #0
    4174:	6023      	str	r3, [r4, #0]
    4176:	b010      	add	sp, #64	; 0x40
    4178:	bd70      	pop	{r4, r5, r6, pc}
    417a:	46c0      	nop			; (mov r8, r8)
    417c:	ffffe000 	.word	0xffffe000

00004180 <__smakebuf_r>:
    4180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4182:	2602      	movs	r6, #2
    4184:	898b      	ldrh	r3, [r1, #12]
    4186:	0005      	movs	r5, r0
    4188:	000c      	movs	r4, r1
    418a:	4233      	tst	r3, r6
    418c:	d006      	beq.n	419c <__smakebuf_r+0x1c>
    418e:	0023      	movs	r3, r4
    4190:	3347      	adds	r3, #71	; 0x47
    4192:	6023      	str	r3, [r4, #0]
    4194:	6123      	str	r3, [r4, #16]
    4196:	2301      	movs	r3, #1
    4198:	6163      	str	r3, [r4, #20]
    419a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    419c:	ab01      	add	r3, sp, #4
    419e:	466a      	mov	r2, sp
    41a0:	f7ff ffc6 	bl	4130 <__swhatbuf_r>
    41a4:	9900      	ldr	r1, [sp, #0]
    41a6:	0007      	movs	r7, r0
    41a8:	0028      	movs	r0, r5
    41aa:	f000 f881 	bl	42b0 <_malloc_r>
    41ae:	2800      	cmp	r0, #0
    41b0:	d108      	bne.n	41c4 <__smakebuf_r+0x44>
    41b2:	220c      	movs	r2, #12
    41b4:	5ea3      	ldrsh	r3, [r4, r2]
    41b6:	059a      	lsls	r2, r3, #22
    41b8:	d4ef      	bmi.n	419a <__smakebuf_r+0x1a>
    41ba:	2203      	movs	r2, #3
    41bc:	4393      	bics	r3, r2
    41be:	431e      	orrs	r6, r3
    41c0:	81a6      	strh	r6, [r4, #12]
    41c2:	e7e4      	b.n	418e <__smakebuf_r+0xe>
    41c4:	4b0f      	ldr	r3, [pc, #60]	; (4204 <__smakebuf_r+0x84>)
    41c6:	62ab      	str	r3, [r5, #40]	; 0x28
    41c8:	2380      	movs	r3, #128	; 0x80
    41ca:	89a2      	ldrh	r2, [r4, #12]
    41cc:	6020      	str	r0, [r4, #0]
    41ce:	4313      	orrs	r3, r2
    41d0:	81a3      	strh	r3, [r4, #12]
    41d2:	9b00      	ldr	r3, [sp, #0]
    41d4:	6120      	str	r0, [r4, #16]
    41d6:	6163      	str	r3, [r4, #20]
    41d8:	9b01      	ldr	r3, [sp, #4]
    41da:	2b00      	cmp	r3, #0
    41dc:	d00d      	beq.n	41fa <__smakebuf_r+0x7a>
    41de:	230e      	movs	r3, #14
    41e0:	5ee1      	ldrsh	r1, [r4, r3]
    41e2:	0028      	movs	r0, r5
    41e4:	f000 fc5a 	bl	4a9c <_isatty_r>
    41e8:	2800      	cmp	r0, #0
    41ea:	d006      	beq.n	41fa <__smakebuf_r+0x7a>
    41ec:	2203      	movs	r2, #3
    41ee:	89a3      	ldrh	r3, [r4, #12]
    41f0:	4393      	bics	r3, r2
    41f2:	001a      	movs	r2, r3
    41f4:	2301      	movs	r3, #1
    41f6:	4313      	orrs	r3, r2
    41f8:	81a3      	strh	r3, [r4, #12]
    41fa:	89a0      	ldrh	r0, [r4, #12]
    41fc:	4338      	orrs	r0, r7
    41fe:	81a0      	strh	r0, [r4, #12]
    4200:	e7cb      	b.n	419a <__smakebuf_r+0x1a>
    4202:	46c0      	nop			; (mov r8, r8)
    4204:	00003f81 	.word	0x00003f81

00004208 <malloc>:
    4208:	b510      	push	{r4, lr}
    420a:	4b03      	ldr	r3, [pc, #12]	; (4218 <malloc+0x10>)
    420c:	0001      	movs	r1, r0
    420e:	6818      	ldr	r0, [r3, #0]
    4210:	f000 f84e 	bl	42b0 <_malloc_r>
    4214:	bd10      	pop	{r4, pc}
    4216:	46c0      	nop			; (mov r8, r8)
    4218:	2000000c 	.word	0x2000000c

0000421c <_free_r>:
    421c:	b570      	push	{r4, r5, r6, lr}
    421e:	0005      	movs	r5, r0
    4220:	2900      	cmp	r1, #0
    4222:	d010      	beq.n	4246 <_free_r+0x2a>
    4224:	1f0c      	subs	r4, r1, #4
    4226:	6823      	ldr	r3, [r4, #0]
    4228:	2b00      	cmp	r3, #0
    422a:	da00      	bge.n	422e <_free_r+0x12>
    422c:	18e4      	adds	r4, r4, r3
    422e:	0028      	movs	r0, r5
    4230:	f000 fc65 	bl	4afe <__malloc_lock>
    4234:	4a1d      	ldr	r2, [pc, #116]	; (42ac <_free_r+0x90>)
    4236:	6813      	ldr	r3, [r2, #0]
    4238:	2b00      	cmp	r3, #0
    423a:	d105      	bne.n	4248 <_free_r+0x2c>
    423c:	6063      	str	r3, [r4, #4]
    423e:	6014      	str	r4, [r2, #0]
    4240:	0028      	movs	r0, r5
    4242:	f000 fc5d 	bl	4b00 <__malloc_unlock>
    4246:	bd70      	pop	{r4, r5, r6, pc}
    4248:	42a3      	cmp	r3, r4
    424a:	d909      	bls.n	4260 <_free_r+0x44>
    424c:	6821      	ldr	r1, [r4, #0]
    424e:	1860      	adds	r0, r4, r1
    4250:	4283      	cmp	r3, r0
    4252:	d1f3      	bne.n	423c <_free_r+0x20>
    4254:	6818      	ldr	r0, [r3, #0]
    4256:	685b      	ldr	r3, [r3, #4]
    4258:	1841      	adds	r1, r0, r1
    425a:	6021      	str	r1, [r4, #0]
    425c:	e7ee      	b.n	423c <_free_r+0x20>
    425e:	0013      	movs	r3, r2
    4260:	685a      	ldr	r2, [r3, #4]
    4262:	2a00      	cmp	r2, #0
    4264:	d001      	beq.n	426a <_free_r+0x4e>
    4266:	42a2      	cmp	r2, r4
    4268:	d9f9      	bls.n	425e <_free_r+0x42>
    426a:	6819      	ldr	r1, [r3, #0]
    426c:	1858      	adds	r0, r3, r1
    426e:	42a0      	cmp	r0, r4
    4270:	d10b      	bne.n	428a <_free_r+0x6e>
    4272:	6820      	ldr	r0, [r4, #0]
    4274:	1809      	adds	r1, r1, r0
    4276:	1858      	adds	r0, r3, r1
    4278:	6019      	str	r1, [r3, #0]
    427a:	4282      	cmp	r2, r0
    427c:	d1e0      	bne.n	4240 <_free_r+0x24>
    427e:	6810      	ldr	r0, [r2, #0]
    4280:	6852      	ldr	r2, [r2, #4]
    4282:	1841      	adds	r1, r0, r1
    4284:	6019      	str	r1, [r3, #0]
    4286:	605a      	str	r2, [r3, #4]
    4288:	e7da      	b.n	4240 <_free_r+0x24>
    428a:	42a0      	cmp	r0, r4
    428c:	d902      	bls.n	4294 <_free_r+0x78>
    428e:	230c      	movs	r3, #12
    4290:	602b      	str	r3, [r5, #0]
    4292:	e7d5      	b.n	4240 <_free_r+0x24>
    4294:	6821      	ldr	r1, [r4, #0]
    4296:	1860      	adds	r0, r4, r1
    4298:	4282      	cmp	r2, r0
    429a:	d103      	bne.n	42a4 <_free_r+0x88>
    429c:	6810      	ldr	r0, [r2, #0]
    429e:	6852      	ldr	r2, [r2, #4]
    42a0:	1841      	adds	r1, r0, r1
    42a2:	6021      	str	r1, [r4, #0]
    42a4:	6062      	str	r2, [r4, #4]
    42a6:	605c      	str	r4, [r3, #4]
    42a8:	e7ca      	b.n	4240 <_free_r+0x24>
    42aa:	46c0      	nop			; (mov r8, r8)
    42ac:	20000114 	.word	0x20000114

000042b0 <_malloc_r>:
    42b0:	2303      	movs	r3, #3
    42b2:	b570      	push	{r4, r5, r6, lr}
    42b4:	1ccd      	adds	r5, r1, #3
    42b6:	439d      	bics	r5, r3
    42b8:	3508      	adds	r5, #8
    42ba:	0006      	movs	r6, r0
    42bc:	2d0c      	cmp	r5, #12
    42be:	d21e      	bcs.n	42fe <_malloc_r+0x4e>
    42c0:	250c      	movs	r5, #12
    42c2:	42a9      	cmp	r1, r5
    42c4:	d81d      	bhi.n	4302 <_malloc_r+0x52>
    42c6:	0030      	movs	r0, r6
    42c8:	f000 fc19 	bl	4afe <__malloc_lock>
    42cc:	4a25      	ldr	r2, [pc, #148]	; (4364 <_malloc_r+0xb4>)
    42ce:	6814      	ldr	r4, [r2, #0]
    42d0:	0021      	movs	r1, r4
    42d2:	2900      	cmp	r1, #0
    42d4:	d119      	bne.n	430a <_malloc_r+0x5a>
    42d6:	4c24      	ldr	r4, [pc, #144]	; (4368 <_malloc_r+0xb8>)
    42d8:	6823      	ldr	r3, [r4, #0]
    42da:	2b00      	cmp	r3, #0
    42dc:	d103      	bne.n	42e6 <_malloc_r+0x36>
    42de:	0030      	movs	r0, r6
    42e0:	f000 fb46 	bl	4970 <_sbrk_r>
    42e4:	6020      	str	r0, [r4, #0]
    42e6:	0029      	movs	r1, r5
    42e8:	0030      	movs	r0, r6
    42ea:	f000 fb41 	bl	4970 <_sbrk_r>
    42ee:	1c43      	adds	r3, r0, #1
    42f0:	d12c      	bne.n	434c <_malloc_r+0x9c>
    42f2:	230c      	movs	r3, #12
    42f4:	0030      	movs	r0, r6
    42f6:	6033      	str	r3, [r6, #0]
    42f8:	f000 fc02 	bl	4b00 <__malloc_unlock>
    42fc:	e003      	b.n	4306 <_malloc_r+0x56>
    42fe:	2d00      	cmp	r5, #0
    4300:	dadf      	bge.n	42c2 <_malloc_r+0x12>
    4302:	230c      	movs	r3, #12
    4304:	6033      	str	r3, [r6, #0]
    4306:	2000      	movs	r0, #0
    4308:	bd70      	pop	{r4, r5, r6, pc}
    430a:	680b      	ldr	r3, [r1, #0]
    430c:	1b5b      	subs	r3, r3, r5
    430e:	d41a      	bmi.n	4346 <_malloc_r+0x96>
    4310:	2b0b      	cmp	r3, #11
    4312:	d903      	bls.n	431c <_malloc_r+0x6c>
    4314:	600b      	str	r3, [r1, #0]
    4316:	18cc      	adds	r4, r1, r3
    4318:	6025      	str	r5, [r4, #0]
    431a:	e003      	b.n	4324 <_malloc_r+0x74>
    431c:	428c      	cmp	r4, r1
    431e:	d10e      	bne.n	433e <_malloc_r+0x8e>
    4320:	6863      	ldr	r3, [r4, #4]
    4322:	6013      	str	r3, [r2, #0]
    4324:	0030      	movs	r0, r6
    4326:	f000 fbeb 	bl	4b00 <__malloc_unlock>
    432a:	0020      	movs	r0, r4
    432c:	2207      	movs	r2, #7
    432e:	300b      	adds	r0, #11
    4330:	1d23      	adds	r3, r4, #4
    4332:	4390      	bics	r0, r2
    4334:	1ac3      	subs	r3, r0, r3
    4336:	d0e7      	beq.n	4308 <_malloc_r+0x58>
    4338:	425a      	negs	r2, r3
    433a:	50e2      	str	r2, [r4, r3]
    433c:	e7e4      	b.n	4308 <_malloc_r+0x58>
    433e:	684b      	ldr	r3, [r1, #4]
    4340:	6063      	str	r3, [r4, #4]
    4342:	000c      	movs	r4, r1
    4344:	e7ee      	b.n	4324 <_malloc_r+0x74>
    4346:	000c      	movs	r4, r1
    4348:	6849      	ldr	r1, [r1, #4]
    434a:	e7c2      	b.n	42d2 <_malloc_r+0x22>
    434c:	2303      	movs	r3, #3
    434e:	1cc4      	adds	r4, r0, #3
    4350:	439c      	bics	r4, r3
    4352:	42a0      	cmp	r0, r4
    4354:	d0e0      	beq.n	4318 <_malloc_r+0x68>
    4356:	1a21      	subs	r1, r4, r0
    4358:	0030      	movs	r0, r6
    435a:	f000 fb09 	bl	4970 <_sbrk_r>
    435e:	1c43      	adds	r3, r0, #1
    4360:	d1da      	bne.n	4318 <_malloc_r+0x68>
    4362:	e7c6      	b.n	42f2 <_malloc_r+0x42>
    4364:	20000114 	.word	0x20000114
    4368:	20000118 	.word	0x20000118

0000436c <__sfputc_r>:
    436c:	6893      	ldr	r3, [r2, #8]
    436e:	b510      	push	{r4, lr}
    4370:	3b01      	subs	r3, #1
    4372:	6093      	str	r3, [r2, #8]
    4374:	2b00      	cmp	r3, #0
    4376:	da05      	bge.n	4384 <__sfputc_r+0x18>
    4378:	6994      	ldr	r4, [r2, #24]
    437a:	42a3      	cmp	r3, r4
    437c:	db08      	blt.n	4390 <__sfputc_r+0x24>
    437e:	b2cb      	uxtb	r3, r1
    4380:	2b0a      	cmp	r3, #10
    4382:	d005      	beq.n	4390 <__sfputc_r+0x24>
    4384:	6813      	ldr	r3, [r2, #0]
    4386:	1c58      	adds	r0, r3, #1
    4388:	6010      	str	r0, [r2, #0]
    438a:	7019      	strb	r1, [r3, #0]
    438c:	b2c8      	uxtb	r0, r1
    438e:	bd10      	pop	{r4, pc}
    4390:	f7ff fc74 	bl	3c7c <__swbuf_r>
    4394:	e7fb      	b.n	438e <__sfputc_r+0x22>

00004396 <__sfputs_r>:
    4396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4398:	0006      	movs	r6, r0
    439a:	000f      	movs	r7, r1
    439c:	0014      	movs	r4, r2
    439e:	18d5      	adds	r5, r2, r3
    43a0:	42ac      	cmp	r4, r5
    43a2:	d101      	bne.n	43a8 <__sfputs_r+0x12>
    43a4:	2000      	movs	r0, #0
    43a6:	e007      	b.n	43b8 <__sfputs_r+0x22>
    43a8:	7821      	ldrb	r1, [r4, #0]
    43aa:	003a      	movs	r2, r7
    43ac:	0030      	movs	r0, r6
    43ae:	f7ff ffdd 	bl	436c <__sfputc_r>
    43b2:	3401      	adds	r4, #1
    43b4:	1c43      	adds	r3, r0, #1
    43b6:	d1f3      	bne.n	43a0 <__sfputs_r+0xa>
    43b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000043bc <_vfiprintf_r>:
    43bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    43be:	b09f      	sub	sp, #124	; 0x7c
    43c0:	0006      	movs	r6, r0
    43c2:	000f      	movs	r7, r1
    43c4:	0014      	movs	r4, r2
    43c6:	9305      	str	r3, [sp, #20]
    43c8:	2800      	cmp	r0, #0
    43ca:	d004      	beq.n	43d6 <_vfiprintf_r+0x1a>
    43cc:	6983      	ldr	r3, [r0, #24]
    43ce:	2b00      	cmp	r3, #0
    43d0:	d101      	bne.n	43d6 <_vfiprintf_r+0x1a>
    43d2:	f7ff fe17 	bl	4004 <__sinit>
    43d6:	4b7f      	ldr	r3, [pc, #508]	; (45d4 <_vfiprintf_r+0x218>)
    43d8:	429f      	cmp	r7, r3
    43da:	d15c      	bne.n	4496 <_vfiprintf_r+0xda>
    43dc:	6877      	ldr	r7, [r6, #4]
    43de:	89bb      	ldrh	r3, [r7, #12]
    43e0:	071b      	lsls	r3, r3, #28
    43e2:	d562      	bpl.n	44aa <_vfiprintf_r+0xee>
    43e4:	693b      	ldr	r3, [r7, #16]
    43e6:	2b00      	cmp	r3, #0
    43e8:	d05f      	beq.n	44aa <_vfiprintf_r+0xee>
    43ea:	2300      	movs	r3, #0
    43ec:	ad06      	add	r5, sp, #24
    43ee:	616b      	str	r3, [r5, #20]
    43f0:	3320      	adds	r3, #32
    43f2:	766b      	strb	r3, [r5, #25]
    43f4:	3310      	adds	r3, #16
    43f6:	76ab      	strb	r3, [r5, #26]
    43f8:	9402      	str	r4, [sp, #8]
    43fa:	9c02      	ldr	r4, [sp, #8]
    43fc:	7823      	ldrb	r3, [r4, #0]
    43fe:	2b00      	cmp	r3, #0
    4400:	d15d      	bne.n	44be <_vfiprintf_r+0x102>
    4402:	9b02      	ldr	r3, [sp, #8]
    4404:	1ae3      	subs	r3, r4, r3
    4406:	9304      	str	r3, [sp, #16]
    4408:	d00d      	beq.n	4426 <_vfiprintf_r+0x6a>
    440a:	9b04      	ldr	r3, [sp, #16]
    440c:	9a02      	ldr	r2, [sp, #8]
    440e:	0039      	movs	r1, r7
    4410:	0030      	movs	r0, r6
    4412:	f7ff ffc0 	bl	4396 <__sfputs_r>
    4416:	1c43      	adds	r3, r0, #1
    4418:	d100      	bne.n	441c <_vfiprintf_r+0x60>
    441a:	e0cc      	b.n	45b6 <_vfiprintf_r+0x1fa>
    441c:	696a      	ldr	r2, [r5, #20]
    441e:	9b04      	ldr	r3, [sp, #16]
    4420:	4694      	mov	ip, r2
    4422:	4463      	add	r3, ip
    4424:	616b      	str	r3, [r5, #20]
    4426:	7823      	ldrb	r3, [r4, #0]
    4428:	2b00      	cmp	r3, #0
    442a:	d100      	bne.n	442e <_vfiprintf_r+0x72>
    442c:	e0c3      	b.n	45b6 <_vfiprintf_r+0x1fa>
    442e:	2201      	movs	r2, #1
    4430:	2300      	movs	r3, #0
    4432:	4252      	negs	r2, r2
    4434:	606a      	str	r2, [r5, #4]
    4436:	a902      	add	r1, sp, #8
    4438:	3254      	adds	r2, #84	; 0x54
    443a:	1852      	adds	r2, r2, r1
    443c:	3401      	adds	r4, #1
    443e:	602b      	str	r3, [r5, #0]
    4440:	60eb      	str	r3, [r5, #12]
    4442:	60ab      	str	r3, [r5, #8]
    4444:	7013      	strb	r3, [r2, #0]
    4446:	65ab      	str	r3, [r5, #88]	; 0x58
    4448:	7821      	ldrb	r1, [r4, #0]
    444a:	2205      	movs	r2, #5
    444c:	4862      	ldr	r0, [pc, #392]	; (45d8 <_vfiprintf_r+0x21c>)
    444e:	f000 fb4b 	bl	4ae8 <memchr>
    4452:	1c63      	adds	r3, r4, #1
    4454:	469c      	mov	ip, r3
    4456:	2800      	cmp	r0, #0
    4458:	d135      	bne.n	44c6 <_vfiprintf_r+0x10a>
    445a:	6829      	ldr	r1, [r5, #0]
    445c:	06cb      	lsls	r3, r1, #27
    445e:	d504      	bpl.n	446a <_vfiprintf_r+0xae>
    4460:	2353      	movs	r3, #83	; 0x53
    4462:	aa02      	add	r2, sp, #8
    4464:	3020      	adds	r0, #32
    4466:	189b      	adds	r3, r3, r2
    4468:	7018      	strb	r0, [r3, #0]
    446a:	070b      	lsls	r3, r1, #28
    446c:	d504      	bpl.n	4478 <_vfiprintf_r+0xbc>
    446e:	2353      	movs	r3, #83	; 0x53
    4470:	202b      	movs	r0, #43	; 0x2b
    4472:	aa02      	add	r2, sp, #8
    4474:	189b      	adds	r3, r3, r2
    4476:	7018      	strb	r0, [r3, #0]
    4478:	7823      	ldrb	r3, [r4, #0]
    447a:	2b2a      	cmp	r3, #42	; 0x2a
    447c:	d02c      	beq.n	44d8 <_vfiprintf_r+0x11c>
    447e:	2000      	movs	r0, #0
    4480:	210a      	movs	r1, #10
    4482:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4484:	7822      	ldrb	r2, [r4, #0]
    4486:	3a30      	subs	r2, #48	; 0x30
    4488:	2a09      	cmp	r2, #9
    448a:	d800      	bhi.n	448e <_vfiprintf_r+0xd2>
    448c:	e06b      	b.n	4566 <_vfiprintf_r+0x1aa>
    448e:	2800      	cmp	r0, #0
    4490:	d02a      	beq.n	44e8 <_vfiprintf_r+0x12c>
    4492:	9309      	str	r3, [sp, #36]	; 0x24
    4494:	e028      	b.n	44e8 <_vfiprintf_r+0x12c>
    4496:	4b51      	ldr	r3, [pc, #324]	; (45dc <_vfiprintf_r+0x220>)
    4498:	429f      	cmp	r7, r3
    449a:	d101      	bne.n	44a0 <_vfiprintf_r+0xe4>
    449c:	68b7      	ldr	r7, [r6, #8]
    449e:	e79e      	b.n	43de <_vfiprintf_r+0x22>
    44a0:	4b4f      	ldr	r3, [pc, #316]	; (45e0 <_vfiprintf_r+0x224>)
    44a2:	429f      	cmp	r7, r3
    44a4:	d19b      	bne.n	43de <_vfiprintf_r+0x22>
    44a6:	68f7      	ldr	r7, [r6, #12]
    44a8:	e799      	b.n	43de <_vfiprintf_r+0x22>
    44aa:	0039      	movs	r1, r7
    44ac:	0030      	movs	r0, r6
    44ae:	f7ff fc3b 	bl	3d28 <__swsetup_r>
    44b2:	2800      	cmp	r0, #0
    44b4:	d099      	beq.n	43ea <_vfiprintf_r+0x2e>
    44b6:	2001      	movs	r0, #1
    44b8:	4240      	negs	r0, r0
    44ba:	b01f      	add	sp, #124	; 0x7c
    44bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44be:	2b25      	cmp	r3, #37	; 0x25
    44c0:	d09f      	beq.n	4402 <_vfiprintf_r+0x46>
    44c2:	3401      	adds	r4, #1
    44c4:	e79a      	b.n	43fc <_vfiprintf_r+0x40>
    44c6:	4b44      	ldr	r3, [pc, #272]	; (45d8 <_vfiprintf_r+0x21c>)
    44c8:	6829      	ldr	r1, [r5, #0]
    44ca:	1ac0      	subs	r0, r0, r3
    44cc:	2301      	movs	r3, #1
    44ce:	4083      	lsls	r3, r0
    44d0:	430b      	orrs	r3, r1
    44d2:	602b      	str	r3, [r5, #0]
    44d4:	4664      	mov	r4, ip
    44d6:	e7b7      	b.n	4448 <_vfiprintf_r+0x8c>
    44d8:	9b05      	ldr	r3, [sp, #20]
    44da:	1d18      	adds	r0, r3, #4
    44dc:	681b      	ldr	r3, [r3, #0]
    44de:	9005      	str	r0, [sp, #20]
    44e0:	2b00      	cmp	r3, #0
    44e2:	db3a      	blt.n	455a <_vfiprintf_r+0x19e>
    44e4:	9309      	str	r3, [sp, #36]	; 0x24
    44e6:	4664      	mov	r4, ip
    44e8:	7823      	ldrb	r3, [r4, #0]
    44ea:	2b2e      	cmp	r3, #46	; 0x2e
    44ec:	d10b      	bne.n	4506 <_vfiprintf_r+0x14a>
    44ee:	7863      	ldrb	r3, [r4, #1]
    44f0:	1c62      	adds	r2, r4, #1
    44f2:	2b2a      	cmp	r3, #42	; 0x2a
    44f4:	d13f      	bne.n	4576 <_vfiprintf_r+0x1ba>
    44f6:	9b05      	ldr	r3, [sp, #20]
    44f8:	3402      	adds	r4, #2
    44fa:	1d1a      	adds	r2, r3, #4
    44fc:	681b      	ldr	r3, [r3, #0]
    44fe:	9205      	str	r2, [sp, #20]
    4500:	2b00      	cmp	r3, #0
    4502:	db35      	blt.n	4570 <_vfiprintf_r+0x1b4>
    4504:	9307      	str	r3, [sp, #28]
    4506:	7821      	ldrb	r1, [r4, #0]
    4508:	2203      	movs	r2, #3
    450a:	4836      	ldr	r0, [pc, #216]	; (45e4 <_vfiprintf_r+0x228>)
    450c:	f000 faec 	bl	4ae8 <memchr>
    4510:	2800      	cmp	r0, #0
    4512:	d007      	beq.n	4524 <_vfiprintf_r+0x168>
    4514:	4b33      	ldr	r3, [pc, #204]	; (45e4 <_vfiprintf_r+0x228>)
    4516:	682a      	ldr	r2, [r5, #0]
    4518:	1ac0      	subs	r0, r0, r3
    451a:	2340      	movs	r3, #64	; 0x40
    451c:	4083      	lsls	r3, r0
    451e:	4313      	orrs	r3, r2
    4520:	602b      	str	r3, [r5, #0]
    4522:	3401      	adds	r4, #1
    4524:	7821      	ldrb	r1, [r4, #0]
    4526:	1c63      	adds	r3, r4, #1
    4528:	2206      	movs	r2, #6
    452a:	482f      	ldr	r0, [pc, #188]	; (45e8 <_vfiprintf_r+0x22c>)
    452c:	9302      	str	r3, [sp, #8]
    452e:	7629      	strb	r1, [r5, #24]
    4530:	f000 fada 	bl	4ae8 <memchr>
    4534:	2800      	cmp	r0, #0
    4536:	d044      	beq.n	45c2 <_vfiprintf_r+0x206>
    4538:	4b2c      	ldr	r3, [pc, #176]	; (45ec <_vfiprintf_r+0x230>)
    453a:	2b00      	cmp	r3, #0
    453c:	d12f      	bne.n	459e <_vfiprintf_r+0x1e2>
    453e:	6829      	ldr	r1, [r5, #0]
    4540:	9b05      	ldr	r3, [sp, #20]
    4542:	2207      	movs	r2, #7
    4544:	05c9      	lsls	r1, r1, #23
    4546:	d528      	bpl.n	459a <_vfiprintf_r+0x1de>
    4548:	189b      	adds	r3, r3, r2
    454a:	4393      	bics	r3, r2
    454c:	3308      	adds	r3, #8
    454e:	9305      	str	r3, [sp, #20]
    4550:	696b      	ldr	r3, [r5, #20]
    4552:	9a03      	ldr	r2, [sp, #12]
    4554:	189b      	adds	r3, r3, r2
    4556:	616b      	str	r3, [r5, #20]
    4558:	e74f      	b.n	43fa <_vfiprintf_r+0x3e>
    455a:	425b      	negs	r3, r3
    455c:	60eb      	str	r3, [r5, #12]
    455e:	2302      	movs	r3, #2
    4560:	430b      	orrs	r3, r1
    4562:	602b      	str	r3, [r5, #0]
    4564:	e7bf      	b.n	44e6 <_vfiprintf_r+0x12a>
    4566:	434b      	muls	r3, r1
    4568:	3401      	adds	r4, #1
    456a:	189b      	adds	r3, r3, r2
    456c:	2001      	movs	r0, #1
    456e:	e789      	b.n	4484 <_vfiprintf_r+0xc8>
    4570:	2301      	movs	r3, #1
    4572:	425b      	negs	r3, r3
    4574:	e7c6      	b.n	4504 <_vfiprintf_r+0x148>
    4576:	2300      	movs	r3, #0
    4578:	0014      	movs	r4, r2
    457a:	200a      	movs	r0, #10
    457c:	001a      	movs	r2, r3
    457e:	606b      	str	r3, [r5, #4]
    4580:	7821      	ldrb	r1, [r4, #0]
    4582:	3930      	subs	r1, #48	; 0x30
    4584:	2909      	cmp	r1, #9
    4586:	d903      	bls.n	4590 <_vfiprintf_r+0x1d4>
    4588:	2b00      	cmp	r3, #0
    458a:	d0bc      	beq.n	4506 <_vfiprintf_r+0x14a>
    458c:	9207      	str	r2, [sp, #28]
    458e:	e7ba      	b.n	4506 <_vfiprintf_r+0x14a>
    4590:	4342      	muls	r2, r0
    4592:	3401      	adds	r4, #1
    4594:	1852      	adds	r2, r2, r1
    4596:	2301      	movs	r3, #1
    4598:	e7f2      	b.n	4580 <_vfiprintf_r+0x1c4>
    459a:	3307      	adds	r3, #7
    459c:	e7d5      	b.n	454a <_vfiprintf_r+0x18e>
    459e:	ab05      	add	r3, sp, #20
    45a0:	9300      	str	r3, [sp, #0]
    45a2:	003a      	movs	r2, r7
    45a4:	4b12      	ldr	r3, [pc, #72]	; (45f0 <_vfiprintf_r+0x234>)
    45a6:	0029      	movs	r1, r5
    45a8:	0030      	movs	r0, r6
    45aa:	e000      	b.n	45ae <_vfiprintf_r+0x1f2>
    45ac:	bf00      	nop
    45ae:	9003      	str	r0, [sp, #12]
    45b0:	9b03      	ldr	r3, [sp, #12]
    45b2:	3301      	adds	r3, #1
    45b4:	d1cc      	bne.n	4550 <_vfiprintf_r+0x194>
    45b6:	89bb      	ldrh	r3, [r7, #12]
    45b8:	065b      	lsls	r3, r3, #25
    45ba:	d500      	bpl.n	45be <_vfiprintf_r+0x202>
    45bc:	e77b      	b.n	44b6 <_vfiprintf_r+0xfa>
    45be:	980b      	ldr	r0, [sp, #44]	; 0x2c
    45c0:	e77b      	b.n	44ba <_vfiprintf_r+0xfe>
    45c2:	ab05      	add	r3, sp, #20
    45c4:	9300      	str	r3, [sp, #0]
    45c6:	003a      	movs	r2, r7
    45c8:	4b09      	ldr	r3, [pc, #36]	; (45f0 <_vfiprintf_r+0x234>)
    45ca:	0029      	movs	r1, r5
    45cc:	0030      	movs	r0, r6
    45ce:	f000 f87f 	bl	46d0 <_printf_i>
    45d2:	e7ec      	b.n	45ae <_vfiprintf_r+0x1f2>
    45d4:	00005594 	.word	0x00005594
    45d8:	000055d4 	.word	0x000055d4
    45dc:	000055b4 	.word	0x000055b4
    45e0:	00005574 	.word	0x00005574
    45e4:	000055da 	.word	0x000055da
    45e8:	000055de 	.word	0x000055de
    45ec:	00000000 	.word	0x00000000
    45f0:	00004397 	.word	0x00004397

000045f4 <_printf_common>:
    45f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    45f6:	0015      	movs	r5, r2
    45f8:	9301      	str	r3, [sp, #4]
    45fa:	688a      	ldr	r2, [r1, #8]
    45fc:	690b      	ldr	r3, [r1, #16]
    45fe:	9000      	str	r0, [sp, #0]
    4600:	000c      	movs	r4, r1
    4602:	4293      	cmp	r3, r2
    4604:	da00      	bge.n	4608 <_printf_common+0x14>
    4606:	0013      	movs	r3, r2
    4608:	0022      	movs	r2, r4
    460a:	602b      	str	r3, [r5, #0]
    460c:	3243      	adds	r2, #67	; 0x43
    460e:	7812      	ldrb	r2, [r2, #0]
    4610:	2a00      	cmp	r2, #0
    4612:	d001      	beq.n	4618 <_printf_common+0x24>
    4614:	3301      	adds	r3, #1
    4616:	602b      	str	r3, [r5, #0]
    4618:	6823      	ldr	r3, [r4, #0]
    461a:	069b      	lsls	r3, r3, #26
    461c:	d502      	bpl.n	4624 <_printf_common+0x30>
    461e:	682b      	ldr	r3, [r5, #0]
    4620:	3302      	adds	r3, #2
    4622:	602b      	str	r3, [r5, #0]
    4624:	2706      	movs	r7, #6
    4626:	6823      	ldr	r3, [r4, #0]
    4628:	401f      	ands	r7, r3
    462a:	d027      	beq.n	467c <_printf_common+0x88>
    462c:	0023      	movs	r3, r4
    462e:	3343      	adds	r3, #67	; 0x43
    4630:	781b      	ldrb	r3, [r3, #0]
    4632:	1e5a      	subs	r2, r3, #1
    4634:	4193      	sbcs	r3, r2
    4636:	6822      	ldr	r2, [r4, #0]
    4638:	0692      	lsls	r2, r2, #26
    463a:	d430      	bmi.n	469e <_printf_common+0xaa>
    463c:	0022      	movs	r2, r4
    463e:	9901      	ldr	r1, [sp, #4]
    4640:	3243      	adds	r2, #67	; 0x43
    4642:	9800      	ldr	r0, [sp, #0]
    4644:	9e08      	ldr	r6, [sp, #32]
    4646:	47b0      	blx	r6
    4648:	1c43      	adds	r3, r0, #1
    464a:	d025      	beq.n	4698 <_printf_common+0xa4>
    464c:	2306      	movs	r3, #6
    464e:	6820      	ldr	r0, [r4, #0]
    4650:	682a      	ldr	r2, [r5, #0]
    4652:	68e1      	ldr	r1, [r4, #12]
    4654:	4003      	ands	r3, r0
    4656:	2500      	movs	r5, #0
    4658:	2b04      	cmp	r3, #4
    465a:	d103      	bne.n	4664 <_printf_common+0x70>
    465c:	1a8d      	subs	r5, r1, r2
    465e:	43eb      	mvns	r3, r5
    4660:	17db      	asrs	r3, r3, #31
    4662:	401d      	ands	r5, r3
    4664:	68a3      	ldr	r3, [r4, #8]
    4666:	6922      	ldr	r2, [r4, #16]
    4668:	4293      	cmp	r3, r2
    466a:	dd01      	ble.n	4670 <_printf_common+0x7c>
    466c:	1a9b      	subs	r3, r3, r2
    466e:	18ed      	adds	r5, r5, r3
    4670:	2700      	movs	r7, #0
    4672:	42bd      	cmp	r5, r7
    4674:	d120      	bne.n	46b8 <_printf_common+0xc4>
    4676:	2000      	movs	r0, #0
    4678:	e010      	b.n	469c <_printf_common+0xa8>
    467a:	3701      	adds	r7, #1
    467c:	68e3      	ldr	r3, [r4, #12]
    467e:	682a      	ldr	r2, [r5, #0]
    4680:	1a9b      	subs	r3, r3, r2
    4682:	429f      	cmp	r7, r3
    4684:	dad2      	bge.n	462c <_printf_common+0x38>
    4686:	0022      	movs	r2, r4
    4688:	2301      	movs	r3, #1
    468a:	3219      	adds	r2, #25
    468c:	9901      	ldr	r1, [sp, #4]
    468e:	9800      	ldr	r0, [sp, #0]
    4690:	9e08      	ldr	r6, [sp, #32]
    4692:	47b0      	blx	r6
    4694:	1c43      	adds	r3, r0, #1
    4696:	d1f0      	bne.n	467a <_printf_common+0x86>
    4698:	2001      	movs	r0, #1
    469a:	4240      	negs	r0, r0
    469c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    469e:	2030      	movs	r0, #48	; 0x30
    46a0:	18e1      	adds	r1, r4, r3
    46a2:	3143      	adds	r1, #67	; 0x43
    46a4:	7008      	strb	r0, [r1, #0]
    46a6:	0021      	movs	r1, r4
    46a8:	1c5a      	adds	r2, r3, #1
    46aa:	3145      	adds	r1, #69	; 0x45
    46ac:	7809      	ldrb	r1, [r1, #0]
    46ae:	18a2      	adds	r2, r4, r2
    46b0:	3243      	adds	r2, #67	; 0x43
    46b2:	3302      	adds	r3, #2
    46b4:	7011      	strb	r1, [r2, #0]
    46b6:	e7c1      	b.n	463c <_printf_common+0x48>
    46b8:	0022      	movs	r2, r4
    46ba:	2301      	movs	r3, #1
    46bc:	321a      	adds	r2, #26
    46be:	9901      	ldr	r1, [sp, #4]
    46c0:	9800      	ldr	r0, [sp, #0]
    46c2:	9e08      	ldr	r6, [sp, #32]
    46c4:	47b0      	blx	r6
    46c6:	1c43      	adds	r3, r0, #1
    46c8:	d0e6      	beq.n	4698 <_printf_common+0xa4>
    46ca:	3701      	adds	r7, #1
    46cc:	e7d1      	b.n	4672 <_printf_common+0x7e>
	...

000046d0 <_printf_i>:
    46d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    46d2:	b08b      	sub	sp, #44	; 0x2c
    46d4:	9206      	str	r2, [sp, #24]
    46d6:	000a      	movs	r2, r1
    46d8:	3243      	adds	r2, #67	; 0x43
    46da:	9307      	str	r3, [sp, #28]
    46dc:	9005      	str	r0, [sp, #20]
    46de:	9204      	str	r2, [sp, #16]
    46e0:	7e0a      	ldrb	r2, [r1, #24]
    46e2:	000c      	movs	r4, r1
    46e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    46e6:	2a6e      	cmp	r2, #110	; 0x6e
    46e8:	d100      	bne.n	46ec <_printf_i+0x1c>
    46ea:	e08f      	b.n	480c <_printf_i+0x13c>
    46ec:	d817      	bhi.n	471e <_printf_i+0x4e>
    46ee:	2a63      	cmp	r2, #99	; 0x63
    46f0:	d02c      	beq.n	474c <_printf_i+0x7c>
    46f2:	d808      	bhi.n	4706 <_printf_i+0x36>
    46f4:	2a00      	cmp	r2, #0
    46f6:	d100      	bne.n	46fa <_printf_i+0x2a>
    46f8:	e099      	b.n	482e <_printf_i+0x15e>
    46fa:	2a58      	cmp	r2, #88	; 0x58
    46fc:	d054      	beq.n	47a8 <_printf_i+0xd8>
    46fe:	0026      	movs	r6, r4
    4700:	3642      	adds	r6, #66	; 0x42
    4702:	7032      	strb	r2, [r6, #0]
    4704:	e029      	b.n	475a <_printf_i+0x8a>
    4706:	2a64      	cmp	r2, #100	; 0x64
    4708:	d001      	beq.n	470e <_printf_i+0x3e>
    470a:	2a69      	cmp	r2, #105	; 0x69
    470c:	d1f7      	bne.n	46fe <_printf_i+0x2e>
    470e:	6821      	ldr	r1, [r4, #0]
    4710:	681a      	ldr	r2, [r3, #0]
    4712:	0608      	lsls	r0, r1, #24
    4714:	d523      	bpl.n	475e <_printf_i+0x8e>
    4716:	1d11      	adds	r1, r2, #4
    4718:	6019      	str	r1, [r3, #0]
    471a:	6815      	ldr	r5, [r2, #0]
    471c:	e025      	b.n	476a <_printf_i+0x9a>
    471e:	2a73      	cmp	r2, #115	; 0x73
    4720:	d100      	bne.n	4724 <_printf_i+0x54>
    4722:	e088      	b.n	4836 <_printf_i+0x166>
    4724:	d808      	bhi.n	4738 <_printf_i+0x68>
    4726:	2a6f      	cmp	r2, #111	; 0x6f
    4728:	d029      	beq.n	477e <_printf_i+0xae>
    472a:	2a70      	cmp	r2, #112	; 0x70
    472c:	d1e7      	bne.n	46fe <_printf_i+0x2e>
    472e:	2220      	movs	r2, #32
    4730:	6809      	ldr	r1, [r1, #0]
    4732:	430a      	orrs	r2, r1
    4734:	6022      	str	r2, [r4, #0]
    4736:	e003      	b.n	4740 <_printf_i+0x70>
    4738:	2a75      	cmp	r2, #117	; 0x75
    473a:	d020      	beq.n	477e <_printf_i+0xae>
    473c:	2a78      	cmp	r2, #120	; 0x78
    473e:	d1de      	bne.n	46fe <_printf_i+0x2e>
    4740:	0022      	movs	r2, r4
    4742:	2178      	movs	r1, #120	; 0x78
    4744:	3245      	adds	r2, #69	; 0x45
    4746:	7011      	strb	r1, [r2, #0]
    4748:	4a6c      	ldr	r2, [pc, #432]	; (48fc <_printf_i+0x22c>)
    474a:	e030      	b.n	47ae <_printf_i+0xde>
    474c:	000e      	movs	r6, r1
    474e:	681a      	ldr	r2, [r3, #0]
    4750:	3642      	adds	r6, #66	; 0x42
    4752:	1d11      	adds	r1, r2, #4
    4754:	6019      	str	r1, [r3, #0]
    4756:	6813      	ldr	r3, [r2, #0]
    4758:	7033      	strb	r3, [r6, #0]
    475a:	2301      	movs	r3, #1
    475c:	e079      	b.n	4852 <_printf_i+0x182>
    475e:	0649      	lsls	r1, r1, #25
    4760:	d5d9      	bpl.n	4716 <_printf_i+0x46>
    4762:	1d11      	adds	r1, r2, #4
    4764:	6019      	str	r1, [r3, #0]
    4766:	2300      	movs	r3, #0
    4768:	5ed5      	ldrsh	r5, [r2, r3]
    476a:	2d00      	cmp	r5, #0
    476c:	da03      	bge.n	4776 <_printf_i+0xa6>
    476e:	232d      	movs	r3, #45	; 0x2d
    4770:	9a04      	ldr	r2, [sp, #16]
    4772:	426d      	negs	r5, r5
    4774:	7013      	strb	r3, [r2, #0]
    4776:	4b62      	ldr	r3, [pc, #392]	; (4900 <_printf_i+0x230>)
    4778:	270a      	movs	r7, #10
    477a:	9303      	str	r3, [sp, #12]
    477c:	e02f      	b.n	47de <_printf_i+0x10e>
    477e:	6820      	ldr	r0, [r4, #0]
    4780:	6819      	ldr	r1, [r3, #0]
    4782:	0605      	lsls	r5, r0, #24
    4784:	d503      	bpl.n	478e <_printf_i+0xbe>
    4786:	1d08      	adds	r0, r1, #4
    4788:	6018      	str	r0, [r3, #0]
    478a:	680d      	ldr	r5, [r1, #0]
    478c:	e005      	b.n	479a <_printf_i+0xca>
    478e:	0640      	lsls	r0, r0, #25
    4790:	d5f9      	bpl.n	4786 <_printf_i+0xb6>
    4792:	680d      	ldr	r5, [r1, #0]
    4794:	1d08      	adds	r0, r1, #4
    4796:	6018      	str	r0, [r3, #0]
    4798:	b2ad      	uxth	r5, r5
    479a:	4b59      	ldr	r3, [pc, #356]	; (4900 <_printf_i+0x230>)
    479c:	2708      	movs	r7, #8
    479e:	9303      	str	r3, [sp, #12]
    47a0:	2a6f      	cmp	r2, #111	; 0x6f
    47a2:	d018      	beq.n	47d6 <_printf_i+0x106>
    47a4:	270a      	movs	r7, #10
    47a6:	e016      	b.n	47d6 <_printf_i+0x106>
    47a8:	3145      	adds	r1, #69	; 0x45
    47aa:	700a      	strb	r2, [r1, #0]
    47ac:	4a54      	ldr	r2, [pc, #336]	; (4900 <_printf_i+0x230>)
    47ae:	9203      	str	r2, [sp, #12]
    47b0:	681a      	ldr	r2, [r3, #0]
    47b2:	6821      	ldr	r1, [r4, #0]
    47b4:	1d10      	adds	r0, r2, #4
    47b6:	6018      	str	r0, [r3, #0]
    47b8:	6815      	ldr	r5, [r2, #0]
    47ba:	0608      	lsls	r0, r1, #24
    47bc:	d522      	bpl.n	4804 <_printf_i+0x134>
    47be:	07cb      	lsls	r3, r1, #31
    47c0:	d502      	bpl.n	47c8 <_printf_i+0xf8>
    47c2:	2320      	movs	r3, #32
    47c4:	4319      	orrs	r1, r3
    47c6:	6021      	str	r1, [r4, #0]
    47c8:	2710      	movs	r7, #16
    47ca:	2d00      	cmp	r5, #0
    47cc:	d103      	bne.n	47d6 <_printf_i+0x106>
    47ce:	2320      	movs	r3, #32
    47d0:	6822      	ldr	r2, [r4, #0]
    47d2:	439a      	bics	r2, r3
    47d4:	6022      	str	r2, [r4, #0]
    47d6:	0023      	movs	r3, r4
    47d8:	2200      	movs	r2, #0
    47da:	3343      	adds	r3, #67	; 0x43
    47dc:	701a      	strb	r2, [r3, #0]
    47de:	6863      	ldr	r3, [r4, #4]
    47e0:	60a3      	str	r3, [r4, #8]
    47e2:	2b00      	cmp	r3, #0
    47e4:	db5c      	blt.n	48a0 <_printf_i+0x1d0>
    47e6:	2204      	movs	r2, #4
    47e8:	6821      	ldr	r1, [r4, #0]
    47ea:	4391      	bics	r1, r2
    47ec:	6021      	str	r1, [r4, #0]
    47ee:	2d00      	cmp	r5, #0
    47f0:	d158      	bne.n	48a4 <_printf_i+0x1d4>
    47f2:	9e04      	ldr	r6, [sp, #16]
    47f4:	2b00      	cmp	r3, #0
    47f6:	d064      	beq.n	48c2 <_printf_i+0x1f2>
    47f8:	0026      	movs	r6, r4
    47fa:	9b03      	ldr	r3, [sp, #12]
    47fc:	3642      	adds	r6, #66	; 0x42
    47fe:	781b      	ldrb	r3, [r3, #0]
    4800:	7033      	strb	r3, [r6, #0]
    4802:	e05e      	b.n	48c2 <_printf_i+0x1f2>
    4804:	0648      	lsls	r0, r1, #25
    4806:	d5da      	bpl.n	47be <_printf_i+0xee>
    4808:	b2ad      	uxth	r5, r5
    480a:	e7d8      	b.n	47be <_printf_i+0xee>
    480c:	6809      	ldr	r1, [r1, #0]
    480e:	681a      	ldr	r2, [r3, #0]
    4810:	0608      	lsls	r0, r1, #24
    4812:	d505      	bpl.n	4820 <_printf_i+0x150>
    4814:	1d11      	adds	r1, r2, #4
    4816:	6019      	str	r1, [r3, #0]
    4818:	6813      	ldr	r3, [r2, #0]
    481a:	6962      	ldr	r2, [r4, #20]
    481c:	601a      	str	r2, [r3, #0]
    481e:	e006      	b.n	482e <_printf_i+0x15e>
    4820:	0649      	lsls	r1, r1, #25
    4822:	d5f7      	bpl.n	4814 <_printf_i+0x144>
    4824:	1d11      	adds	r1, r2, #4
    4826:	6019      	str	r1, [r3, #0]
    4828:	6813      	ldr	r3, [r2, #0]
    482a:	8aa2      	ldrh	r2, [r4, #20]
    482c:	801a      	strh	r2, [r3, #0]
    482e:	2300      	movs	r3, #0
    4830:	9e04      	ldr	r6, [sp, #16]
    4832:	6123      	str	r3, [r4, #16]
    4834:	e054      	b.n	48e0 <_printf_i+0x210>
    4836:	681a      	ldr	r2, [r3, #0]
    4838:	1d11      	adds	r1, r2, #4
    483a:	6019      	str	r1, [r3, #0]
    483c:	6816      	ldr	r6, [r2, #0]
    483e:	2100      	movs	r1, #0
    4840:	6862      	ldr	r2, [r4, #4]
    4842:	0030      	movs	r0, r6
    4844:	f000 f950 	bl	4ae8 <memchr>
    4848:	2800      	cmp	r0, #0
    484a:	d001      	beq.n	4850 <_printf_i+0x180>
    484c:	1b80      	subs	r0, r0, r6
    484e:	6060      	str	r0, [r4, #4]
    4850:	6863      	ldr	r3, [r4, #4]
    4852:	6123      	str	r3, [r4, #16]
    4854:	2300      	movs	r3, #0
    4856:	9a04      	ldr	r2, [sp, #16]
    4858:	7013      	strb	r3, [r2, #0]
    485a:	e041      	b.n	48e0 <_printf_i+0x210>
    485c:	6923      	ldr	r3, [r4, #16]
    485e:	0032      	movs	r2, r6
    4860:	9906      	ldr	r1, [sp, #24]
    4862:	9805      	ldr	r0, [sp, #20]
    4864:	9d07      	ldr	r5, [sp, #28]
    4866:	47a8      	blx	r5
    4868:	1c43      	adds	r3, r0, #1
    486a:	d043      	beq.n	48f4 <_printf_i+0x224>
    486c:	6823      	ldr	r3, [r4, #0]
    486e:	2500      	movs	r5, #0
    4870:	079b      	lsls	r3, r3, #30
    4872:	d40f      	bmi.n	4894 <_printf_i+0x1c4>
    4874:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4876:	68e0      	ldr	r0, [r4, #12]
    4878:	4298      	cmp	r0, r3
    487a:	da3d      	bge.n	48f8 <_printf_i+0x228>
    487c:	0018      	movs	r0, r3
    487e:	e03b      	b.n	48f8 <_printf_i+0x228>
    4880:	0022      	movs	r2, r4
    4882:	2301      	movs	r3, #1
    4884:	3219      	adds	r2, #25
    4886:	9906      	ldr	r1, [sp, #24]
    4888:	9805      	ldr	r0, [sp, #20]
    488a:	9e07      	ldr	r6, [sp, #28]
    488c:	47b0      	blx	r6
    488e:	1c43      	adds	r3, r0, #1
    4890:	d030      	beq.n	48f4 <_printf_i+0x224>
    4892:	3501      	adds	r5, #1
    4894:	68e3      	ldr	r3, [r4, #12]
    4896:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4898:	1a9b      	subs	r3, r3, r2
    489a:	429d      	cmp	r5, r3
    489c:	dbf0      	blt.n	4880 <_printf_i+0x1b0>
    489e:	e7e9      	b.n	4874 <_printf_i+0x1a4>
    48a0:	2d00      	cmp	r5, #0
    48a2:	d0a9      	beq.n	47f8 <_printf_i+0x128>
    48a4:	9e04      	ldr	r6, [sp, #16]
    48a6:	0028      	movs	r0, r5
    48a8:	0039      	movs	r1, r7
    48aa:	f7ff f83d 	bl	3928 <__aeabi_uidivmod>
    48ae:	9b03      	ldr	r3, [sp, #12]
    48b0:	3e01      	subs	r6, #1
    48b2:	5c5b      	ldrb	r3, [r3, r1]
    48b4:	0028      	movs	r0, r5
    48b6:	7033      	strb	r3, [r6, #0]
    48b8:	0039      	movs	r1, r7
    48ba:	f7fe ffaf 	bl	381c <__udivsi3>
    48be:	1e05      	subs	r5, r0, #0
    48c0:	d1f1      	bne.n	48a6 <_printf_i+0x1d6>
    48c2:	2f08      	cmp	r7, #8
    48c4:	d109      	bne.n	48da <_printf_i+0x20a>
    48c6:	6823      	ldr	r3, [r4, #0]
    48c8:	07db      	lsls	r3, r3, #31
    48ca:	d506      	bpl.n	48da <_printf_i+0x20a>
    48cc:	6863      	ldr	r3, [r4, #4]
    48ce:	6922      	ldr	r2, [r4, #16]
    48d0:	4293      	cmp	r3, r2
    48d2:	dc02      	bgt.n	48da <_printf_i+0x20a>
    48d4:	2330      	movs	r3, #48	; 0x30
    48d6:	3e01      	subs	r6, #1
    48d8:	7033      	strb	r3, [r6, #0]
    48da:	9b04      	ldr	r3, [sp, #16]
    48dc:	1b9b      	subs	r3, r3, r6
    48de:	6123      	str	r3, [r4, #16]
    48e0:	9b07      	ldr	r3, [sp, #28]
    48e2:	aa09      	add	r2, sp, #36	; 0x24
    48e4:	9300      	str	r3, [sp, #0]
    48e6:	0021      	movs	r1, r4
    48e8:	9b06      	ldr	r3, [sp, #24]
    48ea:	9805      	ldr	r0, [sp, #20]
    48ec:	f7ff fe82 	bl	45f4 <_printf_common>
    48f0:	1c43      	adds	r3, r0, #1
    48f2:	d1b3      	bne.n	485c <_printf_i+0x18c>
    48f4:	2001      	movs	r0, #1
    48f6:	4240      	negs	r0, r0
    48f8:	b00b      	add	sp, #44	; 0x2c
    48fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48fc:	000055f6 	.word	0x000055f6
    4900:	000055e5 	.word	0x000055e5

00004904 <_putc_r>:
    4904:	b570      	push	{r4, r5, r6, lr}
    4906:	0006      	movs	r6, r0
    4908:	000d      	movs	r5, r1
    490a:	0014      	movs	r4, r2
    490c:	2800      	cmp	r0, #0
    490e:	d004      	beq.n	491a <_putc_r+0x16>
    4910:	6983      	ldr	r3, [r0, #24]
    4912:	2b00      	cmp	r3, #0
    4914:	d101      	bne.n	491a <_putc_r+0x16>
    4916:	f7ff fb75 	bl	4004 <__sinit>
    491a:	4b12      	ldr	r3, [pc, #72]	; (4964 <_putc_r+0x60>)
    491c:	429c      	cmp	r4, r3
    491e:	d111      	bne.n	4944 <_putc_r+0x40>
    4920:	6874      	ldr	r4, [r6, #4]
    4922:	68a3      	ldr	r3, [r4, #8]
    4924:	3b01      	subs	r3, #1
    4926:	60a3      	str	r3, [r4, #8]
    4928:	2b00      	cmp	r3, #0
    492a:	da05      	bge.n	4938 <_putc_r+0x34>
    492c:	69a2      	ldr	r2, [r4, #24]
    492e:	4293      	cmp	r3, r2
    4930:	db12      	blt.n	4958 <_putc_r+0x54>
    4932:	b2eb      	uxtb	r3, r5
    4934:	2b0a      	cmp	r3, #10
    4936:	d00f      	beq.n	4958 <_putc_r+0x54>
    4938:	6823      	ldr	r3, [r4, #0]
    493a:	b2e8      	uxtb	r0, r5
    493c:	1c5a      	adds	r2, r3, #1
    493e:	6022      	str	r2, [r4, #0]
    4940:	701d      	strb	r5, [r3, #0]
    4942:	bd70      	pop	{r4, r5, r6, pc}
    4944:	4b08      	ldr	r3, [pc, #32]	; (4968 <_putc_r+0x64>)
    4946:	429c      	cmp	r4, r3
    4948:	d101      	bne.n	494e <_putc_r+0x4a>
    494a:	68b4      	ldr	r4, [r6, #8]
    494c:	e7e9      	b.n	4922 <_putc_r+0x1e>
    494e:	4b07      	ldr	r3, [pc, #28]	; (496c <_putc_r+0x68>)
    4950:	429c      	cmp	r4, r3
    4952:	d1e6      	bne.n	4922 <_putc_r+0x1e>
    4954:	68f4      	ldr	r4, [r6, #12]
    4956:	e7e4      	b.n	4922 <_putc_r+0x1e>
    4958:	0022      	movs	r2, r4
    495a:	0029      	movs	r1, r5
    495c:	0030      	movs	r0, r6
    495e:	f7ff f98d 	bl	3c7c <__swbuf_r>
    4962:	e7ee      	b.n	4942 <_putc_r+0x3e>
    4964:	00005594 	.word	0x00005594
    4968:	000055b4 	.word	0x000055b4
    496c:	00005574 	.word	0x00005574

00004970 <_sbrk_r>:
    4970:	2300      	movs	r3, #0
    4972:	b570      	push	{r4, r5, r6, lr}
    4974:	4c06      	ldr	r4, [pc, #24]	; (4990 <_sbrk_r+0x20>)
    4976:	0005      	movs	r5, r0
    4978:	0008      	movs	r0, r1
    497a:	6023      	str	r3, [r4, #0]
    497c:	f7fe fe58 	bl	3630 <_sbrk>
    4980:	1c43      	adds	r3, r0, #1
    4982:	d103      	bne.n	498c <_sbrk_r+0x1c>
    4984:	6823      	ldr	r3, [r4, #0]
    4986:	2b00      	cmp	r3, #0
    4988:	d000      	beq.n	498c <_sbrk_r+0x1c>
    498a:	602b      	str	r3, [r5, #0]
    498c:	bd70      	pop	{r4, r5, r6, pc}
    498e:	46c0      	nop			; (mov r8, r8)
    4990:	200001f0 	.word	0x200001f0

00004994 <__sread>:
    4994:	b570      	push	{r4, r5, r6, lr}
    4996:	000c      	movs	r4, r1
    4998:	250e      	movs	r5, #14
    499a:	5f49      	ldrsh	r1, [r1, r5]
    499c:	f000 f8b2 	bl	4b04 <_read_r>
    49a0:	2800      	cmp	r0, #0
    49a2:	db03      	blt.n	49ac <__sread+0x18>
    49a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    49a6:	181b      	adds	r3, r3, r0
    49a8:	6563      	str	r3, [r4, #84]	; 0x54
    49aa:	bd70      	pop	{r4, r5, r6, pc}
    49ac:	89a3      	ldrh	r3, [r4, #12]
    49ae:	4a02      	ldr	r2, [pc, #8]	; (49b8 <__sread+0x24>)
    49b0:	4013      	ands	r3, r2
    49b2:	81a3      	strh	r3, [r4, #12]
    49b4:	e7f9      	b.n	49aa <__sread+0x16>
    49b6:	46c0      	nop			; (mov r8, r8)
    49b8:	ffffefff 	.word	0xffffefff

000049bc <__swrite>:
    49bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49be:	001f      	movs	r7, r3
    49c0:	898b      	ldrh	r3, [r1, #12]
    49c2:	0005      	movs	r5, r0
    49c4:	000c      	movs	r4, r1
    49c6:	0016      	movs	r6, r2
    49c8:	05db      	lsls	r3, r3, #23
    49ca:	d505      	bpl.n	49d8 <__swrite+0x1c>
    49cc:	230e      	movs	r3, #14
    49ce:	5ec9      	ldrsh	r1, [r1, r3]
    49d0:	2200      	movs	r2, #0
    49d2:	2302      	movs	r3, #2
    49d4:	f000 f874 	bl	4ac0 <_lseek_r>
    49d8:	89a3      	ldrh	r3, [r4, #12]
    49da:	4a05      	ldr	r2, [pc, #20]	; (49f0 <__swrite+0x34>)
    49dc:	0028      	movs	r0, r5
    49de:	4013      	ands	r3, r2
    49e0:	81a3      	strh	r3, [r4, #12]
    49e2:	0032      	movs	r2, r6
    49e4:	230e      	movs	r3, #14
    49e6:	5ee1      	ldrsh	r1, [r4, r3]
    49e8:	003b      	movs	r3, r7
    49ea:	f000 f81f 	bl	4a2c <_write_r>
    49ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49f0:	ffffefff 	.word	0xffffefff

000049f4 <__sseek>:
    49f4:	b570      	push	{r4, r5, r6, lr}
    49f6:	000c      	movs	r4, r1
    49f8:	250e      	movs	r5, #14
    49fa:	5f49      	ldrsh	r1, [r1, r5]
    49fc:	f000 f860 	bl	4ac0 <_lseek_r>
    4a00:	89a3      	ldrh	r3, [r4, #12]
    4a02:	1c42      	adds	r2, r0, #1
    4a04:	d103      	bne.n	4a0e <__sseek+0x1a>
    4a06:	4a05      	ldr	r2, [pc, #20]	; (4a1c <__sseek+0x28>)
    4a08:	4013      	ands	r3, r2
    4a0a:	81a3      	strh	r3, [r4, #12]
    4a0c:	bd70      	pop	{r4, r5, r6, pc}
    4a0e:	2280      	movs	r2, #128	; 0x80
    4a10:	0152      	lsls	r2, r2, #5
    4a12:	4313      	orrs	r3, r2
    4a14:	81a3      	strh	r3, [r4, #12]
    4a16:	6560      	str	r0, [r4, #84]	; 0x54
    4a18:	e7f8      	b.n	4a0c <__sseek+0x18>
    4a1a:	46c0      	nop			; (mov r8, r8)
    4a1c:	ffffefff 	.word	0xffffefff

00004a20 <__sclose>:
    4a20:	b510      	push	{r4, lr}
    4a22:	230e      	movs	r3, #14
    4a24:	5ec9      	ldrsh	r1, [r1, r3]
    4a26:	f000 f815 	bl	4a54 <_close_r>
    4a2a:	bd10      	pop	{r4, pc}

00004a2c <_write_r>:
    4a2c:	b570      	push	{r4, r5, r6, lr}
    4a2e:	0005      	movs	r5, r0
    4a30:	0008      	movs	r0, r1
    4a32:	0011      	movs	r1, r2
    4a34:	2200      	movs	r2, #0
    4a36:	4c06      	ldr	r4, [pc, #24]	; (4a50 <_write_r+0x24>)
    4a38:	6022      	str	r2, [r4, #0]
    4a3a:	001a      	movs	r2, r3
    4a3c:	f7fe fdd0 	bl	35e0 <_write>
    4a40:	1c43      	adds	r3, r0, #1
    4a42:	d103      	bne.n	4a4c <_write_r+0x20>
    4a44:	6823      	ldr	r3, [r4, #0]
    4a46:	2b00      	cmp	r3, #0
    4a48:	d000      	beq.n	4a4c <_write_r+0x20>
    4a4a:	602b      	str	r3, [r5, #0]
    4a4c:	bd70      	pop	{r4, r5, r6, pc}
    4a4e:	46c0      	nop			; (mov r8, r8)
    4a50:	200001f0 	.word	0x200001f0

00004a54 <_close_r>:
    4a54:	2300      	movs	r3, #0
    4a56:	b570      	push	{r4, r5, r6, lr}
    4a58:	4c06      	ldr	r4, [pc, #24]	; (4a74 <_close_r+0x20>)
    4a5a:	0005      	movs	r5, r0
    4a5c:	0008      	movs	r0, r1
    4a5e:	6023      	str	r3, [r4, #0]
    4a60:	f7fe fdf8 	bl	3654 <_close>
    4a64:	1c43      	adds	r3, r0, #1
    4a66:	d103      	bne.n	4a70 <_close_r+0x1c>
    4a68:	6823      	ldr	r3, [r4, #0]
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	d000      	beq.n	4a70 <_close_r+0x1c>
    4a6e:	602b      	str	r3, [r5, #0]
    4a70:	bd70      	pop	{r4, r5, r6, pc}
    4a72:	46c0      	nop			; (mov r8, r8)
    4a74:	200001f0 	.word	0x200001f0

00004a78 <_fstat_r>:
    4a78:	2300      	movs	r3, #0
    4a7a:	b570      	push	{r4, r5, r6, lr}
    4a7c:	4c06      	ldr	r4, [pc, #24]	; (4a98 <_fstat_r+0x20>)
    4a7e:	0005      	movs	r5, r0
    4a80:	0008      	movs	r0, r1
    4a82:	0011      	movs	r1, r2
    4a84:	6023      	str	r3, [r4, #0]
    4a86:	f7fe fde8 	bl	365a <_fstat>
    4a8a:	1c43      	adds	r3, r0, #1
    4a8c:	d103      	bne.n	4a96 <_fstat_r+0x1e>
    4a8e:	6823      	ldr	r3, [r4, #0]
    4a90:	2b00      	cmp	r3, #0
    4a92:	d000      	beq.n	4a96 <_fstat_r+0x1e>
    4a94:	602b      	str	r3, [r5, #0]
    4a96:	bd70      	pop	{r4, r5, r6, pc}
    4a98:	200001f0 	.word	0x200001f0

00004a9c <_isatty_r>:
    4a9c:	2300      	movs	r3, #0
    4a9e:	b570      	push	{r4, r5, r6, lr}
    4aa0:	4c06      	ldr	r4, [pc, #24]	; (4abc <_isatty_r+0x20>)
    4aa2:	0005      	movs	r5, r0
    4aa4:	0008      	movs	r0, r1
    4aa6:	6023      	str	r3, [r4, #0]
    4aa8:	f7fe fddc 	bl	3664 <_isatty>
    4aac:	1c43      	adds	r3, r0, #1
    4aae:	d103      	bne.n	4ab8 <_isatty_r+0x1c>
    4ab0:	6823      	ldr	r3, [r4, #0]
    4ab2:	2b00      	cmp	r3, #0
    4ab4:	d000      	beq.n	4ab8 <_isatty_r+0x1c>
    4ab6:	602b      	str	r3, [r5, #0]
    4ab8:	bd70      	pop	{r4, r5, r6, pc}
    4aba:	46c0      	nop			; (mov r8, r8)
    4abc:	200001f0 	.word	0x200001f0

00004ac0 <_lseek_r>:
    4ac0:	b570      	push	{r4, r5, r6, lr}
    4ac2:	0005      	movs	r5, r0
    4ac4:	0008      	movs	r0, r1
    4ac6:	0011      	movs	r1, r2
    4ac8:	2200      	movs	r2, #0
    4aca:	4c06      	ldr	r4, [pc, #24]	; (4ae4 <_lseek_r+0x24>)
    4acc:	6022      	str	r2, [r4, #0]
    4ace:	001a      	movs	r2, r3
    4ad0:	f7fe fdca 	bl	3668 <_lseek>
    4ad4:	1c43      	adds	r3, r0, #1
    4ad6:	d103      	bne.n	4ae0 <_lseek_r+0x20>
    4ad8:	6823      	ldr	r3, [r4, #0]
    4ada:	2b00      	cmp	r3, #0
    4adc:	d000      	beq.n	4ae0 <_lseek_r+0x20>
    4ade:	602b      	str	r3, [r5, #0]
    4ae0:	bd70      	pop	{r4, r5, r6, pc}
    4ae2:	46c0      	nop			; (mov r8, r8)
    4ae4:	200001f0 	.word	0x200001f0

00004ae8 <memchr>:
    4ae8:	b2c9      	uxtb	r1, r1
    4aea:	1882      	adds	r2, r0, r2
    4aec:	4290      	cmp	r0, r2
    4aee:	d101      	bne.n	4af4 <memchr+0xc>
    4af0:	2000      	movs	r0, #0
    4af2:	4770      	bx	lr
    4af4:	7803      	ldrb	r3, [r0, #0]
    4af6:	428b      	cmp	r3, r1
    4af8:	d0fb      	beq.n	4af2 <memchr+0xa>
    4afa:	3001      	adds	r0, #1
    4afc:	e7f6      	b.n	4aec <memchr+0x4>

00004afe <__malloc_lock>:
    4afe:	4770      	bx	lr

00004b00 <__malloc_unlock>:
    4b00:	4770      	bx	lr
	...

00004b04 <_read_r>:
    4b04:	b570      	push	{r4, r5, r6, lr}
    4b06:	0005      	movs	r5, r0
    4b08:	0008      	movs	r0, r1
    4b0a:	0011      	movs	r1, r2
    4b0c:	2200      	movs	r2, #0
    4b0e:	4c06      	ldr	r4, [pc, #24]	; (4b28 <_read_r+0x24>)
    4b10:	6022      	str	r2, [r4, #0]
    4b12:	001a      	movs	r2, r3
    4b14:	f7fe fd42 	bl	359c <_read>
    4b18:	1c43      	adds	r3, r0, #1
    4b1a:	d103      	bne.n	4b24 <_read_r+0x20>
    4b1c:	6823      	ldr	r3, [r4, #0]
    4b1e:	2b00      	cmp	r3, #0
    4b20:	d000      	beq.n	4b24 <_read_r+0x20>
    4b22:	602b      	str	r3, [r5, #0]
    4b24:	bd70      	pop	{r4, r5, r6, pc}
    4b26:	46c0      	nop			; (mov r8, r8)
    4b28:	200001f0 	.word	0x200001f0

00004b2c <__FUNCTION__.13620>:
    4b2c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    4b3c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    4b4c:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    4b5c:	6320746c 0000646d 00000728 000006f8     lt cmd..(.......
    4b6c:	000006f0 00000708 00000700 00000720     ............ ...
    4b7c:	00000710 00000718                       ........

00004b84 <__FUNCTION__.13101>:
    4b84:	5f666968 65636572 00657669              hif_receive.

00004b90 <__FUNCTION__.13117>:
    4b90:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    4ba0:	66696820 6365725f 65766965 6e49203a      hif_receive: In
    4bb0:	696c6176 72612064 656d7567 0000746e     valid argument..
    4bc0:	20505041 75716552 65747365 69532064     APP Requested Si
    4bd0:	6920657a 616c2073 72656772 61687420     ze is larger tha
    4be0:	6874206e 65722065 65766963 75622064     n the recived bu
    4bf0:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
    4c00:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
    4c10:	65747365 64412064 73657264 65622073     ested Address be
    4c20:	646e6f79 65687420 63657220 64657669     yond the recived
    4c30:	66756220 20726566 72646461 20737365      buffer address 
    4c40:	20646e61 676e656c 00006874 20705247     and length..GRp 
    4c50:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
    4c60:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
    4c70:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
    4c80:	6b617720 74207075 63206568 00706968      wakup the chip.

00004c90 <__FUNCTION__.13052>:
    4c90:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00004c9c <__FUNCTION__.13081>:
    4c9c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...
    4cac:	666e6f43 7463696c 49206465 20222050     Conflicted IP " 
    4cbc:	252e7525 75252e75 2075252e 000a2022     %u.%u.%u.%u " ..
    4ccc:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
    4cdc:	000a6425 6d726946 65726177 72657620     %d..Firmware ver
    4cec:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
    4cfc:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
    4d0c:	65726177 69754220 2520646c 69542073     ware Build %s Ti
    4d1c:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
    4d2c:	6e694d20 69726420 20726576 20726576      Min driver ver 
    4d3c:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
    4d4c:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
    4d5c:	0000000a 353a3931 37303a30 00000000     ....19:50:07....
    4d6c:	206e614a 32203332 00383130 76697244     Jan 23 2018.Driv
    4d7c:	62207265 746c6975 20746120 25097325     er built at %s.%
    4d8c:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
    4d9c:	7277616d 65562065 6f697372 0000006e     mawre Version...

00004dac <__FUNCTION__.12964>:
    4dac:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
    4dbc:	74206465 6564206f 696e692d 6c616974     ed to de-initial
    4dcc:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
    4ddc:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
    4dec:	74206465 6177206f 2070756b 20656874     ed to wakup the 
    4dfc:	70696863 00000000 76697244 65567265     chip....DriverVe
    4e0c:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

00004e1c <__FUNCTION__.12962>:
    4e1c:	645f6d6e 695f7672 0074696e              nm_drv_init.

00004e28 <__FUNCTION__.12969>:
    4e28:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    4e38:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
    4e48:	6965645f 2074696e 6c696166 00000000     _deinit fail....
    4e58:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
    4e68:	73616c66 69642068 6c626173 61662065     flash disable fa
    4e78:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
    4e88:	6c696166 696e6920 75622074 00000073     fail init bus...
    4e98:	6c696166 74206465 6e65206f 656c6261     failed to enable
    4ea8:	746e6920 75727265 2e737470 0000002e      interrupts.....
    4eb8:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    4ec8:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    4ed8:	20444920 0a786c25 00000000 000012b8      ID %lx.........
    4ee8:	000012b8 000012e8 0000126a 0000128e     ........j.......
    4ef8:	0000129c 000012ce 000012ce 00001316     ................
    4f08:	0000124e 00001350 00001350 00001350     N...P...P...P...
    4f18:	00001350 000012aa cac4c9c3              P...........

00004f24 <__FUNCTION__.12268>:
    4f24:	5f697073 00646d63                       spi_cmd.

00004f2c <__FUNCTION__.12284>:
    4f2c:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00004f38 <__FUNCTION__.12300>:
    4f38:	5f697073 61746164 6165725f 00000064     spi_data_read...

00004f48 <__FUNCTION__.12327>:
    4f48:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00004f58 <__FUNCTION__.12350>:
    4f58:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00004f68 <__FUNCTION__.12363>:
    4f68:	735f6d6e 725f6970 00646165              nm_spi_read.

00004f74 <__FUNCTION__.12384>:
    4f74:	735f6d6e 695f6970 0074696e              nm_spi_init.

00004f80 <crc7_syndrome_table>:
    4f80:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    4f90:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    4fa0:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    4fb0:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    4fc0:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    4fd0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    4fe0:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    4ff0:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    5000:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    5010:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    5020:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    5030:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    5040:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    5050:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    5060:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    5070:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    5080:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    5090:	6e692064 6e726574 72206c61 20646165     d internal read 
    50a0:	746f7270 6c6f636f 74697720 52432068     protocol with CR
    50b0:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
    50c0:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
    50d0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    50e0:	6e692064 6e726574 72206c61 20646165     d internal read 
    50f0:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
    5100:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    5110:	6e726574 77206c61 65746972 6f727020     ternal write pro
    5120:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
    5130:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
    5140:	20646d63 64616572 69686320 64692070     cmd read chip id
    5150:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    5160:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    5170:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    5180:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    5190:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    51a0:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    51b0:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    51c0:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    51d0:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    51e0:	00000000 65736552 6e612074 65722064     ....Reset and re
    51f0:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
    5200:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    5210:	6d632064 72772064 2c657469 73756220     d cmd write, bus
    5220:	72726520 2e2e726f 0000002e 696d6e5b      error......[nmi
    5230:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    5240:	65722064 6e6f7073 72206573 2c646165     d response read,
    5250:	73756220 72726520 2e2e726f 0000002e      bus error......
    5260:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    5270:	61642064 72206174 6f707365 2065736e     d data response 
    5280:	64616572 7562202c 72652073 2e726f72     read, bus error.
    5290:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    52a0:	656c6961 61642064 72206174 6f707365     ailed data respo
    52b0:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
    52c0:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
    52d0:	656c6961 61642064 62206174 6b636f6c     ailed data block
    52e0:	61657220 62202c64 65207375 726f7272      read, bus error
    52f0:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    5300:	656c6961 61642064 62206174 6b636f6c     ailed data block
    5310:	63726320 61657220 62202c64 65207375      crc read, bus e
    5320:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    5330:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
    5340:	20646165 20676572 38302528 2e2e2978     ead reg (%08x)..
    5350:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    5360:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    5370:	202c6573 64616572 67657220 30252820     se, read reg (%0
    5380:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    5390:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    53a0:	2e646165 00002e2e 65736552 6e612074     ead.....Reset an
    53b0:	65722064 20797274 25206425 000a786c     d retry %d %lx..
    53c0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    53d0:	6d632064 77202c64 65746972 67657220     d cmd, write reg
    53e0:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    53f0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    5400:	65722064 6e6f7073 202c6573 74697277     d response, writ
    5410:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
    5420:	00000000 65736552 6e612074 65722064     ....Reset and re
    5430:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
    5440:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    5450:	42001800 42001c00 00002d2a 00002d26     ...B...B*-..&-..
    5460:	00002d26 00002d88 00002d88 00002d3e     &-...-...-..>-..
    5470:	00002d30 00002d44 00002d76 00002f48     0-..D-..v-..H/..
    5480:	00002f28 00002f28 00002fb4 00002f3a     (/..(/.../..:/..
    5490:	00002f56 00002f2c 00002f64 00002fa4     V/..,/..d/.../..
    54a0:	57202d2d 31434e49 20303035 70696863     -- WINC1500 chip
    54b0:	666e6920 616d726f 6e6f6974 61786520      information exa
    54c0:	656c706d 0d2d2d20 202d2d0a 574d4153     mple --..-- SAMW
    54d0:	585f3532 49414c50 5f44454e 204f5250     25_XPLAINED_PRO 
    54e0:	0a0d2d2d 43202d2d 69706d6f 3a64656c     --..-- Compiled:
    54f0:	6e614a20 20333220 38313032 3a393120      Jan 23 2018 19:
    5500:	313a3035 2d2d2033 0000000d 6e69616d     50:13 --....main
    5510:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
    5520:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
    5530:	0000000a 70696843 20444920 090d203a     ....Chip ID : ..
    5540:	78250909 00000a0d 52204652 73697665     ..%x....RF Revis
    5550:	206e6f69 3a204449 09090d20 0d782509     ion ID : ....%x.
    5560:	0000000a 656e6f44 0d0a0d2e 00000000     ....Done........

00005570 <_global_impure_ptr>:
    5570:	20000010                                ... 

00005574 <__sf_fake_stderr>:
	...

00005594 <__sf_fake_stdin>:
	...

000055b4 <__sf_fake_stdout>:
	...
    55d4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    55e4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    55f4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    5604:	00006665                                ef..

00005608 <_init>:
    5608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    560a:	46c0      	nop			; (mov r8, r8)
    560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    560e:	bc08      	pop	{r3}
    5610:	469e      	mov	lr, r3
    5612:	4770      	bx	lr

00005614 <__init_array_start>:
    5614:	000000dd 	.word	0x000000dd

00005618 <_fini>:
    5618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    561a:	46c0      	nop			; (mov r8, r8)
    561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    561e:	bc08      	pop	{r3}
    5620:	469e      	mov	lr, r3
    5622:	4770      	bx	lr

00005624 <__fini_array_start>:
    5624:	000000b5 	.word	0x000000b5
